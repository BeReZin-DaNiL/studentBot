import os
import json
from aiogram import Bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.context import FSMContext

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
STATUS_EMOJI_MAP = {
    "–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç—Å—è": "üìù",
    "–†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç—Å—è": "üÜï",
    "–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è": "ü§î",
    "–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è": "üôã‚Äç‚ôÇÔ∏è",
    "–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã": "üí≥",
    "–ü—Ä–∏–Ω—è—Ç–∞": "‚úÖ",
    "–í —Ä–∞–±–æ—Ç–µ": "‚è≥",
    "–í—ã–ø–æ–ª–Ω–µ–Ω–∞": "üéâ",
    "–û—Ç–º–µ–Ω–µ–Ω–∞": "‚ùå",
    "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É": "üì¨",
    "–£—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º": "‚úÖ",
    "–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–µ": "‚úçÔ∏è",
}

ADMIN_ID = os.getenv("ADMIN_ID", "842270366")
BOT_TOKEN = os.getenv("BOT_TOKEN", "7763016986:AAFW4Rwh012_bfh8Jt0E_zaq5abvzenr4bE")
bot = Bot(token=BOT_TOKEN)

def get_all_orders() -> list:
    file_path = "orders.json"
    if not os.path.exists(file_path) or os.path.getsize(file_path) == 0:
        return []
    with open(file_path, "r", encoding="utf-8") as f:
        try:
            all_orders = json.load(f)
        except json.JSONDecodeError:
            return []
    return all_orders if isinstance(all_orders, list) else []

def get_full_name(user_or_dict):
    if isinstance(user_or_dict, dict):
        first = user_or_dict.get('first_name', '')
        last = user_or_dict.get('last_name', '')
    else:
        first = getattr(user_or_dict, 'first_name', '')
        last = getattr(user_or_dict, 'last_name', '')
    full = f"{first} {last}".strip()
    return full if full else "–ë–µ–∑ –∏–º–µ–Ω–∏"

def pluralize_days(n):
    try:
        n = int(n)
    except (ValueError, TypeError):
        return str(n)
    if 11 <= n % 100 <= 14:
        return f"{n} –¥–Ω–µ–π"
    elif n % 10 == 1:
        return f"{n} –¥–µ–Ω—å"
    elif 2 <= n % 10 <= 4:
        return f"{n} –¥–Ω—è"
    else:
        return f"{n} –¥–Ω–µ–π"

def get_price_keyboard(order_id, for_admin=False):
    buttons = [
        [InlineKeyboardButton(text=f"{i} ‚ÇΩ", callback_data=f"price_{i}") for i in range(500, 2501, 500)],
        [InlineKeyboardButton(text=f"{i} ‚ÇΩ", callback_data=f"price_{i}") for i in range(3000, 5001, 1000)],
    ]
    if for_admin:
        back_btn = InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"admin_self_back_to_order_{order_id}")
    else:
        back_btn = InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"executor_back_to_invite:{order_id}")
    buttons.append([back_btn])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_deadline_keyboard():
    buttons = [
        [
            InlineKeyboardButton(text="1 –¥–µ–Ω—å", callback_data="deadline_1 –¥–µ–Ω—å"),
            InlineKeyboardButton(text="3 –¥–Ω—è", callback_data="deadline_3 –¥–Ω—è"),
            InlineKeyboardButton(text="–î–æ –¥–µ–¥–ª–∞–π–Ω–∞", callback_data="deadline_–î–æ –¥–µ–¥–ª–∞–π–Ω–∞"),
        ],
        [InlineKeyboardButton(text="üí¨ –í–≤–µ—Å—Ç–∏ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç", callback_data="deadline_manual")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="executor_back_to_price")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_admin_deadline_keyboard():
    buttons = [
        [
            InlineKeyboardButton(text="1 –¥–µ–Ω—å", callback_data="admin_deadline_1 –¥–µ–Ω—å"),
            InlineKeyboardButton(text="3 –¥–Ω—è", callback_data="admin_deadline_3 –¥–Ω—è"),
            InlineKeyboardButton(text="–î–æ –¥–µ–¥–ª–∞–π–Ω–∞", callback_data="admin_deadline_–î–æ –¥–µ–¥–ª–∞–π–Ω–∞"),
        ],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_self_back_to_price")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def     get_admin_order_keyboard(order, show_materials_button=True):
    status = order.get('status')
    executor_is_admin = str(order.get('executor_id')) == str(ADMIN_ID)

    # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å '–í —Ä–∞–±–æ—Ç–µ' –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å ‚Äî –∞–¥–º–∏–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ '–°–¥–∞—Ç—å —Ä–∞–±–æ—Ç—É' –∏ '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã'
    if status == "–í —Ä–∞–±–æ—Ç–µ" and executor_is_admin:
        buttons = [
            [InlineKeyboardButton(text="‚úÖ –°–¥–∞—Ç—å —Ä–∞–±–æ—Ç—É", callback_data=f"admin_admin_submit_work_{order['order_id']}")],
            [InlineKeyboardButton(text="üìé –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∑–∞–∫–∞–∑–∞", callback_data=f"admin_show_materials:{order['order_id']}")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ]
        return InlineKeyboardMarkup(inline_keyboard=buttons)

    # --- –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ ---
    buttons = []
    if 'order_id' not in order:
        buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")])
        return InlineKeyboardMarkup(inline_keyboard=buttons)
    if status == "–†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç—Å—è" and not executor_is_admin:
        buttons.append([
            InlineKeyboardButton(text="üë§ –í—ã–±—Ä–∞—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è", callback_data=f"assign_executor_start_{order['order_id']}")
        ])
    if status in ["–†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç—Å—è", "–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"]:
        buttons.append([
            InlineKeyboardButton(text="‚ùáÔ∏è –í–∑—è—Ç—å –∑–∞–∫–∞–∑", callback_data=f"admin_self_take_{order['order_id']}")
        ])
    if status == "–í—ã–ø–æ–ª–Ω–µ–Ω–∞":
        buttons.append([InlineKeyboardButton(text="üìä –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ç–∞–±–ª–∏—Ü—É", callback_data=f"admin_save_to_gsheet:{order['order_id']}")])
    if status != "–í—ã–ø–æ–ª–Ω–µ–Ω–∞":
        buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –∑–∞—è–≤–∫–∏", callback_data=f"admin_delete_order:{order['order_id']}")])
        has_files = order.get('guidelines_file') or order.get('task_file') or order.get('task_text') or order.get('example_file')
        if show_materials_button and has_files:
            buttons.append([InlineKeyboardButton(text="üìé –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∑–∞–∫–∞–∑–∞", callback_data=f"admin_show_materials:{order['order_id']}")])
        if not show_materials_button:
            buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –°–∫—Ä—ã—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã", callback_data=f"admin_hide_materials:{order['order_id']}")])
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–°–¥–∞—Ç—å —Ä–∞–±–æ—Ç—É" –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ "–í —Ä–∞–±–æ—Ç–µ"
        if status == "–í —Ä–∞–±–æ—Ç–µ":
            buttons.append([InlineKeyboardButton(text="‚úÖ –°–¥–∞—Ç—å —Ä–∞–±–æ—Ç—É", callback_data=f"admin_admin_submit_work_{order['order_id']}")])
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_admin_comment_skip_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="admin_skip_comment")]
    ])

async def admin_view_order_handler(callback: CallbackQuery, state: FSMContext):
    from shared import get_all_orders, ADMIN_ID, pluralize_days, get_full_name, get_admin_order_keyboard
    if callback.from_user.id != int(ADMIN_ID): return
    order_id = int(callback.data.split("_")[-1])
    orders = get_all_orders()
    target_order = next((order for order in orders if order['order_id'] == order_id), None)
    if not target_order:
        await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
 
    status = target_order.get('status')
    
    if status == '–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è' and 'executor_offer' in target_order:
        offer = target_order['executor_offer']
        executor_full_name = offer.get('executor_full_name', '–ë–µ–∑ –∏–º–µ–Ω–∏')
        price = offer.get('price')
        deadline = offer.get('deadline', 'N/A')
        executor_comment = offer.get('executor_comment', '–ù–µ—Ç')
        subject = target_order.get('subject', '–ù–µ —É–∫–∞–∑–∞–Ω')
        deadline_str = pluralize_days(deadline)

        admin_notification = f"""‚úÖ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å {executor_full_name} –≥–æ—Ç–æ–≤ –≤–∑—è—Ç—å—Å—è –∑–∞ –∑–∞–∫–∞–∑ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É \"{subject}\"\n\n<b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ —É—Å–ª–æ–≤–∏—è:</b>\nüí∞ <b>–¶–µ–Ω–∞:</b> {price} ‚ÇΩ\n‚è≥ <b>–°—Ä–æ–∫:</b> {deadline_str}\nüí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:</b> {executor_comment or '–ù–µ—Ç'}"""

        keyboard = get_admin_order_keyboard(target_order, show_materials_button=True)
        try:
            await callback.message.edit_text(admin_notification, parse_mode="HTML", reply_markup=keyboard)
        except Exception:
            await callback.message.answer(admin_notification, parse_mode="HTML", reply_markup=keyboard)

    else:
        # –û—Å–æ–±—ã–π –≤—ã–≤–æ–¥ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ '–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–µ' –∏ –µ—Å–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å ‚Äî –∞–¥–º–∏–Ω
        executor_is_admin = str(target_order.get('executor_id')) == str(ADMIN_ID)
        if status == '–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–µ' and executor_is_admin:
            creation_date = target_order.get('creation_date', '‚Äî')
            group = target_order.get('group_name', '‚Äî')
            university = target_order.get('university_name', '‚Äî')
            teacher = target_order.get('teacher_name', '‚Äî')
            gradebook = target_order.get('gradebook', '‚Äî')
            subject = target_order.get('subject', '‚Äî')
            work_type_key = target_order.get('work_type', 'N/A').replace('work_type_', '')
            work_type_str = work_type_key if work_type_key != 'other' else target_order.get('work_type_other_name', '–î—Ä—É–≥–æ–µ')
            guidelines = '‚úÖ –î–∞' if target_order.get('has_guidelines') else '‚ùå –ù–µ—Ç'
            task = '‚úÖ –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ' if target_order.get('task_file') or target_order.get('task_text') else '‚ùå –ù–µ—Ç'
            example = '‚úÖ –î–∞' if target_order.get('has_example') else '‚ùå –ù–µ—Ç'
            deadline = target_order.get('deadline', '‚Äî')
            revision_comment = target_order.get('revision_comment', '‚Äî')
            admin_name = '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'
            details_text = (
                f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {creation_date}\n\n"
                f"–ì—Ä—É–ø–ø–∞: {group}\n"
                f"–í–£–ó: {university}\n"
                f"–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {teacher}\n"
                f"–ù–æ–º–µ—Ä –∑–∞—á–µ—Ç–∫–∏: {gradebook}\n"
                f"–ü—Ä–µ–¥–º–µ—Ç: {subject}\n"
                f"–¢–∏–ø —Ä–∞–±–æ—Ç—ã: {work_type_str}\n"
                f"–ú–µ—Ç–æ–¥–∏—á–∫–∞: {guidelines}\n"
                f"–ó–∞–¥–∞–Ω–∏–µ: {task}\n"
                f"–ü—Ä–∏–º–µ—Ä: {example}\n"
                f"–î–µ–¥–ª–∞–π–Ω: {deadline}\n\n"
                f"–î–æ—Ä–∞–±–æ—Ç–∫–∞: {revision_comment}\n"
                f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {admin_name}"
            )
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –°–¥–∞—Ç—å —Ä–∞–±–æ—Ç—É", callback_data=f"admin_admin_submit_work_{order_id}")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∑–∞—è–≤–∫–∞–º", callback_data="admin_orders_list")]
            ])
            try:
                await callback.message.edit_text(details_text, reply_markup=keyboard)
            except Exception:
                await callback.message.answer(details_text, reply_markup=keyboard)
            await callback.answer()
            return
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞
        full_name = get_full_name(target_order)
        header = f"–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ ‚Ññ{order_id} –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ ({full_name})\n"
        if target_order.get('creation_date'):
            header += f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {target_order.get('creation_date')}\n"
        group = target_order.get("group_name", "–ù–µ —É–∫–∞–∑–∞–Ω–∞")
        university = target_order.get("university_name", "–ù–µ —É–∫–∞–∑–∞–Ω")
        teacher = target_order.get("teacher_name", "–ù–µ —É–∫–∞–∑–∞–Ω")
        gradebook = target_order.get("gradebook", "–ù–µ —É–∫–∞–∑–∞–Ω")
        subject = target_order.get("subject", "–ù–µ —É–∫–∞–∑–∞–Ω")
        work_type_key = target_order.get("work_type", "N/A").replace("work_type_", "")
        work_type_str = work_type_key if work_type_key != 'other' else target_order.get('work_type_other_name', '–î—Ä—É–≥–æ–µ')
        guidelines = '‚úÖ –î–∞' if target_order.get('has_guidelines') else '‚ùå –ù–µ—Ç'
        task = '‚úÖ –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ' if target_order.get('task_file') or target_order.get('task_text') else '‚ùå –ù–µ—Ç'
        example = '‚úÖ –î–∞' if target_order.get('has_example') else '‚ùå –ù–µ—Ç'
        deadline = target_order.get('deadline', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
        details_text = f"""<b>{header}</b>\n\n–ì—Ä—É–ø–ø–∞: {group}\n–í–£–ó: {university}\n–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {teacher}\n–ù–æ–º–µ—Ä –∑–∞—á–µ—Ç–∫–∏: {gradebook}\n–ü—Ä–µ–¥–º–µ—Ç: {subject}\n–¢–∏–ø —Ä–∞–±–æ—Ç—ã: {work_type_str}\n–ú–µ—Ç–æ–¥–∏—á–∫–∞: {guidelines}\n–ó–∞–¥–∞–Ω–∏–µ: {task}\n–ü—Ä–∏–º–µ—Ä: {example}\n–î–µ–¥–ª–∞–π–Ω: {deadline}"""
        keyboard = get_admin_order_keyboard(target_order, show_materials_button=True)
        try:
            await callback.message.edit_text(details_text, reply_markup=keyboard, parse_mode="HTML")
        except Exception:
            await callback.message.answer(details_text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()

def get_executors_list():
    EXECUTORS_FILE = "executors.json"
    if not os.path.exists(EXECUTORS_FILE):
        return []
    with open(EXECUTORS_FILE, "r", encoding="utf-8") as f:
        try:
            return json.load(f)
        except Exception:
            return [] 
        

async def save_order_to_gsheets(order):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞—è–≤–∫—É –≤ Google Sheets.
    """
    try:
        from google.oauth2.service_account import Credentials
        import gspread
        GOOGLE_SHEET_ID = "1D15yyPKHyN1Vw8eRnjT79xV28cwL_q5EIZa97tgTF2U"
        users_file = "users.json"
        phone_number = order.get("phone_number", "")
        if not phone_number and os.path.exists(users_file):
            with open(users_file, "r", encoding="utf-8") as f:
                try:
                    users = json.load(f)
                    phone_number = users.get(str(order.get("user_id")), {}).get("phone_number", "")
                except Exception:
                    phone_number = ""

         # --- –ù–æ–≤—ã–π –±–ª–æ–∫: —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –¥–Ω—è—Ö ---
        exec_deadline = ""
        executor_name = ""
        executor_price = ""

        if str(order.get('executor_id')) == str(ADMIN_ID):
            exec_deadline = order.get('deadline', '') # –°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–Ω–∞–ø—Ä. "5 –¥–Ω–µ–π")
            due_date = order.get('due_date', '') # –î–∞—Ç–∞ —Å–¥–∞—á–∏ (–Ω–∞–ø—Ä. "29.07.2025")
            executor_name = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
            executor_price = order.get('final_price', '')
        elif 'executor_offers' in order and order.get('executor_id'):
            executor_id = str(order.get('executor_id'))
            selected_offer = next((o for o in order['executor_offers'] if str(o.get('executor_id')) == executor_id), None)
            if selected_offer:
                exec_deadline = selected_offer.get("deadline", "")
                due_date = selected_offer.get('due_date', order.get('deadline_date')) # –ò—Å–ø–æ–ª—å–∑—É–µ–º due_date –∏–∑ –æ—Ñ—Ñ–µ—Ä–∞ –∏–ª–∏ –∏—Å—Ö–æ–¥–Ω—ã–π
                executor_name = selected_offer.get("executor_full_name", "")
                executor_price = selected_offer.get("price", "")

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞
        exec_deadline_str = pluralize_days(exec_deadline) if str(exec_deadline).isdigit() else exec_deadline

        profit = float(order.get("final_price", 0) or 0) - float(executor_price or 0)

        row = [
            order.get("order_id", ""),
            f"{order.get('first_name', '')} {order.get('last_name', '')}".strip(),
            phone_number,
            order.get("group_name", ""),
            order.get("gradebook", ""),
            executor_name,
            order.get("subject", ""),
            order.get("creation_date", ""),
            exec_deadline_str,  # –°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)
            due_date,  # –î–∞—Ç–∞ —Å–¥–∞—á–∏
            executor_price,
            order.get("final_price", ""),
            str(profit),
            order.get("status", "")
        ]
        creds = Credentials.from_service_account_file("google-credentials.json", scopes=["https://www.googleapis.com/auth/spreadsheets"])
        gc = gspread.authorize(creds)
        sh = gc.open_by_key(GOOGLE_SHEET_ID)
        worksheet = sh.sheet1
        worksheet.append_row(row, value_input_option="USER_ENTERED")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ Google Sheets: {e}")