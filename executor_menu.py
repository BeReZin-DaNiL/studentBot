from aiogram import Router, F, types
from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import StateFilter
import json
import os
from shared import ADMIN_ID, bot, get_full_name
from datetime import datetime

EXECUTORS_FILE = "executors.json"
ORDERS_FILE = "orders.json"

executor_menu_router = Router()

class ExecutorStates(StatesGroup):
    waiting_for_admin_message = State()
    waiting_for_work_file = State()
    waiting_for_work_submit = State()

class ExecutorCancelOrder(StatesGroup):
    waiting_for_confirm = State()
    waiting_for_reason = State()
    waiting_for_custom_reason = State()
    waiting_for_comment = State()

class ExecutorContactClient(StatesGroup):
    waiting_for_message = State()

EXECUTOR_CANCEL_REASONS = [
    "–ù–µ —É—Å–ø–µ—é –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞",
    "–ü–µ—Ä–µ–¥—É–º–∞–ª",
    "–°–ª–æ–∂–Ω–∞—è —Ç–µ–º–∞",
    "–î—Ä—É–≥–æ–µ (–≤–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é)"
]

# –°–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç—É—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤–∏–¥–∏—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å
EXECUTOR_VISIBLE_STATUSES = [
    '–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è',
    '–í —Ä–∞–±–æ—Ç–µ',
    '–í—ã–ø–æ–ª–Ω–µ–Ω–∞',
    '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É',
    '–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–µ',
    '–£—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º',
    '–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã'
]

def is_executor(user_id: int) -> bool:
    if not os.path.exists(EXECUTORS_FILE):
        return False
    with open(EXECUTORS_FILE, "r", encoding="utf-8") as f:
        try:
            executors = json.load(f)
        except Exception:
            return False
    return any(str(ex.get("id")) == str(user_id) for ex in executors)

def get_executor_menu_keyboard():
    buttons = [
        [KeyboardButton(text="üìÇ –ú–æ–∏ –∑–∞–∫–∞–∑—ã")],
        [KeyboardButton(text="üë®‚Äçüíª –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")]
    ]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

def get_executor_cancel_confirm_keyboard(order_id):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–∞", callback_data=f"executor_cancel_confirm:{order_id}")],
        [InlineKeyboardButton(text="–ù–µ—Ç", callback_data=f"executor_cancel_abort:{order_id}")]
    ])

def get_executor_cancel_reason_keyboard(order_id):
    buttons = [
        [InlineKeyboardButton(text=reason, callback_data=f"executor_cancel_reason:{order_id}:{i}")]
        for i, reason in enumerate(EXECUTOR_CANCEL_REASONS)
    ]
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"executor_view_order_{order_id}")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_executor_cancel_comment_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="executor_skip_cancel_comment")]
    ])

def get_executor_orders(user_id: int) -> list:
    if not os.path.exists(ORDERS_FILE):
        return []
    with open(ORDERS_FILE, "r", encoding="utf-8") as f:
        try:
            all_orders = json.load(f)
        except Exception:
            return []
    result = []
    for o in all_orders:
        status = o.get("status")
        # –û–±—ã—á–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã ‚Äî —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–∞–∑–Ω–∞—á–µ–Ω
        if str(o.get("executor_id")) == str(user_id) and status in EXECUTOR_VISIBLE_STATUSES:
            result.append(o)
        # –î–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏: –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å '–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è' –∏ –æ—Ñ—Ñ–µ—Ä –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤—Å–µ–º
        elif status == "–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è":
            from shared import get_executors_list
            all_execs = get_executors_list()
            all_exec_ids = [str(ex.get("id")) for ex in all_execs]
            if str(user_id) in all_exec_ids:
                result.append(o)
    return result

@executor_menu_router.message(F.text == "/start")
async def executor_start(message: Message, state: FSMContext):
    if is_executor(message.from_user.id):
        await state.clear()
        await message.answer(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω—é –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è!",
            reply_markup=get_executor_menu_keyboard()
        )

@executor_menu_router.message(F.text == "üìÇ –ú–æ–∏ –∑–∞–∫–∞–∑—ã")
@executor_menu_router.callback_query(F.data == "executor_back_to_orders")
async def executor_my_orders(message_or_callback, state: FSMContext):
    user_id = message_or_callback.from_user.id
    orders = get_executor_orders(user_id)
    if not orders:
        text = "‚ùóÔ∏è –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤."
        keyboard = None
    else:
        text = "–í–∞—à–∏ –∑–∞—è–≤–∫–∏:"
        keyboard_buttons = []
        for order in reversed(orders[-10:]):
            order_id = order.get('order_id')
            status = order.get('status', 'N/A')
            subject = order.get('subject', '–ù–µ —É–∫–∞–∑–∞–Ω')
            work_type = order.get('work_type', '–ó–∞—è–≤–∫–∞').replace('work_type_', '')
            button_text = f"–ó–∞–∫–∞–∑ –Ω–∞ —Ç–µ–º—É: {work_type} | {status}"
            keyboard_buttons.append([InlineKeyboardButton(text=button_text, callback_data=f"executor_view_order_{order_id}")])
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    if isinstance(message_or_callback, Message):
        await message_or_callback.answer(text, reply_markup=keyboard)
    else:
        await message_or_callback.message.edit_text(text, reply_markup=keyboard)
        if hasattr(message_or_callback, "answer"):
            await message_or_callback.answer()

@executor_menu_router.callback_query(F.data.startswith("executor_view_order_"))
async def executor_view_order(callback: CallbackQuery, state: FSMContext):
    order_id = int(callback.data.split("_")[-1])
    orders = get_executor_orders(callback.from_user.id)
    order = next((o for o in orders if o.get('order_id') == order_id), None)
    if not order:
        if hasattr(callback, "answer"):
            await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return
    from shared import STATUS_EMOJI_MAP
    status = order.get('status', 'N/A')
    emoji = STATUS_EMOJI_MAP.get(status, 'üìÑ')
    work_type = order.get('work_type', '–ù–µ —É–∫–∞–∑–∞–Ω').replace('work_type_', '')
    subject = order.get('subject', '–ù–µ —É–∫–∞–∑–∞–Ω')
    deadline = order.get('deadline', '–ù–µ —É–∫–∞–∑–∞–Ω')
    comment = order.get('comments', '–ù–µ—Ç')

    # –ù–æ–≤—ã–π –±–ª–æ–∫ –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤ '–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è' –∏ '–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è'
    if status in ["–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è", "–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"]:
        text = (
            f"üì¨ –í–∞–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É {subject}\n\n"
            f"üìù –¢–∏–ø —Ä–∞–±–æ—Ç—ã: {work_type}\n"
            f"üóì –°—Ä–æ–∫ —Å–¥–∞—á–∏: {deadline}\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏ –∑–∞—è–≤–∫–∏ –∏ –ø—Ä–∏–º–∏—Ç–µ —Ä–µ—à–µ–Ω–∏–µ."
        )
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìé –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã", callback_data=f"executor_show_materials:{order_id}")],
            [InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤ –≤–∑—è—Ç—å—Å—è", callback_data=f"executor_accept_{order_id}"),
             InlineKeyboardButton(text="‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è", callback_data=f"executor_refuse_work_{order_id}")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∑–∞–∫–∞–∑–∞–º", callback_data="executor_back_to_orders")]
        ])
        if hasattr(callback.message, "edit_text"):
            await callback.message.edit_text(text, reply_markup=keyboard)
        else:
            await callback.message.answer(text, reply_markup=keyboard)
        if hasattr(callback, "answer"):
            await callback.answer()
        return

    # –ù–æ–≤—ã–π –±–ª–æ–∫ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ '–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã'
    if status == "–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã":
        text = (
            f"‚è≥ –ó–∞–∫–∞–∑ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É {subject} –æ–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã –∫–ª–∏–µ–Ω—Ç–æ–º.\n\n"
            f"üìù –¢–∏–ø —Ä–∞–±–æ—Ç—ã: {work_type}\n"
            f"üóì –°—Ä–æ–∫ —Å–¥–∞—á–∏: {deadline}\n\n"
            f"–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã."
        )
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∑–∞—è–≤–∫–∞–º", callback_data="executor_back_to_orders")]
        ])
        if hasattr(callback.message, "edit_text"):
            await callback.message.edit_text(text, reply_markup=keyboard)
        else:
            await callback.message.answer(text, reply_markup=keyboard)
        if hasattr(callback, "answer"):
            await callback.answer()
        return

    # –ù–æ–≤—ã–π –±–ª–æ–∫ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ '–£—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º'
    if status == "–£—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º":
        group = order.get("group_name", "–ù–µ —É–∫–∞–∑–∞–Ω–∞")
        university = order.get("university_name", "–ù–µ —É–∫–∞–∑–∞–Ω")
        teacher = order.get("teacher_name", "–ù–µ —É–∫–∞–∑–∞–Ω")
        gradebook = order.get("gradebook", "–ù–µ —É–∫–∞–∑–∞–Ω")
        work_type_key = order.get("work_type", "N/A").replace("work_type_", "")
        work_type_str = work_type_key if work_type_key != 'other' else order.get('work_type_other_name', '–î—Ä—É–≥–æ–µ')
        guidelines = '‚úÖ –î–∞' if order.get('has_guidelines') else '‚ùå –ù–µ—Ç'
        task = '‚úÖ –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ' if order.get('task_file') or order.get('task_text') else '‚ùå –ù–µ—Ç'
        example = '‚úÖ –î–∞' if order.get('has_example') else '‚ùå –ù–µ—Ç'
        deadline = order.get('deadline', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
        details_text = f"""
<b>–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ ‚Ññ{order_id}</b>\n
<b>–°—Ç–∞—Ç—É—Å:</b> {emoji} {status}
<b>–ü—Ä–µ–¥–º–µ—Ç:</b> {subject}
<b>–¢–∏–ø —Ä–∞–±–æ—Ç—ã:</b> {work_type_str}
<b>–ú–µ—Ç–æ–¥–∏—á–∫–∞:</b> {guidelines}
<b>–ó–∞–¥–∞–Ω–∏–µ:</b> {task}
<b>–ü—Ä–∏–º–µ—Ä:</b> {example}
<b>–î–µ–¥–ª–∞–π–Ω:</b> {deadline}\n
<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {comment}
            """
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∑–∞–∫–∞–∑–∞–º", callback_data="executor_back_to_orders")]
        ])
        if hasattr(callback.message, "edit_text"):
            await callback.message.edit_text(details_text, parse_mode="HTML", reply_markup=keyboard)
        else:
            await callback.message.answer(details_text, parse_mode="HTML", reply_markup=keyboard)
        if hasattr(callback, "answer"):
            await callback.answer()
        return

    # –ù–æ–≤—ã–π –±–ª–æ–∫ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ '–í—ã–ø–æ–ª–Ω–µ–Ω–∞'
    if status == "–í—ã–ø–æ–ª–Ω–µ–Ω–∞":
        subject = order.get('subject', '‚Äî')
        work_type = order.get('work_type', '‚Äî').replace('work_type_', '')
        executor_offers = order.get('executor_offers', [])
        
        # –ù–∞–π—Ç–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        work_price = 0
        if executor_offers:
            for offer in executor_offers:
                if offer.get('executor_id') == callback.from_user.id:
                    work_price = offer.get('price', 0)
                    break
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è, –≤–∑—è—Ç—å –ø–µ—Ä–≤–æ–µ
            if work_price == 0 and executor_offers:
                work_price = executor_offers[0].get('price', 0)
        
        details_text = (
            f"üéâ –ö–ª–∏–µ–Ω—Ç –ø—Ä–∏–Ω—è–ª –≤–∞—à—É —Ä–∞–±–æ—Ç—É –ø–æ –∑–∞–∫–∞–∑—É\n"
            f"–ü—Ä–µ–¥–º–µ—Ç: {subject}\n"
            f"–¢–∏–ø —Ä–∞–±–æ—Ç—ã: {work_type}\n"
            f"–ó–∞—Ä–∞–±–æ—Ç–∞–ª: {work_price} ‚ÇΩ"
        )
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∑–∞–∫–∞–∑–∞–º", callback_data="executor_back_to_orders")]
        ])
        if hasattr(callback.message, "edit_text"):
            await callback.message.edit_text(details_text, reply_markup=keyboard)
        else:
            await callback.message.answer(details_text, reply_markup=keyboard)
        if hasattr(callback, "answer"):
            await callback.answer()
        return

    text = f"{emoji} –î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏ ‚Ññ{order_id}\n\n" \
           f"–°—Ç–∞—Ç—É—Å: {status}\n" \
           f"–ü—Ä–µ–¥–º–µ—Ç: {subject}\n" \
           f"–¢–∏–ø —Ä–∞–±–æ—Ç—ã: {work_type}\n" \
           f"–î–µ–¥–ª–∞–π–Ω: {deadline}\n" \
           f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}"
    
    keyboard_buttons = []

    if status == "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É":
        submitted_at = order.get('submitted_at', '‚Äî')
        text += f"\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {submitted_at}"
    elif status == "–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–µ":
        revision_comment = order.get('revision_comment', '–ù–µ—Ç')
        text += f"\n\n‚ùóÔ∏è–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫–ª–∏–µ–Ω—Ç–∞ –∫ –¥–æ—Ä–∞–±–æ—Ç–∫–µ:\n{revision_comment}"

    if status in ["–í —Ä–∞–±–æ—Ç–µ", "–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–µ"]:
        keyboard_buttons.append([InlineKeyboardButton(text="‚úÖ –°–¥–∞—Ç—å —Ä–∞–±–æ—Ç—É", callback_data=f"executor_submit_work_{order_id}")])

    if status in ["–í —Ä–∞–±–æ—Ç–µ", "–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è", "–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–µ"]:
        keyboard_buttons.append([InlineKeyboardButton(text="üìé –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã", callback_data=f"executor_show_materials:{order_id}")])
        keyboard_buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è", callback_data=f"executor_refuse_work_{order_id}")])
    
    keyboard_buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∑–∞–∫–∞–∑–∞–º", callback_data="executor_back_to_orders")])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

    if hasattr(callback.message, "edit_text"):
        await callback.message.edit_text(text, reply_markup=keyboard)
    else:
        await callback.message.answer(text, reply_markup=keyboard)
    if hasattr(callback, "answer"):
        await callback.answer()

@executor_menu_router.message(F.text == "üë®‚Äçüíª –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
async def executor_contact_admin(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –æ—Ç–ø—Ä–∞–≤–ª—é –µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    await state.set_state(ExecutorStates.waiting_for_admin_message)

@executor_menu_router.message(StateFilter(ExecutorStates.waiting_for_admin_message))
async def executor_send_admin_message(message: Message, state: FSMContext):
    await bot.send_message(
        ADMIN_ID,
        f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è {get_full_name(message.from_user)} (ID: {message.from_user.id}):\n\n{message.text}"
    )
    await message.answer("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", reply_markup=get_executor_menu_keyboard())
    await state.clear()

@executor_menu_router.callback_query(F.data.startswith("executor_submit_work_"))
async def executor_submit_work_start(callback: CallbackQuery, state: FSMContext):
    order_id = int(callback.data.split("_")[-1])
    await state.set_state(ExecutorStates.waiting_for_work_file)
    await state.update_data(submit_order_id=order_id)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∑–∞–∫–∞–∑—É", callback_data=f"executor_view_order_{order_id}")],
    ])
    if hasattr(callback.message, "edit_text"):
        await callback.message.edit_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª —Å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–æ–π (zip, docx, pdf –∏ –¥—Ä.)",
            reply_markup=keyboard
        )
    else:
        await callback.message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª —Å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–æ–π (zip, docx, pdf –∏ –¥—Ä.)",
            reply_markup=keyboard
        )
    if hasattr(callback, "answer"):
        await callback.answer()

@executor_menu_router.message(ExecutorStates.waiting_for_work_file, F.document)
async def executor_work_file_received(message: Message, state: FSMContext):
    data = await state.get_data()
    order_id = data.get('submit_order_id')
    await state.update_data(work_file_id=message.document.file_id, work_file_name=message.document.file_name)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É", callback_data=f"executor_send_work_{order_id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"executor_cancel_submit_{order_id}")],
    ])
    if hasattr(message, "answer"):
        await message.answer("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω!", reply_markup=keyboard)

@executor_menu_router.callback_query(F.data.startswith("executor_send_work_"), ExecutorStates.waiting_for_work_file)
async def executor_send_work(callback: CallbackQuery, state: FSMContext):
    from shared import get_all_orders, ADMIN_ID, bot
    import json
    data = await state.get_data()
    order_id = data.get('submit_order_id')
    file_id = data.get('work_file_id')
    file_name = data.get('work_file_name')
    orders = get_all_orders()
    for order in orders:
        if order.get('order_id') == order_id:
            order['status'] = '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É'
            order['submitted_work'] = {'file_id': file_id, 'file_name': file_name}
            order['submitted_at'] = datetime.now().strftime('%d.%m.%Y')
            break
    with open('orders.json', 'w', encoding='utf-8') as f:
        json.dump(orders, f, ensure_ascii=False, indent=4)
    order = next((o for o in orders if o.get('order_id') == order_id), None)
    subject = order.get('subject', '–ù–µ —É–∫–∞–∑–∞–Ω')
    work_type = order.get('work_type', '–ù–µ —É–∫–∞–∑–∞–Ω').replace('work_type_', '')
    submitted_at = order.get('submitted_at', '')
    admin_text = f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –≤—ã–ø–æ–ª–Ω–∏–ª –∑–∞–∫–∞–∑ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É <b>{subject}</b>\n–¢–∏–ø —Ä–∞–±–æ—Ç—ã: <b>{work_type}</b>\n–î–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: <b>{submitted_at}</b>"
    admin_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –£—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"admin_approve_work_{order_id}"),
         InlineKeyboardButton(text="üîΩ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É", callback_data=f"admin_reject_work_{order_id}")],
    ])
    await bot.send_document(ADMIN_ID, file_id, caption=admin_text, parse_mode="HTML", reply_markup=admin_keyboard)
    await bot.send_message(callback.from_user.id, "üíº –†–∞–±–æ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!\n‚è≥–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")
    await state.clear()
    if hasattr(callback, "answer"):
        await callback.answer()

@executor_menu_router.callback_query(F.data.startswith("executor_cancel_submit_"), ExecutorStates.waiting_for_work_file)
async def executor_cancel_submit(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    if hasattr(callback.message, "edit_text"):
        await callback.message.edit_text("‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞–±–æ—Ç—ã –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    else:
        await callback.message.answer("‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞–±–æ—Ç—ã –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    if hasattr(callback, "answer"):
        await callback.answer()



@executor_menu_router.callback_query(F.data.startswith("executor_refuse_work_") | F.data.startswith("executor_refuse_"))
async def executor_refuse_start(callback: CallbackQuery, state: FSMContext):
    from shared import get_all_orders
    
    order_id_str = callback.data.split('_')[-1]
    if not order_id_str.isdigit():
        if hasattr(callback, "answer"):
            await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–∫–∞–∑–∞.", show_alert=True)
        return
    order_id = int(order_id_str)

    all_orders = get_all_orders()
    order = next((o for o in all_orders if o.get('order_id') == order_id and o.get('executor_id') == callback.from_user.id), None)

    if not order:
        if hasattr(callback, "answer"):
            await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –Ω–µ –∞–∫—Ç—É–∞–ª–µ–Ω.", show_alert=True)
        return

    if order.get("status") == "–í —Ä–∞–±–æ—Ç–µ":
        await state.set_state(ExecutorCancelOrder.waiting_for_confirm)
        await state.update_data(cancel_order_id=order_id)
        if hasattr(callback.message, "edit_text"):
            await callback.message.edit_text(
                "‚ùóÔ∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞?",
                reply_markup=get_executor_cancel_confirm_keyboard(order_id)
            )
        else:
            await callback.message.answer(
                "‚ùóÔ∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞?",
                reply_markup=get_executor_cancel_confirm_keyboard(order_id)
            )
    else:
        order['status'] = "–†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç—Å—è"
        order.pop('executor_id', None)
        order.pop('executor_offers', None)
        
        with open("orders.json", "w", encoding="utf-8") as f:
            json.dump(all_orders, f, ensure_ascii=False, indent=4)
        
        subject = order.get('subject', '–ù–µ —É–∫–∞–∑–∞–Ω')
        await bot.send_message(
            ADMIN_ID,
            f"‚ùå –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å {get_full_name(callback.from_user)} (ID: {callback.from_user.id}) –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –∑–∞–∫–∞–∑–∞ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É \"{subject}\"",
            parse_mode="HTML"
        )
        if hasattr(callback.message, "edit_text"):
            await callback.message.edit_text(f"‚ùóÔ∏è –í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –∑–∞–∫–∞–∑–∞ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É: {subject} üìÑ")
        else:
            await callback.message.answer(f"‚ùóÔ∏è –í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –∑–∞–∫–∞–∑–∞ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É: {subject} üìÑ")
    if hasattr(callback, "answer"):
        await callback.answer()

@executor_menu_router.callback_query(F.data.startswith("executor_cancel_confirm:"), ExecutorCancelOrder.waiting_for_confirm)
async def executor_cancel_confirm(callback: CallbackQuery, state: FSMContext):
    order_id = int(callback.data.split(":")[1])
    await state.set_state(ExecutorCancelOrder.waiting_for_reason)
    if hasattr(callback.message, "edit_text"):
        await callback.message.edit_text(
            "üí¨ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞:",
            reply_markup=get_executor_cancel_reason_keyboard(order_id)
        )
    else:
        await callback.message.answer(
            "üí¨ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞:",
            reply_markup=get_executor_cancel_reason_keyboard(order_id)
        )
    if hasattr(callback, "answer"):
        await callback.answer()

@executor_menu_router.callback_query(F.data.startswith("executor_cancel_abort:"), ExecutorCancelOrder.waiting_for_confirm)
async def executor_cancel_abort(callback: CallbackQuery, state: FSMContext):
    order_id = int(callback.data.split(":")[1])
    await state.clear()
    callback.data = f"executor_view_order_{order_id}"
    await executor_view_order(callback, state)

@executor_menu_router.callback_query(F.data.startswith("executor_cancel_reason:"), ExecutorCancelOrder.waiting_for_reason)
async def executor_cancel_reason(callback: CallbackQuery, state: FSMContext):
    _, order_id_str, idx_str = callback.data.split(":")
    order_id = int(order_id_str)
    idx = int(idx_str)
    reason = EXECUTOR_CANCEL_REASONS[idx]

    await state.update_data(cancellation_reason=reason)

    if reason.startswith("–î—Ä—É–≥–æ–µ"):
        await state.set_state(ExecutorCancelOrder.waiting_for_custom_reason)
        if hasattr(callback.message, "edit_text"):
            await callback.message.edit_text("‚úçÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞:")
        else:
            await callback.message.answer("‚úçÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞:")
    else:
        await state.set_state(ExecutorCancelOrder.waiting_for_comment)
        if hasattr(callback.message, "edit_text"):
            await callback.message.edit_text(
                "üí¨ –î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –æ—Ç–∫–∞–∑—É (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ):",
                reply_markup=get_executor_cancel_comment_keyboard()
            )
        else:
            await callback.message.answer(
                "üí¨ –î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –æ—Ç–∫–∞–∑—É (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ):",
                reply_markup=get_executor_cancel_comment_keyboard()
            )
    if hasattr(callback, "answer"):
        await callback.answer()

@executor_menu_router.message(ExecutorCancelOrder.waiting_for_custom_reason)
async def executor_cancel_custom_reason(message: Message, state: FSMContext):
    await state.update_data(cancellation_reason=message.text)
    await state.set_state(ExecutorCancelOrder.waiting_for_comment)
    if hasattr(message, "answer"):
        await message.answer(
            "üí¨ –î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –æ—Ç–∫–∞–∑—É (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ):",
            reply_markup=get_executor_cancel_comment_keyboard()
        )
    else:
        await message.answer(
            "üí¨ –î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –æ—Ç–∫–∞–∑—É (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ):",
            reply_markup=get_executor_cancel_comment_keyboard()
        )

@executor_menu_router.message(ExecutorCancelOrder.waiting_for_comment)
async def executor_cancel_comment_input(message: Message, state: FSMContext):
    data = await state.get_data()
    order_id = data.get("cancel_order_id")
    reason = data.get("cancellation_reason")
    comment = message.text
    await finish_executor_cancel_order(message, state, order_id, reason, comment)

@executor_menu_router.callback_query(F.data == "executor_skip_cancel_comment", ExecutorCancelOrder.waiting_for_comment)
async def executor_cancel_skip_comment(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    order_id = data.get("cancel_order_id")
    reason = data.get("cancellation_reason")
    await finish_executor_cancel_order(callback, state, order_id, reason, "")
    if hasattr(callback, "answer"):
        await callback.answer()


async def finish_executor_cancel_order(message_or_callback, state, order_id, reason, comment):
    from shared import get_all_orders, get_full_name
    all_orders = get_all_orders()
    target_order = None
    for order in all_orders:
        if order.get('order_id') == order_id:
            order['status'] = "–†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç—Å—è"
            order.pop('executor_id', None)
            order.pop('executor_offers', None)
            target_order = order
            break
            
    if not target_order:
        if isinstance(message_or_callback, Message):
            await message_or_callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–∫–∞–∑, –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        else:
            await message_or_callback.message.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–∫–∞–∑, –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return

    with open("orders.json", "w", encoding="utf-8") as f:
        json.dump(all_orders, f, ensure_ascii=False, indent=4)
    
    await state.clear()
    
    if isinstance(message_or_callback, Message):
        await message_or_callback.answer("–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –∑–∞–∫–∞–∑–∞. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω.")
    else:
        await message_or_callback.message.edit_text("–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –∑–∞–∫–∞–∑–∞. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω.")

    admin_text = (f"‚ùå –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å {get_full_name(message_or_callback.from_user)} (ID: {message_or_callback.from_user.id}) "
                  f"–æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –∑–∞–∫–∞–∑–∞ ‚Ññ{order_id}, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –≤ —Ä–∞–±–æ—Ç–µ.\n\n"
                  f"<b>–ü—Ä–∏—á–∏–Ω–∞:</b> {reason}\n"
                  f"<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {comment or '–ù–µ—Ç'}")
    await bot.send_message(ADMIN_ID, admin_text, parse_mode="HTML")


@executor_menu_router.callback_query(F.data.startswith("executor_contact_client:"))
async def executor_contact_client_handler(callback: CallbackQuery, state: FSMContext):
    order_id = int(callback.data.split(":")[-1])
    await state.update_data(order_id=order_id)
    await state.set_state(ExecutorContactClient.waiting_for_message)
    await callback.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞. –û–Ω–æ –±—É–¥–µ—Ç –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –µ–º—É, –∞ —Ç–∞–∫–∂–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    await callback.answer()

@executor_menu_router.message(ExecutorContactClient.waiting_for_message)
async def executor_send_message_to_client(message: Message, state: FSMContext):
    data = await state.get_data()
    order_id = data.get("order_id")
    executor_id = message.from_user.id

    with open(ORDERS_FILE, "r", encoding="utf-8") as f:
        orders = json.load(f)
    
    order = next((o for o in orders if o.get('order_id') == order_id), None)

    if not order:
        await message.answer("‚ùóÔ∏è –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return

    client_id = order.get("user_id")
    executor_name = get_full_name(message.from_user)

    # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
    client_message = (
        f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –ø–æ –∑–∞–∫–∞–∑—É ‚Ññ{order_id}:\n\n"
        f"{message.text}"
    )
    reply_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"client_reply_to_executor:{order_id}")]
    ])

    try:
        await bot.send_message(client_id, client_message, reply_markup=reply_keyboard)
        # –ö–æ–ø–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        admin_message = (
            f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å {executor_name} (ID: {executor_id}) –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É –ø–æ –∑–∞–∫–∞–∑—É ‚Ññ{order_id}:\n\n"
            f"{message.text}"
        )
        await bot.send_message(ADMIN_ID, admin_message)

        await message.answer("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    except Exception as e:
        await message.answer(f"‚ùóÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –û—à–∏–±–∫–∞: {e}")
    
    await state.clear()
    
@executor_menu_router.callback_query(F.data.startswith("executor_show_materials:"))
async def executor_show_materials_handler(callback: CallbackQuery, state: FSMContext):
    order_id = callback.data.split(":", 1)[1]
    from shared import get_all_orders
    orders = get_all_orders()
    order = next((o for o in orders if str(o['order_id']) == str(order_id)), None)
    if not order:
        if hasattr(callback, "answer"):
            await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
    material_buttons = []
    if order.get('guidelines_file'):
        material_buttons.append([InlineKeyboardButton(text="–ú–µ—Ç–æ–¥–∏—á–∫–∞", callback_data=f"executor_material_guidelines:{order_id}")])
    if order.get('task_file') or order.get('task_text'):
        material_buttons.append([InlineKeyboardButton(text="–ó–∞–¥–∞–Ω–∏–µ", callback_data=f"executor_material_task:{order_id}")])
    if order.get('example_file'):
        material_buttons.append([InlineKeyboardButton(text="–ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã", callback_data=f"executor_material_example:{order_id}")])
    material_buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"executor_view_order_{order_id}")])
    keyboard = InlineKeyboardMarkup(inline_keyboard=material_buttons)
    if hasattr(callback.message, "edit_text"):
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", reply_markup=keyboard)
    else:
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", reply_markup=keyboard)
    if hasattr(callback, "answer"):
        await callback.answer()