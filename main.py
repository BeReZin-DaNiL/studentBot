import asyncio
import logging
import json
import os
from datetime import datetime
import re
import time
import sqlite3

from aiogram import Bot, Dispatcher, Router, F, types
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    Message,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    CallbackQuery,
    ReplyKeyboardRemove,
    ReplyKeyboardMarkup,
    KeyboardButton
)
from dotenv import load_dotenv
import gspread
from google.oauth2.service_account import Credentials
from shared import get_all_orders, ADMIN_ID, bot, STATUS_EMOJI_MAP, pluralize_days, get_full_name, get_deadline_keyboard, admin_view_order_handler
from payment import payment_router
from executor_menu import executor_menu_router, is_executor, get_executor_menu_keyboard
from executor_menu import ExecutorStates
from admin_self_take import admin_self_take_router
from admin_self_take import admin_view_order_handler

# --- FastAPI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è ---
from fastapi import FastAPI, Request
import uvicorn

app = FastAPI()

@app.get("/")
async def root():
    return {"status": "API is running"}

def init_db():
    try:
        with sqlite3.connect('student.db', timeout=10.0) as conn:
            c = conn.cursor()
            c.execute('''CREATE TABLE IF NOT EXISTS students
                         (user_id INTEGER PRIMARY KEY,
                          first_name TEXT,
                          last_name TEXT,
                          phone_number TEXT,
                          group_name TEXT)''')
            conn.commit()
    except sqlite3.Error as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
STATUS_EMOJI_MAP = {
    "–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç—Å—è": "üìù",
    "–†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç—Å—è": "üÜï",
    "–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è": "ü§î",
    "–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è": "üôã‚Äç‚ôÇÔ∏è",
    "–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã": "üí≥",
    "–ü—Ä–∏–Ω—è—Ç–∞": "‚úÖ",
    "–í —Ä–∞–±–æ—Ç–µ": "‚è≥",
    "–í—ã–ø–æ–ª–Ω–µ–Ω–∞": "üéâ",
    "–û—Ç–º–µ–Ω–µ–Ω–∞": "‚ùå",
}

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω –∏ ID –∏–∑ .env —Ñ–∞–π–ª–∞, –Ω–æ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º "–∑–∞—à–∏—Ç—ã–µ"
BOT_TOKEN = os.getenv("BOT_TOKEN", "7763016986:AAFW4Rwh012_bfh8Jt0E_zaq5abvzenr4bE")
# –î–æ–±–∞–≤–ª—è—é EXECUTOR_IDS
EXECUTOR_IDS = [int(x) for x in os.getenv("EXECUTOR_IDS", "123456789").split(",") if x.strip().isdigit()]

ALLOWED_EXTENSIONS = {"pdf", "docx", "png", "jpeg", "jpg"}
MAX_FILE_SIZE = 15 * 1024 * 1024  # 15 MB

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
router = Router()
dp.include_router(router)
admin_router = Router()
dp.include_router(admin_router)
executor_router = Router()
dp.include_router(executor_router)
dp.include_router(payment_router)
dp.include_router(executor_menu_router)
dp.include_router(admin_self_take_router)

# Google Sheets
GOOGLE_SHEET_ID = "1D15yyPKHyN1Vw8eRnjT79xV28cwL_q5EIZa97tgTF2U"
GOOGLE_SHEET_HEADERS = [
    "–ì—Ä—É–ø–ø–∞", "–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç", "–¢–∏–ø —Ä–∞–±–æ—Ç—ã", "–ú–µ—Ç–æ–¥–∏—á–∫–∞", "–ó–∞–¥–∞–Ω–∏–µ", "–ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã", "–î–∞—Ç–∞ —Å–¥–∞—á–∏", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"
]

# --- FSM –¥–ª—è –∞–¥–º–∏–Ω–∞ ---
class AssignExecutor(StatesGroup):
    waiting_for_id = State()

class AdminApproval(StatesGroup):
    waiting_for_new_price = State()

# --- FSM –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è ---
class ExecutorResponse(StatesGroup):
    waiting_for_price = State()
    waiting_for_deadline = State()
    waiting_for_comment = State()
    waiting_for_confirm = State()  # –ù–æ–≤—ã–π —ç—Ç–∞–ø

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è (FSM) ---
class OrderState(StatesGroup):
    group_name = State()
    university_name = State()
    teacher_name = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    gradebook = State()     # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    subject = State()       # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    subject_other = State() 
    work_type = State()
    work_type_other = State()
    guidelines_choice = State()
    guidelines_upload = State()
    task_upload = State()
    example_choice = State()
    example_upload = State()
    deadline = State()
    comments = State()
    confirmation = State()

class AdminContact(StatesGroup):
    waiting_for_message = State()

class ClientRevision(StatesGroup):
    waiting_for_revision_comment = State()

class AdminRevision(StatesGroup):
    waiting_for_revision_comment = State()

class AdminBroadcastClients(StatesGroup):
    waiting_for_message = State()
# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
# --- FSM –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π ---
class AdminSettings(StatesGroup):
    waiting_for_executor_name = State()
    waiting_for_executor_id = State()
    waiting_for_delete_id = State()

    # --- –ù–æ–≤—ã–π —ç—Ç–∞–ø FSM –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ---
class ExecutorResponse(StatesGroup):
    waiting_for_price = State()
    waiting_for_deadline = State()
    waiting_for_comment = State()
    waiting_for_confirm = State()  # –ù–æ–≤—ã–π —ç—Ç–∞–ø

EXECUTORS_FILE = "executors.json"


def get_phone_request_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
def get_admin_settings_keyboard():
    buttons = [
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è", callback_data="admin_add_executor")],
        [InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è", callback_data="admin_delete_executor")],
        [InlineKeyboardButton(text="üë• –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π", callback_data="admin_show_executors")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back_to_menu")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_skip_keyboard_admin():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="admin_skip_executor_name")]
    ])

def get_executors_list():
    if not os.path.exists(EXECUTORS_FILE):
        return []
    with open(EXECUTORS_FILE, "r", encoding="utf-8") as f:
        try:
            return json.load(f)
        except Exception:
            return []

def save_executors_list(executors):
    with open(EXECUTORS_FILE, "w", encoding="utf-8") as f:
        json.dump(executors, f, ensure_ascii=False, indent=4)

def get_executors_info_keyboard():
    executors = get_executors_list()
    if not executors:
        return InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–ù–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π", callback_data="none")]])
    buttons = []
    for ex in executors:
        label = f"{ex.get('name') or '–ë–µ–∑ –§–ò–û'} | ID: {ex['id']}"
        buttons.append([InlineKeyboardButton(text=label, callback_data="none")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_executors_delete_keyboard():
    executors = get_executors_list()
    if not executors:
        return InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–ù–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π", callback_data="none")]])
    buttons = []
    for ex in executors:
        label = f"{ex.get('name') or '–ë–µ–∑ –§–ò–û'} | ID: {ex['id']}"
        buttons.append([InlineKeyboardButton(text=label, callback_data=f"admin_delete_executor_id_{ex['id']}")])
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_settings")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def save_user_phone(user_id, phone_number):
    users_file = "users.json"
    lock_file = users_file + ".lock"
    while os.path.exists(lock_file):
        time.sleep(0.1)
    try:
        open(lock_file, 'w').close()
        users = {}
        if os.path.exists(users_file):
            with open(users_file, "r", encoding="utf-8") as f:
                try:
                    users = json.load(f)
                except json.JSONDecodeError:
                    users = {}
        users[str(user_id)] = {"phone_number": phone_number}
        with open(users_file, "w", encoding="utf-8") as f:
            json.dump(users, f, ensure_ascii=False, indent=4)
    finally:
        if os.path.exists(lock_file):
            os.remove(lock_file)

def get_user_profile(user_id):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–§–ò–û, –≥—Ä—É–ø–ø–∞, –∑–∞—á–µ—Ç–∫–∞, —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç) –∏–∑ users.json.
    """
    users_file = "users.json"
    if not os.path.exists(users_file):
        return {}
    with open(users_file, "r", encoding="utf-8") as f:
        try:
            users = json.load(f)
        except Exception:
            return {}
    return users.get(str(user_id), {})

def save_user_profile(user_id, profile_data):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–§–ò–û, –≥—Ä—É–ø–ø–∞, –∑–∞—á–µ—Ç–∫–∞, —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç) –≤ users.json.
    """
    users_file = "users.json"
    lock_file = users_file + ".lock"
    while os.path.exists(lock_file):
        time.sleep(0.1)
    try:
        open(lock_file, 'w').close()
        users = {}
        if os.path.exists(users_file):
            with open(users_file, "r", encoding="utf-8") as f:
                try:
                    users = json.load(f)
                except json.JSONDecodeError:
                    users = {}
        user_entry = users.get(str(user_id), {})
        user_entry.update(profile_data)
        users[str(user_id)] = user_entry
        with open(users_file, "w", encoding="utf-8") as f:
            json.dump(users, f, ensure_ascii=False, indent=4)
    finally:
        if os.path.exists(lock_file):
            os.remove(lock_file)

def get_executors_assign_keyboard(order_id):
    executors = get_executors_list()
    buttons = []
    if executors:
        for ex in executors:
            label = f"{ex.get('name') or '–ë–µ–∑ –§–ò–û'} | ID: {ex['id']}"
            buttons.append([InlineKeyboardButton(text=label, callback_data=f"assign_executor_select_{order_id}_{ex['id']}")])
        buttons.append([InlineKeyboardButton(text="–í–≤–µ—Å—Ç–∏ ID –≤—Ä—É—á–Ω—É—é", callback_data=f"assign_executor_manual_{order_id}")])
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"admin_view_order_{order_id}")])
    return InlineKeyboardMarkup(inline_keyboard=buttons) if buttons else None

@admin_router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def admin_settings_menu(message: Message, state: FSMContext):
    if message.from_user.id != int(ADMIN_ID): return
    await state.clear()
    await message.answer("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π:", reply_markup=get_admin_settings_keyboard())
    
@admin_router.message(F.text == "üì¢ –†–∞—Å—Å—ã–ª–∫–∞")
async def admin_broadcast_menu(message: Message, state: FSMContext):
    if message.from_user.id != int(ADMIN_ID): return
    await state.clear()
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üë§ –†–∞—Å—Å—ã–ª–∫–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º", callback_data="broadcast_executors")],
        [InlineKeyboardButton(text="üë®‚Äçüíº –†–∞—Å—Å—ã–ª–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞–º", callback_data="broadcast_clients")]
    ])
    await message.answer("üì© –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏:", reply_markup=keyboard)

@admin_router.callback_query(F.data == "broadcast_executors")
async def broadcast_executors(callback: CallbackQuery, state: FSMContext):
    orders = get_all_orders()
    review_orders = [o for o in orders if o.get('status') == "–†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç—Å—è"]
    if not review_orders:
        await callback.message.edit_text("–ù–µ—Ç –∑–∞—è–≤–æ–∫ –≤ —Å—Ç–∞—Ç—É—Å–µ '–†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç—Å—è' –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
        return
    keyboard_buttons = []
    for order in review_orders:
        order_id = order['order_id']
        subject = order.get('subject', '–ë–µ–∑ —Ç–µ–º—ã')
        work_type = order.get('work_type', '–ó–∞—è–≤–∫–∞').replace('work_type_', '')
        button_text = f"–ó–∞—è–≤–∫–∞ ‚Ññ{order_id} {work_type} | {subject}"
        keyboard_buttons.append([InlineKeyboardButton(text=button_text, callback_data=f"admin_broadcast_select_{order_id}")])
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—è–≤–∫—É –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º:", reply_markup=keyboard)
    await callback.answer()

@admin_router.callback_query(F.data == "broadcast_clients")
async def broadcast_clients(callback: CallbackQuery, state: FSMContext):
    orders = get_all_orders()
    unique_groups = set(o['group_name'] for o in orders if 'group_name' in o)
    if not unique_groups:
        await callback.message.edit_text("–ù–µ—Ç –≥—Ä—É–ø–ø –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
        return
    keyboard_buttons = [[InlineKeyboardButton(text=group, callback_data=f"broadcast_group_{group}")] for group in unique_groups]
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞–º:", reply_markup=keyboard)
    await callback.answer()

@admin_router.callback_query(F.data.startswith("broadcast_group_"))
async def broadcast_group_selected(callback: CallbackQuery, state: FSMContext):
    group = callback.data.split("_", 2)[-1]
    await state.update_data(selected_group=group)
    await state.set_state(AdminBroadcastClients.waiting_for_message)
    await callback.message.edit_text("üí¨ –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞–º –≤ –≥—Ä—É–ø–ø–µ:")
    await callback.answer()

@admin_router.message(AdminBroadcastClients.waiting_for_message)
async def broadcast_message_input(message: Message, state: FSMContext):
    message_text = message.text
    data = await state.get_data()
    group = data.get('selected_group')
    orders = get_all_orders()
    users_to_send = set(o['user_id'] for o in orders if o.get('group_name') == group)
    for user_id in users_to_send:
        try:
            await bot.send_message(user_id, message_text)
        except:
            pass
    await message.answer("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")
    await state.clear()

@admin_router.callback_query(F.data == "admin_settings")
async def admin_settings_menu_cb(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π:", reply_markup=get_admin_settings_keyboard())
    await callback.answer()

@admin_router.callback_query(F.data == "admin_add_executor")
async def admin_add_executor_start(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AdminSettings.waiting_for_executor_name)
    await callback.message.edit_text("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –§–ò–û –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ):", reply_markup=get_skip_keyboard_admin())
    await callback.answer()

@admin_router.callback_query(F.data == "admin_skip_executor_name", AdminSettings.waiting_for_executor_name)
async def admin_skip_executor_name(callback: CallbackQuery, state: FSMContext):
    await state.update_data(executor_name="")
    await state.set_state(AdminSettings.waiting_for_executor_id)
    await callback.message.edit_text("üî¢ –í–≤–µ–¥–∏—Ç–µ ID –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):")
    await callback.answer()

@admin_router.message(AdminSettings.waiting_for_executor_name)
async def admin_executor_name_input(message: Message, state: FSMContext):
    await state.update_data(executor_name=message.text)
    await state.set_state(AdminSettings.waiting_for_executor_id)
    await message.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ ID –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):")

@admin_router.message(AdminSettings.waiting_for_executor_id)
async def admin_executor_id_input(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    executor_id = int(message.text)
    data = await state.get_data()
    name = data.get("executor_name", "")
    executors = get_executors_list()
    if any(ex['id'] == executor_id for ex in executors):
        await message.answer("–¢–∞–∫–æ–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å.")
        return
    executors.append({"id": executor_id, "name": name})
    save_executors_list(executors)
    await state.clear()
    await message.answer("‚úÖ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=get_admin_settings_keyboard())

@admin_router.callback_query(F.data == "admin_delete_executor")
async def admin_delete_executor_start(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AdminSettings.waiting_for_delete_id)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=get_executors_delete_keyboard())
    await callback.answer()

@admin_router.callback_query(F.data.startswith("admin_delete_executor_id_"), AdminSettings.waiting_for_delete_id)
async def admin_delete_executor_confirm(callback: CallbackQuery, state: FSMContext):
    executor_id = int(callback.data.split("_")[-1])
    executors = get_executors_list()
    executors = [ex for ex in executors if ex['id'] != executor_id]
    save_executors_list(executors)
    await state.clear()
    await callback.message.edit_text("‚úÖ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω!", reply_markup=get_admin_settings_keyboard())
    await callback.answer()

@admin_router.callback_query(F.data == "admin_show_executors")
async def admin_show_executors(callback: CallbackQuery, state: FSMContext):
    executors = get_executors_list()
    if not executors:
        text = "–ù–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π."
    else:
        text = "üë• –¢–µ–∫—É—â–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏:\n\n" + "\n".join([
            f"{ex.get('name') or '–ë–µ–∑ –§–ò–û'} | ID: {ex['id']}" for ex in executors
        ])
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_settings")]
    ])
    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()
@executor_router.callback_query(F.data == "executor_back_to_price", ExecutorResponse.waiting_for_deadline)
async def executor_back_to_price_handler(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    order_id = data.get('order_id')
    await state.set_state(ExecutorResponse.waiting_for_price)
    await callback.message.edit_text("–û—Ç–ª–∏—á–Ω–æ! –£–∫–∞–∂–∏—Ç–µ –≤–∞—à—É —Ü–µ–Ω—É(–∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é):", reply_markup=get_price_keyboard(order_id))
    await callback.answer()

@admin_router.callback_query(F.data == "admin_back_to_menu")
async def admin_back_to_menu(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", reply_markup=None)
    await bot.send_message(callback.from_user.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_admin_keyboard())
    await callback.answer()

@router.callback_query(OrderState.work_type, F.data == "back_to_subject")
async def back_to_subject_handler(callback: CallbackQuery, state: FSMContext):
    await state.set_state(OrderState.subject)
    await callback.message.edit_text(
        
    )
    await callback.answer()
def get_admin_keyboard():
    buttons = [
        [KeyboardButton(text="üì¶ –í—Å–µ –∑–∞–∫–∞–∑—ã")],
        [KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")],
        [KeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞")],  # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
    ]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

def get_executor_confirm_keyboard(order_id):
    buttons = [
        [
            InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤ –≤–∑—è—Ç—å—Å—è", callback_data=f"executor_accept_{order_id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è", callback_data=f"executor_refuse_{order_id}")
        ],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"executor_back_to_materials:{order_id}")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)
def get_executor_final_confirm_keyboard(order_id):
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data=f"executor_send_offer:{order_id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è", callback_data=f"executor_refuse_{order_id}")
        ]
    ])
def get_price_keyboard(order_id):
    buttons = [
        [InlineKeyboardButton(text=f"{i} ‚ÇΩ", callback_data=f"price_{i}") for i in range(500, 2501, 500)],
        [InlineKeyboardButton(text=f"{i} ‚ÇΩ", callback_data=f"price_{i}") for i in range(3000, 5001, 1000)],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"executor_back_to_invite:{order_id}")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_deadline_keyboard():
    buttons = [
        [
            InlineKeyboardButton(text="1 –¥–µ–Ω—å", callback_data="deadline_1 –¥–µ–Ω—å"),
            InlineKeyboardButton(text="3 –¥–Ω—è", callback_data="deadline_3 –¥–Ω—è"),
            InlineKeyboardButton(text="–î–æ –¥–µ–¥–ª–∞–π–Ω–∞", callback_data="deadline_–î–æ –¥–µ–¥–ª–∞–π–Ω–∞"),
        ],
        [InlineKeyboardButton(text="üí¨ –í–≤–µ—Å—Ç–∏ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç", callback_data="deadline_manual")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="executor_back_to_price")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_main_reply_keyboard():
    buttons = [
        [KeyboardButton(text="üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞"), KeyboardButton(text="üìÇ –ú–æ–∏ –∑–∞—è–≤–∫–∏")],
        [KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å"), KeyboardButton(text="üë®‚Äçüíª –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")]
    ]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

def get_back_to_main_menu_keyboard():
    buttons = [[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main_menu")]]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_back_keyboard():
    buttons = [[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_gradebook_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_gradebook")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
    ])

def get_profile_confirm_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="edit_profile")],
        [InlineKeyboardButton(text="‚û°Ô∏è –î–∞–ª–µ–µ", callback_data="profile_next")]
    ])
def get_yes_no_keyboard(prefix: str):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ '–î–∞' –∏ '–ù–µ—Ç'."""
    buttons = [
        [
            InlineKeyboardButton(text="‚úÖ –î–∞", callback_data=f"{prefix}_yes"),
            InlineKeyboardButton(text="‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f"{prefix}_no")
        ],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)
def get_user_order_keyboard(order_id, status):
    buttons = []
    # –ö–Ω–æ–ø–∫–∞ '–û–ø–ª–∞—Ç–∏—Ç—å' –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å '–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã'
    if status == "–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã":
        buttons.append([InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", callback_data=f"pay_{order_id}")])
    # –ö–Ω–æ–ø–∫–∞ '–û—Ç–∫–∞–∑–∞—Ç—å—Å—è' —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ '–í—ã–ø–æ–ª–Ω–µ–Ω–∞'
    if status != "–í—ã–ø–æ–ª–Ω–µ–Ω–∞":
        buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è", callback_data=f"user_cancel_order:{order_id}")])
    # –ö–Ω–æ–ø–∫–∞ '–ö —Å–ø–∏—Å–∫—É –∑–∞—è–≤–æ–∫'
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É –∑–∞—è–≤–æ–∫", callback_data="my_orders_list")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_work_type_keyboard():
    buttons = [
        [InlineKeyboardButton(text="–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è", callback_data="work_type_–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è")],
        [InlineKeyboardButton(text="–†–∞—Å—á—ë—Ç–Ω–æ-–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è", callback_data="work_type_–†–∞—Å—á—ë—Ç–Ω–æ-–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è")],
        [InlineKeyboardButton(text="–ö—É—Ä—Å–æ–≤–∞—è", callback_data="work_type_–ö—É—Ä—Å–æ–≤–∞—è")],
        [InlineKeyboardButton(text="–¢–µ—Å—Ç", callback_data="work_type_–¢–µ—Å—Ç")],
        [InlineKeyboardButton(text="–û—Ç—á—ë—Ç", callback_data="work_type_–û—Ç—á—ë—Ç")],
        [InlineKeyboardButton(text="–î–∏–ø–ª–æ–º", callback_data="work_type_–î–∏–ø–ª–æ–º")],
        [InlineKeyboardButton(text="–î—Ä—É–≥–æ–µ (–≤–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é)", callback_data="work_type_other")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_subject")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_skip_keyboard(prefix: str):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîΩ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f"skip_{prefix}")]
    ])
    
def get_confirmation_keyboard():
    buttons = [
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_order")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_order")],

        # –ö–Ω–æ–ø–∫–∞ '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' —É–±—Ä–∞–Ω–∞ –Ω–∞ —ç—Ç–∞–ø–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_admin_final_approval_keyboard(order_id, price, executor_id=None, show_materials_button=True):
    approve_cb = f"final_approve_{order_id}_{price}"
    if executor_id is not None:
        approve_cb += f"_{executor_id}"
    buttons = [
        [InlineKeyboardButton(text=f"‚úÖ –£—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å ({price} ‚ÇΩ)", callback_data=approve_cb)],
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É", callback_data=f"final_change_price_{order_id}")],
    ]
    if show_materials_button:
        buttons.append([InlineKeyboardButton(text="üìé –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∑–∞–∫–∞–∑–∞", callback_data=f"admin_show_materials:{order_id}")])
    reject_cb = f"final_reject_{order_id}"
    if executor_id is not None:
        reject_cb += f"_{executor_id}"
    buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", callback_data=reject_cb)])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_client_work_approval_keyboard(order_id):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å —Ä–∞–±–æ—Ç—É", callback_data=f"client_accept_work:{order_id}")],
        [InlineKeyboardButton(text="‚úçÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É", callback_data=f"client_request_revision:{order_id}")]
    ])
def get_skip_comment_keyboard():
    buttons = [
        [InlineKeyboardButton(text="‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_comment")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_admin_order_keyboard(order, show_materials_button=True):
    status = order.get('status')
    executor_is_admin = str(order.get('executor_id')) == str(ADMIN_ID)
    # –î–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤ '–í —Ä–∞–±–æ—Ç–µ' –∏ '–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–µ' –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∑–∞–∫–∞–∑–∞' –∏ (–µ—Å–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å ‚Äî –∞–¥–º–∏–Ω) '–°–¥–∞—Ç—å —Ä–∞–±–æ—Ç—É'
    if status in ["–í —Ä–∞–±–æ—Ç–µ", "–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–µ"]:
        buttons = []
        has_files = order.get('guidelines_file') or order.get('task_file') or order.get('task_text') or order.get('example_file')
        
        if executor_is_admin and status == "–í —Ä–∞–±–æ—Ç–µ":
            buttons.append([InlineKeyboardButton(text="‚úÖ –°–¥–∞—Ç—å —Ä–∞–±–æ—Ç—É", callback_data=f"admin_admin_submit_work_{order['order_id']}")])
        if has_files:
            buttons.append([InlineKeyboardButton(text="üìé –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∑–∞–∫–∞–∑–∞", callback_data=f"admin_show_materials:{order['order_id']}")])
        buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")])
        return InlineKeyboardMarkup(inline_keyboard=buttons)
    # --- –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ ---
    buttons = []
    if 'order_id' not in order:
        buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")])
        return InlineKeyboardMarkup(inline_keyboard=buttons)
    if status == "–†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç—Å—è" and not executor_is_admin:
        buttons.append([
            InlineKeyboardButton(text="üë§ –í—ã–±—Ä–∞—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è", callback_data=f"assign_executor_start_{order['order_id']}")
        ])
        if status in ["–†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç—Å—è", "–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"]:
            buttons.append([
                InlineKeyboardButton(text="‚ùáÔ∏è –í–∑—è—Ç—å –∑–∞–∫–∞–∑", callback_data=f"admin_self_take_{order['order_id']}")
        ])
    if status == "–í—ã–ø–æ–ª–Ω–µ–Ω–∞":
        buttons.append([InlineKeyboardButton(text="üìä –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ç–∞–±–ª–∏—Ü—É", callback_data=f"admin_save_to_gsheet:{order['order_id']}")])
    # --- –î–û–ë–ê–í–õ–ï–ù–û: –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ '–í —Ä–∞–±–æ—Ç–µ' –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã', –µ—Å–ª–∏ –µ—Å—Ç—å —Ñ–∞–π–ª—ã ---
    if status == "–í —Ä–∞–±–æ—Ç–µ":
        has_files = order.get('guidelines_file') or order.get('task_file') or order.get('task_text') or order.get('example_file')
        if has_files:
            buttons.append([InlineKeyboardButton(text="üìé –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∑–∞–∫–∞–∑–∞", callback_data=f"admin_show_materials:{order['order_id']}")])
    if status != "–í—ã–ø–æ–ª–Ω–µ–Ω–∞":
        has_files = order.get('guidelines_file') or order.get('task_file') or order.get('task_text') or order.get('example_file')
        if show_materials_button and has_files and status != "–í —Ä–∞–±–æ—Ç–µ":
            buttons.append([InlineKeyboardButton(text="üìé –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∑–∞–∫–∞–∑–∞", callback_data=f"admin_show_materials:{order['order_id']}")])
            buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –∑–∞—è–≤–∫–∏", callback_data=f"admin_delete_order:{order['order_id']}")])
        if not show_materials_button:
            buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –°–∫—Ä—ã—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã", callback_data=f"admin_hide_materials:{order['order_id']}")])
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–°–¥–∞—Ç—å —Ä–∞–±–æ—Ç—É" –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ "–í —Ä–∞–±–æ—Ç–µ" —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å ‚Äî –∞–¥–º–∏–Ω
        if status == "–í —Ä–∞–±–æ—Ç–µ" and executor_is_admin:
            buttons.append([InlineKeyboardButton(text="‚úÖ –°–¥–∞—Ç—å —Ä–∞–±–æ—Ç—É", callback_data=f"admin_admin_submit_work_{order['order_id']}")])
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–°–¥–∞—Ç—å —Ä–∞–±–æ—Ç—É' –æ—Ç –∞–¥–º–∏–Ω–∞-–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
@admin_router.callback_query(F.data.startswith("admin_admin_submit_work_"))
async def admin_admin_submit_work_handler(callback: CallbackQuery, state: FSMContext):
    parts = callback.data.split("_")
    order_id = int(parts[4])  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: order_id –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ parts[4], –∞ –Ω–µ parts[2]
    executor_id = int(parts[5]) if len(parts) > 5 else None
    await state.update_data(submit_order_id=order_id)
    await state.set_state("admin_waiting_for_work_file")
    await callback.message.edit_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª —Å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–æ–π (zip, docx, pdf –∏ –¥—Ä.)",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∑–∞—è–≤–∫–µ", callback_data=f"admin_view_order_{order_id}")]
        ])
    )
    await callback.answer()
def get_user_cancel_confirm_keyboard(order_id):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞", callback_data=f"user_cancel_confirm:{order_id}"),
         InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data=f"user_cancel_abort:{order_id}")]
    ])

@router.callback_query(F.data.startswith("user_cancel_order:"))
async def user_cancel_order_confirm(callback: CallbackQuery, state: FSMContext):
    order_id = int(callback.data.split(":")[-1])
    await callback.message.edit_text(
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç —ç—Ç–æ–π –∑–∞—è–≤–∫–∏?",
        reply_markup=get_user_cancel_confirm_keyboard(order_id)
    )
    await callback.answer()

def delete_order_from_gsheet(order_id):
    creds = Credentials.from_service_account_file("google-credentials.json", scopes=["https://www.googleapis.com/auth/spreadsheets"])
    gc = gspread.authorize(creds)
    sh = gc.open_by_key(GOOGLE_SHEET_ID)
    worksheet = sh.sheet1
    # –ù–∞–π—Ç–∏ —Å—Ç—Ä–æ–∫—É —Å order_id (–ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ order_id –≤ –ø–µ—Ä–≤–æ–º —Å—Ç–æ–ª–±—Ü–µ)
    cell = worksheet.find(str(order_id))
    if cell:
        worksheet.delete_rows(cell.row)
@router.callback_query(F.data.startswith("user_cancel_confirm:"))
async def user_cancel_order_yes(callback: CallbackQuery, state: FSMContext):
    order_id = int(callback.data.split(":")[-1])
    user_id = callback.from_user.id
    file_path = "orders.json"
    orders = []
    subject = None
    status = None

    if os.path.exists(file_path) and os.path.getsize(file_path) > 0:
        with open(file_path, "r", encoding="utf-8") as f:
            try:
                orders = json.load(f)
            except json.JSONDecodeError:
                orders = []

    # –ù–∞–π—Ç–∏ –∑–∞—è–≤–∫—É –¥–ª—è subject –∏ status
    for o in orders:
        if str(o.get("order_id")) == str(order_id) and o.get("user_id") == user_id:
            subject = o.get("subject", "–ù–µ —É–∫–∞–∑–∞–Ω")
            status = o.get("status")
            break

    # –£–¥–∞–ª—è–µ–º –∑–∞—è–≤–∫—É –∏–∑ orders.json
    new_orders = [o for o in orders if not (str(o.get("order_id")) == str(order_id) and o.get("user_id") == user_id)]
    with open(file_path, "w", encoding="utf-8") as f:
        json.dump(new_orders, f, ensure_ascii=False, indent=4)

    # –ï—Å–ª–∏ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –≤ —Å—Ç–∞—Ç—É—Å–µ "–í —Ä–∞–±–æ—Ç–µ", –ø—Ä–æ–±—É–µ–º —É–¥–∞–ª–∏—Ç—å –∏–∑ Google Sheets
    if status == "–í —Ä–∞–±–æ—Ç–µ":
        try:
            delete_order_from_gsheet(order_id)
            print("–ó–∞—è–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –≥—É–≥–ª —Ç–∞–±–ª–∏—Ü—ã")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑ Google Sheets: {e}")

    await state.clear()
    await callback.message.edit_text("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∏ —É–¥–∞–ª–µ–Ω–∞.")
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    if subject is not None:
        await bot.send_message(ADMIN_ID, f"‚ùå –ó–∞–∫–∞–∑—á–∏–∫ –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –∑–∞—è–≤–∫–∏ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É ({subject})")
    await callback.answer()

@router.callback_query(F.data.startswith("user_cancel_abort:"))
async def user_cancel_order_no(callback: CallbackQuery, state: FSMContext):
    order_id = int(callback.data.split(":")[-1])
    user_id = callback.from_user.id
    orders = get_user_orders(user_id)
    target_order = next((order for order in orders if order['order_id'] == order_id), None)
    if not target_order:
        await callback.message.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —ç—Ç—É –∑–∞—è–≤–∫—É –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –∫ –Ω–µ–π –¥–æ—Å—Ç—É–ø–∞.")
        await callback.answer()
        return
    status = target_order.get('status', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')
    status_text = f"{STATUS_EMOJI_MAP.get(status, 'üìÑ')} {status}"
    details_text = f"""
<b>–î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏ ‚Ññ{target_order['order_id']}</b>\n\n<b>–°—Ç–∞—Ç—É—Å:</b> {status_text}\n\n<b>–ì—Ä—É–ø–ø–∞:</b> {target_order.get('group_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n<b>–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç:</b> {target_order.get('university_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n<b>–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å:</b> {target_order.get('teacher_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n<b>–ù–æ–º–µ—Ä –∑–∞—á–µ—Ç–∫–∏:</b> {target_order.get('gradebook', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n<b>–ü—Ä–µ–¥–º–µ—Ç:</b> {target_order.get('subject', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n<b>–¢–∏–ø —Ä–∞–±–æ—Ç—ã:</b> {target_order.get('work_type', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n<b>–ú–µ—Ç–æ–¥–∏—á–∫–∞:</b> {'‚úÖ –î–∞' if target_order.get('has_guidelines') else '‚ùå –ù–µ—Ç'}\n<b>–ó–∞–¥–∞–Ω–∏–µ:</b> {'‚úÖ –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ' if target_order.get('task_file') or target_order.get('task_text') else '‚ùå –ù–µ—Ç'}\n<b>–ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã:</b> {'‚úÖ –î–∞' if target_order.get('has_example') else '‚ùå –ù–µ—Ç'}\n<b>–î–∞—Ç–∞ —Å–¥–∞—á–∏:</b> {target_order.get('deadline', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {target_order.get('comments', '–ù–µ—Ç')}\n"""
    if status == "–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–µ" and target_order.get('revision_comment'):
        details_text += f"\n<b>–î–æ—Ä–∞–±–æ—Ç–∫–∞:</b> {target_order.get('revision_comment')}"
    keyboard = get_user_order_keyboard(order_id, status)
    await callback.message.edit_text(details_text, parse_mode="HTML", reply_markup=keyboard)
    await callback.answer()
# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ —Ä–∞–±–æ—Ç—ã –æ—Ç –∞–¥–º–∏–Ω–∞-–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
@admin_router.message(StateFilter("admin_waiting_for_work_file"), F.document)
async def admin_admin_work_file_received(message: Message, state: FSMContext):
    from datetime import datetime
    data = await state.get_data()
    order_id = data.get('submit_order_id')
    file_id = message.document.file_id
    file_name = message.document.file_name
    orders = get_all_orders()
    order = None
    is_admin_executor = False
    for o in orders:
        if o.get('order_id') == order_id:
            if str(o.get('executor_id')) == str(ADMIN_ID):
                is_admin_executor = True
                o['status'] = '–£—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º'  # <-- –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ!
                o['submitted_work'] = {'file_id': file_id, 'file_name': file_name}
                o['submitted_at'] = datetime.now().strftime('%d.%m.%Y')
                order = o
            else:
                o['status'] = '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É'
                o['submitted_work'] = {'file_id': file_id, 'file_name': file_name}
                o['submitted_at'] = datetime.now().strftime('%d.%m.%Y')
                order = o
            break
    with open('orders.json', 'w', encoding='utf-8') as f:
        json.dump(orders, f, ensure_ascii=False, indent=4)
    subject = order.get('subject', '–ù–µ —É–∫–∞–∑–∞–Ω') if order else ''
    work_type = order.get('work_type', '–ù–µ —É–∫–∞–∑–∞–Ω').replace('work_type_', '') if order else ''
    submitted_at = order.get('submitted_at', '') if order else ''
    if is_admin_executor:
        customer_id = order.get('user_id')
        if customer_id:
            caption = f"‚úÖ –í–∞—à–∞ —Ä–∞–±–æ—Ç–∞ –ø–æ –∑–∞–∫–∞–∑—É ‚Ññ{order_id} –≥–æ—Ç–æ–≤–∞!\n–ü—Ä–µ–¥–º–µ—Ç: {subject}\n–¢–∏–ø —Ä–∞–±–æ—Ç—ã: {work_type}\n–î–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {submitted_at}"
            keyboard = get_client_work_approval_keyboard(order_id)
            await bot.send_document(
                chat_id=customer_id,
                document=file_id,
                caption=caption,
                reply_markup=keyboard
            )
        await message.answer("‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –æ–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∑–∞–∫–∞–∑—á–∏–∫–∞", reply_markup=None)
        # –£–¥–∞–ª—è–µ–º –≤–æ–∑–≤—Ä–∞—Ç –∫ –¥–µ—Ç–∞–ª—è–º –∑–∞—è–≤–∫–∏ ‚Äî –±–æ–ª—å—à–µ –Ω–µ –≤—ã–∑—ã–≤–∞–µ–º admin_view_order_handler
        await state.clear()
        return  # <--- –ì–ê–†–ê–ù–¢–ò–†–û–í–ê–ù–ù–û –û–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –§–£–ù–ö–¶–ò–Æ –î–õ–Ø –ê–î–ú–ò–ù–ê
    # –¢–æ–ª—å–∫–æ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
    admin_text = f"–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ä–∞–±–æ—Ç—É –ø–æ –∑–∞–∫–∞–∑—É ‚Ññ{order_id} –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!\n\n–ü—Ä–µ–¥–º–µ—Ç: {subject}\n–¢–∏–ø —Ä–∞–±–æ—Ç—ã: {work_type}\n–î–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {submitted_at}"
    if order:
        await message.answer(admin_text, reply_markup=get_admin_order_keyboard(order, show_materials_button=True))
    else:
        await message.answer("–û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    await state.clear()


@admin_router.callback_query(F.data == "admin_back")
async def admin_back_handler(callback: CallbackQuery, state: FSMContext):
    await show_admin_orders_list(callback)
    await callback.answer()

# --- –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å ---

# –§–∏–ª—å—Ç—Ä, —á—Ç–æ–±—ã —ç—Ç–∏ —Ö–µ–Ω–¥–ª–µ—Ä—ã —Ä–∞–±–æ—Ç–∞–ª–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞
@admin_router.message(Command("admin"))
async def cmd_admin_panel(message: Message, state: FSMContext):
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω
    if message.from_user.id != int(ADMIN_ID):
        return
    await state.clear()
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!",
        reply_markup=get_admin_keyboard()
    )

async def show_admin_orders_list(message_or_callback, state=None):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É—è edit_text –¥–ª—è callback –∏ answer –¥–ª—è message. –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç FSM-—Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –±–∞–≥–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏."""
    user_id = message_or_callback.from_user.id
    if user_id != int(ADMIN_ID): return

    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω state
    if state is not None:
        await state.clear()

    orders = get_all_orders()
    if not orders:
        if hasattr(message_or_callback, 'message'):
            await message_or_callback.message.edit_text("–ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞.")
        else:
            await message_or_callback.answer("–ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞.")
        return

    text = "–í—Å–µ –∑–∞–∫–∞–∑—ã:"
    keyboard_buttons = []
    for order in reversed(orders[-20:]): # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20
        order_id = order['order_id']
        order_status = order.get('status', 'N/A')
        work_type_raw = order.get('work_type', '–ó–∞—è–≤–∫–∞')
        work_type = work_type_raw.replace('work_type_', '')
        subject = order.get('subject', '–ë–µ–∑ —Ç–µ–º—ã')
        button_text = f"–ó–∞–∫–∞–∑ –Ω–∞ —Ç–µ–º—É {subject} ({work_type}) - {order_status}"
        keyboard_buttons.append([InlineKeyboardButton(text=button_text, callback_data=f"admin_view_order_{order_id}")])
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    if hasattr(message_or_callback, 'message'):
        try:
            await message_or_callback.message.edit_text(text, reply_markup=keyboard)
        except Exception:
            await message_or_callback.message.answer(text, reply_markup=keyboard)
    else:
        await message_or_callback.answer(text, reply_markup=keyboard)

@admin_router.message(F.text == "üì¶ –í—Å–µ –∑–∞–∫–∞–∑—ã")
async def show_all_orders_handler(message_or_callback):
    await show_admin_orders_list(message_or_callback)

@router.callback_query(F.data.startswith("admin_view_order_"))
async def admin_view_order_handler(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id != int(ADMIN_ID): return
    order_id = int(callback.data.split("_")[-1])
    orders = get_all_orders()
    target_order = next((order for order in orders if order['order_id'] == order_id), None)
    if not target_order:
        await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
    status = target_order.get('status')
    # --- –ù–æ–≤—ã–π –≤–∏–¥ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ '–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è' —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –æ—Ñ—Ñ–µ—Ä–∞–º–∏ ---
    if status == '–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è' and target_order.get('executor_offers'):
        offers = target_order['executor_offers']
        n = len(offers)
        text = f"–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –µ—Å—Ç—å {n} –æ—Ñ—Ñ–µ—Ä(–æ–≤) –æ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –Ω–∞ –∑–∞–∫–∞–∑.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ñ—Ñ–µ—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:" 
        buttons = []
        for offer in offers:
            fio = offer.get('executor_full_name', '–ë–µ–∑ –§–ò–û')
            btn_text = f"{fio}"
            buttons.append([InlineKeyboardButton(text=btn_text, callback_data=f"admin_offer_details_{order_id}_{offer.get('executor_id')}")])
        buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")])
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()
        return
    # ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...
    elif status == "–†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç—Å—è":
        full_name = get_full_name(target_order)
        header = f"–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ ‚Ññ{order_id} –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ ({full_name})\n"
        if target_order.get('creation_date'):
            header += f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {target_order.get('creation_date')}\n"
        group = target_order.get("group_name", "–ù–µ —É–∫–∞–∑–∞–Ω–∞")
        university = target_order.get("university_name", "–ù–µ —É–∫–∞–∑–∞–Ω")
        teacher = target_order.get("teacher_name", "–ù–µ —É–∫–∞–∑–∞–Ω")
        gradebook = target_order.get("gradebook", "–ù–µ —É–∫–∞–∑–∞–Ω")
        subject = target_order.get("subject", "–ù–µ —É–∫–∞–∑–∞–Ω")
        work_type_key = target_order.get("work_type", "N/A").replace("work_type_", "")
        work_type_str = work_type_key if work_type_key != 'other' else target_order.get('work_type_other_name', '–î—Ä—É–≥–æ–µ')
        guidelines = '‚úÖ –î–∞' if target_order.get('has_guidelines') else '‚ùå –ù–µ—Ç'
        task = '‚úÖ –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ' if target_order.get('task_file') or target_order.get('task_text') else '‚ùå –ù–µ—Ç'
        example = '‚úÖ –î–∞' if target_order.get('has_example') else '‚ùå –ù–µ—Ç'
        deadline = target_order.get('deadline', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
        deadline_str = pluralize_days(deadline) if isinstance(deadline, str) and deadline.isdigit() else deadline
        comments = target_order.get('comments', '–ù–µ—Ç')
        details_text = (
            f"{header}\n"
            f"–ì—Ä—É–ø–ø–∞: {group}\n"
            f"–í–£–ó: {university}\n"
            f"–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {teacher}\n"
            f"–ù–æ–º–µ—Ä –∑–∞—á–µ—Ç–∫–∏: {gradebook}\n"
            f"–ü—Ä–µ–¥–º–µ—Ç: {subject}\n"
            f"–¢–∏–ø —Ä–∞–±–æ—Ç—ã: {work_type_str}\n"
            f"–ú–µ—Ç–æ–¥–∏—á–∫–∞: {guidelines}\n"
            f"–ó–∞–¥–∞–Ω–∏–µ: {task}\n"
            f"–ü—Ä–∏–º–µ—Ä: {example}\n"
            f"–î–µ–¥–ª–∞–π–Ω: {deadline_str}\n"
            f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {comments}"
        )
        keyboard = get_admin_order_keyboard(target_order, show_materials_button=True)
        try:
            await callback.message.edit_text(details_text, reply_markup=keyboard)
        except Exception:
            await callback.message.answer(details_text, reply_markup=keyboard)
        await callback.answer()
        return

    elif status == '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É':
        submitted_work = target_order.get('submitted_work')
        submitted_at = target_order.get('submitted_at', '‚Äî')
        subject = target_order.get('subject', '–ù–µ —É–∫–∞–∑–∞–Ω')
        work_type = target_order.get('work_type', '–ù–µ —É–∫–∞–∑–∞–Ω').replace('work_type_', '')
        admin_text = f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –≤—ã–ø–æ–ª–Ω–∏–ª –∑–∞–∫–∞–∑ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É <b>{subject}</b>\n–¢–∏–ø —Ä–∞–±–æ—Ç—ã: <b>{work_type}</b>\n–î–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: <b>{submitted_at}</b>"
        admin_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –£—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–∞–±–æ—Ç—É", callback_data=f"admin_approve_work_{order_id}")],
            [InlineKeyboardButton(text="üîΩ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É", callback_data=f"admin_reject_work_{order_id}")],
            [InlineKeyboardButton(text="üìé –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∑–∞–∫–∞–∑–∞", callback_data=f"admin_show_materials:{order_id}")]
        ])
        if submitted_work and submitted_work.get('file_id'):
            await callback.message.delete()
            await bot.send_document(
                callback.from_user.id,
                submitted_work['file_id'],
                caption=None,
                parse_mode=None,
                reply_markup=None
            )
            await bot.send_message(
                callback.from_user.id,
                admin_text,
                parse_mode="HTML",
                reply_markup=admin_keyboard
            )
        else:
            await callback.message.edit_text(admin_text, parse_mode="HTML", reply_markup=admin_keyboard)

    elif status == "–í —Ä–∞–±–æ—Ç–µ":
        full_name = get_full_name(target_order)
        header = f"–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ ‚Ññ{order_id} –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ ({full_name})\n"
        if target_order.get('creation_date'):
            header += f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {target_order.get('creation_date')}\n"
        group = target_order.get("group_name", "–ù–µ —É–∫–∞–∑–∞–Ω–∞")
        university = target_order.get("university_name", "–ù–µ —É–∫–∞–∑–∞–Ω")
        teacher = target_order.get("teacher_name", "–ù–µ —É–∫–∞–∑–∞–Ω")
        gradebook = target_order.get("gradebook", "–ù–µ —É–∫–∞–∑–∞–Ω")
        subject = target_order.get("subject", "–ù–µ —É–∫–∞–∑–∞–Ω")
        work_type_key = target_order.get("work_type", "N/A").replace("work_type_", "")
        work_type_str = work_type_key if work_type_key != 'other' else target_order.get('work_type_other_name', '–î—Ä—É–≥–æ–µ')
        guidelines = '‚úÖ –î–∞' if target_order.get('has_guidelines') else '‚ùå –ù–µ—Ç'
        task = '‚úÖ –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ' if target_order.get('task_file') or target_order.get('task_text') else '‚ùå –ù–µ—Ç'
        example = '‚úÖ –î–∞' if target_order.get('has_example') else '‚ùå –ù–µ—Ç'
        deadline = target_order.get('deadline', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
        deadline_str = pluralize_days(deadline) if isinstance(deadline, str) and deadline.isdigit() else deadline
        executor_id = target_order.get('executor_id')
        executor_info = ""
        if executor_id:
            if str(executor_id) == str(ADMIN_ID):
                executor_info = f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: –Ø"
            else:
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥—Ä—É–≥–æ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ
                executor_info = f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {executor_id}"
        details_text = (
            f"{header}\n"
            f"–ì—Ä—É–ø–ø–∞: {group}\n"
            f"–í–£–ó: {university}\n"
            f"–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {teacher}\n"
            f"–ù–æ–º–µ—Ä –∑–∞—á–µ—Ç–∫–∏: {gradebook}\n"
            f"–ü—Ä–µ–¥–º–µ—Ç: {subject}\n"
            f"–¢–∏–ø —Ä–∞–±–æ—Ç—ã: {work_type_str}\n"
            f"–ú–µ—Ç–æ–¥–∏—á–∫–∞: {guidelines}\n"
            f"–ó–∞–¥–∞–Ω–∏–µ: {task}\n"
            f"–ü—Ä–∏–º–µ—Ä: {example}\n"
            f"–î–µ–¥–ª–∞–π–Ω: {deadline_str}\n"
            f"{executor_info}"
        )
        keyboard = get_admin_order_keyboard(target_order, show_materials_button=True)
        try:
            await callback.message.edit_text(details_text, reply_markup=keyboard)
        except Exception:
            await callback.message.answer(details_text, reply_markup=keyboard)
        await callback.answer()
        return
    
    elif status == "–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã":
        full_name = get_full_name(target_order)
        header = f"–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ ‚Ññ{order_id} –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ ({full_name})\n"
        if target_order.get('creation_date'):
            header += f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {target_order.get('creation_date')}\n"
        group = target_order.get("group_name", "–ù–µ —É–∫–∞–∑–∞–Ω–∞")
        university = target_order.get("university_name", "–ù–µ —É–∫–∞–∑–∞–Ω")
        teacher = target_order.get("teacher_name", "–ù–µ —É–∫–∞–∑–∞–Ω")
        gradebook = target_order.get("gradebook", "–ù–µ —É–∫–∞–∑–∞–Ω")
        subject = target_order.get("subject", "–ù–µ —É–∫–∞–∑–∞–Ω")
        work_type_key = target_order.get("work_type", "N/A").replace("work_type_", "")
        work_type_str = work_type_key if work_type_key != 'other' else target_order.get('work_type_other_name', '–î—Ä—É–≥–æ–µ')
        guidelines = '‚úÖ –î–∞' if target_order.get('has_guidelines') else '‚ùå –ù–µ—Ç'
        task = '‚úÖ –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ' if target_order.get('task_file') or target_order.get('task_text') else '‚ùå –ù–µ—Ç'
        example = '‚úÖ –î–∞' if target_order.get('has_example') else '‚ùå –ù–µ—Ç'
        deadline = target_order.get('deadline', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
        deadline_str = pluralize_days(deadline) if isinstance(deadline, str) and deadline.isdigit() else deadline
        # --- –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å ---
        executor_id = target_order.get('executor_id')
        executor_offer = target_order.get('executor_offers', {})
        executor_full_name = executor_offer.get('executor_full_name')
        if executor_full_name and executor_offer.get('executor_id'):
            executor_display = f"{executor_full_name} - {executor_offer.get('executor_id')}"
        elif executor_id:
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –§–ò–û –ø–æ executor_id –≤ executors.json
            from shared import get_executors_list
            executors = get_executors_list()
            found_name = None
            for ex in executors:
                if str(ex.get('id')) == str(executor_id):
                    found_name = ex.get('name') or '‚Äî'
                    break
            if found_name:
                executor_display = f"{found_name} - {executor_id}"
            else:
                executor_display = f"ID {executor_id}"
        else:
            executor_display = '‚Äî'
        details_text = (
            f"{header}\n"
            f"–ì—Ä—É–ø–ø–∞: {group}\n"
            f"–í–£–ó: {university}\n"
            f"–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {teacher}\n"
            f"–ù–æ–º–µ—Ä –∑–∞—á–µ—Ç–∫–∏: {gradebook}\n"
            f"–ü—Ä–µ–¥–º–µ—Ç: {subject}\n"
            f"–¢–∏–ø —Ä–∞–±–æ—Ç—ã: {work_type_str}\n"
            f"–ú–µ—Ç–æ–¥–∏—á–∫–∞: {guidelines}\n"
            f"–ó–∞–¥–∞–Ω–∏–µ: {task}\n"
            f"–ü—Ä–∏–º–µ—Ä: {example}\n"
            f"–î–µ–¥–ª–∞–π–Ω: {deadline_str}\n"
            f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {executor_display}\n"
            f"–û–∂–∏–¥–∞–µ–º –æ–ø–ª–∞—Ç—É...."
        )
        keyboard = get_admin_order_keyboard(target_order, show_materials_button=True)
        try:
            await callback.message.edit_text(details_text, reply_markup=keyboard)
        except Exception:
            await callback.message.answer(details_text, reply_markup=keyboard)
        await callback.answer()
        return
            
    elif status == "–£—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º":
        full_name = get_full_name(target_order)
        header = f"–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ ‚Ññ{order_id} –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ ({full_name})\n"
        if target_order.get('creation_date'):
            header += f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {target_order.get('creation_date')}\n"
        
        group = target_order.get("group_name", "–ù–µ —É–∫–∞–∑–∞–Ω–∞")
        university = target_order.get("university_name", "–ù–µ —É–∫–∞–∑–∞–Ω")
        teacher = target_order.get("teacher_name", "–ù–µ —É–∫–∞–∑–∞–Ω")
        gradebook = target_order.get("gradebook", "–ù–µ —É–∫–∞–∑–∞–Ω")
        subject = target_order.get("subject", "–ù–µ —É–∫–∞–∑–∞–Ω")
        work_type_key = target_order.get("work_type", "N/A").replace("work_type_", "")
        work_type_str = work_type_key if work_type_key != 'other' else target_order.get('work_type_other_name', '–î—Ä—É–≥–æ–µ')
        guidelines = '‚úÖ –î–∞' if target_order.get('has_guidelines') else '‚ùå –ù–µ—Ç'
        task = '‚úÖ –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ' if target_order.get('task_file') or target_order.get('task_text') else '‚ùå –ù–µ—Ç'
        example = '‚úÖ –î–∞' if target_order.get('has_example') else '‚ùå –ù–µ—Ç'
        deadline = target_order.get('deadline', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
     
        deadline_str = pluralize_days(deadline) if isinstance(deadline, str) and deadline.isdigit() else deadline

        details_text = f"""{header}
–ì—Ä—É–ø–ø–∞: {group}
–í–£–ó: {university}
–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {teacher}
–ù–æ–º–µ—Ä –∑–∞—á–µ—Ç–∫–∏: {gradebook}
–ü—Ä–µ–¥–º–µ—Ç: {subject}
–¢–∏–ø —Ä–∞–±–æ—Ç—ã: {work_type_str}
–ú–µ—Ç–æ–¥–∏—á–∫–∞: {guidelines}
–ó–∞–¥–∞–Ω–∏–µ: {task}
–ü—Ä–∏–º–µ—Ä: {example}
–î–µ–¥–ª–∞–π–Ω: {deadline_str}"""

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∑–∞—è–≤–∫–∞–º", callback_data="admin_back")]
        ])
        
        try:
            await callback.message.edit_text(details_text, reply_markup=keyboard)
        except Exception:
            await callback.message.answer(details_text, reply_markup=keyboard)

    elif status == "–í—ã–ø–æ–ª–Ω–µ–Ω–∞":
        full_name = get_full_name(target_order)
        header = f"–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ ‚Ññ{order_id} –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ ({full_name})\n"
        if target_order.get('creation_date'):
            header += f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {target_order.get('creation_date')}\n"
        group = target_order.get("group_name", "–ù–µ —É–∫–∞–∑–∞–Ω–∞")
        university = target_order.get("university_name", "–ù–µ —É–∫–∞–∑–∞–Ω")
        teacher = target_order.get("teacher_name", "–ù–µ —É–∫–∞–∑–∞–Ω")
        gradebook = target_order.get("gradebook", "–ù–µ —É–∫–∞–∑–∞–Ω")
        subject = target_order.get("subject", "–ù–µ —É–∫–∞–∑–∞–Ω")
        work_type_key = target_order.get("work_type", "N/A").replace("work_type_", "")
        work_type_str = work_type_key if work_type_key != 'other' else target_order.get('work_type_other_name', '–î—Ä—É–≥–æ–µ')
        guidelines = '‚úÖ –î–∞' if target_order.get('has_guidelines') else '‚ùå –ù–µ—Ç'
        task = '‚úÖ –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ' if target_order.get('task_file') or target_order.get('task_text') else '‚ùå –ù–µ—Ç'
        example = '‚úÖ –î–∞' if target_order.get('has_example') else '‚ùå –ù–µ—Ç'
        deadline = target_order.get('deadline', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
        deadline_str = pluralize_days(deadline) if isinstance(deadline, str) and deadline.isdigit() else deadline

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ (final_price)
        earned = target_order.get('final_price', 0)

        details_text = (
            f"{header}–ì—Ä—É–ø–ø–∞: {group}\n–í–£–ó: {university}\n–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {teacher}\n–ù–æ–º–µ—Ä –∑–∞—á–µ—Ç–∫–∏: {gradebook}\n"
            f"–ü—Ä–µ–¥–º–µ—Ç: {subject}\n–¢–∏–ø —Ä–∞–±–æ—Ç—ã: {work_type_str}\n–ú–µ—Ç–æ–¥–∏—á–∫–∞: {guidelines}\n–ó–∞–¥–∞–Ω–∏–µ: {task}\n"
            f"–ü—Ä–∏–º–µ—Ä: {example}\n–î–µ–¥–ª–∞–π–Ω: {deadline_str}\n"
        )
        executor_offer = target_order.get('executor_offers', {})
        if isinstance(executor_offer, list):
            executor_offer = executor_offer[0] if executor_offer else {}
        work_price = executor_offer.get('price', 0)
        admin_price = target_order.get('final_price', 0)
        try:
            work_price = float(work_price)
        except Exception:
            work_price = 0
        try:
            admin_price = float(admin_price)
        except Exception:
            admin_price = 0
        profit = admin_price - work_price
        # –ï—Å–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å ‚Äî –∞–¥–º–∏–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–º–µ—Ç–∫—É
        if str(target_order.get('executor_id')) == str(ADMIN_ID):
            details_text += "\n–†–∞–±–æ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–ª–∏–µ–Ω—Ç—É."
        else:
            details_text += (
                f"–¶–µ–Ω–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è: {work_price} ‚ÇΩ\n"
                f"–ú–æ—è —Ü–µ–Ω–∞: {admin_price} ‚ÇΩ\n"
                f"–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {profit} ‚ÇΩ"
            )

        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ‚Äî –≤—Å–µ–≥–¥–∞ get_admin_order_keyboard (—Ç–∞–º —É–∂–µ –µ—Å—Ç—å –ª–æ–≥–∏–∫–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ç–∞–±–ª–∏—Ü—É")
        keyboard = get_admin_order_keyboard(target_order, show_materials_button=True)
        try:
            await callback.message.edit_text(details_text, reply_markup=keyboard)
        except Exception:
            await callback.message.answer(details_text, reply_markup=keyboard)
        await callback.answer()
        return

    elif status == "–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–µ":
        executor_is_admin = str(target_order.get('executor_id')) == str(ADMIN_ID)
        # --- –§–æ—Ä–º–∏—Ä—É–µ–º details_text –∫–∞–∫ —Ä–∞–Ω—å—à–µ ---
        if executor_is_admin:
            creation_date = target_order.get('creation_date', '‚Äî')
            group = target_order.get('group_name', '‚Äî')
            university = target_order.get('university_name', '‚Äî')
            teacher = target_order.get('teacher_name', '‚Äî')
            gradebook = target_order.get('gradebook', '‚Äî')
            subject = target_order.get('subject', '‚Äî')
            work_type_key = target_order.get('work_type', 'N/A').replace('work_type_', '')
            work_type_str = work_type_key if work_type_key != 'other' else target_order.get('work_type_other_name', '–î—Ä—É–≥–æ–µ')
            guidelines = '‚úÖ –î–∞' if target_order.get('has_guidelines') else '‚ùå –ù–µ—Ç'
            task = '‚úÖ –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ' if target_order.get('task_file') or target_order.get('task_text') else '‚ùå –ù–µ—Ç'
            example = '‚úÖ –î–∞' if target_order.get('has_example') else '‚ùå –ù–µ—Ç'
            deadline = target_order.get('deadline', '‚Äî')
            deadline_str = pluralize_days(deadline) if isinstance(deadline, str) and deadline.isdigit() else deadline
            revision_comment = target_order.get('revision_comment', '‚Äî')
            executor_id = target_order.get('executor_id')
            executor_offer = target_order.get('executor_offers', {})
            executor_full_name = executor_offer.get('executor_full_name')
            if str(executor_id) == str(ADMIN_ID):
                executor_display = '–Ø'
            elif executor_full_name:
                executor_display = executor_full_name
            elif executor_id:
                try:
                    from shared import get_executors_list
                    executors = get_executors_list()
                    executor_display = next((ex.get('name') for ex in executors if str(ex.get('id')) == str(executor_id)), f'ID {executor_id}')
                except Exception:
                    executor_display = f'ID {executor_id}'
            else:
                executor_display = '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'
            details_text = (
                f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {creation_date}\n\n"
                f"–ì—Ä—É–ø–ø–∞: {group}\n"
                f"–í–£–ó: {university}\n"
                f"–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {teacher}\n"
                f"–ù–æ–º–µ—Ä –∑–∞—á–µ—Ç–∫–∏: {gradebook}\n"
                f"–ü—Ä–µ–¥–º–µ—Ç: {subject}\n"
                f"–¢–∏–ø —Ä–∞–±–æ—Ç—ã: {work_type_str}\n"
                f"–ú–µ—Ç–æ–¥–∏—á–∫–∞: {guidelines}\n"
                f"–ó–∞–¥–∞–Ω–∏–µ: {task}\n"
                f"–ü—Ä–∏–º–µ—Ä: {example}\n"
                f"–î–µ–¥–ª–∞–π–Ω: {deadline_str}\n\n"
                f"–î–æ—Ä–∞–±–æ—Ç–∫–∞: {revision_comment}\n"
                f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {executor_display}"
            )
        else:
            # --- –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤–∏–¥ –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è ---
            full_name = get_full_name(target_order)
            header = ""
            if target_order.get('creation_date'):
                header += f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {target_order.get('creation_date')}\n\n"
            group = target_order.get("group_name", "–ù–µ —É–∫–∞–∑–∞–Ω–∞")
            university = target_order.get("university_name", "–ù–µ —É–∫–∞–∑–∞–Ω")
            teacher = target_order.get("teacher_name", "–ù–µ —É–∫–∞–∑–∞–Ω")
            gradebook = target_order.get("gradebook", "–ù–µ —É–∫–∞–∑–∞–Ω")
            subject = target_order.get("subject", "–ù–µ —É–∫–∞–∑–∞–Ω")
            work_type_key = target_order.get("work_type", "N/A").replace("work_type_", "")
            work_type_str = work_type_key if work_type_key != 'other' else target_order.get('work_type_other_name', '–î—Ä—É–≥–æ–µ')
            guidelines = '‚úÖ –î–∞' if target_order.get('has_guidelines') else '‚ùå –ù–µ—Ç'
            task = '‚úÖ –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ' if target_order.get('task_file') or target_order.get('task_text') else '‚ùå –ù–µ—Ç'
            example = '‚úÖ –î–∞' if target_order.get('has_example') else '‚ùå –ù–µ—Ç'
            deadline = target_order.get('deadline', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
            deadline_str = pluralize_days(deadline) if isinstance(deadline, str) and deadline.isdigit() else deadline
            executor_offer = target_order.get('executor_offers', {})
            executor_full_name = executor_offer.get('executor_full_name', '‚Äî')
            revision_comment = target_order.get('revision_comment', '')
            executor_id = target_order.get('executor_id')
            executor_offer = target_order.get('executor_offers', {})
            executor_full_name = executor_offer.get('executor_full_name')
            if str(executor_id) == str(ADMIN_ID):
                executor_display = '–Ø'
            elif executor_full_name:
                executor_display = executor_full_name
            elif executor_id:
                try:
                    from shared import get_executors_list
                    executors = get_executors_list()
                    executor_display = next((ex.get('name') for ex in executors if str(ex.get('id')) == str(executor_id)), f'ID {executor_id}')
                except Exception:
                    executor_display = f'ID {executor_id}'
            else:
                executor_display = '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'
            details_text = f"""{header}–ì—Ä—É–ø–ø–∞: {group}\n–í–£–ó: {university}\n–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {teacher}\n–ù–æ–º–µ—Ä –∑–∞—á–µ—Ç–∫–∏: {gradebook}\n–ü—Ä–µ–¥–º–µ—Ç: {subject}\n–¢–∏–ø —Ä–∞–±–æ—Ç—ã: {work_type_str}\n–ú–µ—Ç–æ–¥–∏—á–∫–∞: {guidelines}\n–ó–∞–¥–∞–Ω–∏–µ: {task}\n–ü—Ä–∏–º–µ—Ä: {example}\n–î–µ–¥–ª–∞–π–Ω: {deadline_str}\n–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {executor_display} - {executor_id}"""
            if revision_comment:
                details_text += f"\n\n–î–æ—Ä–∞–±–æ—Ç–∫–∞: {revision_comment}"

        # --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ---
        buttons = []
        has_files = target_order.get('guidelines_file') or target_order.get('task_file') or target_order.get('task_text') or target_order.get('example_file')
        if executor_is_admin:
            buttons.append([InlineKeyboardButton(text="‚úÖ –°–¥–∞—Ç—å —Ä–∞–±–æ—Ç—É", callback_data=f"admin_admin_submit_work_{order_id}")])
        if has_files:
            buttons.append([InlineKeyboardButton(text="üìé –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∑–∞–∫–∞–∑–∞", callback_data=f"admin_show_materials:{order_id}")])
        buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∑–∞—è–≤–∫–∞–º", callback_data="admin_back")])
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

        try:
            await callback.message.edit_text(details_text, reply_markup=keyboard)
        except Exception:
            await callback.message.answer(details_text, reply_markup=keyboard)
        await callback.answer()
        return
        # --- –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤–∏–¥ –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è ---
    full_name = get_full_name(target_order)
    header = ""
    if target_order.get('creation_date'):
        header += f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {target_order.get('creation_date')}\n\n"
        group = target_order.get("group_name", "–ù–µ —É–∫–∞–∑–∞–Ω–∞")
        university = target_order.get("university_name", "–ù–µ —É–∫–∞–∑–∞–Ω")
        teacher = target_order.get("teacher_name", "–ù–µ —É–∫–∞–∑–∞–Ω")
        gradebook = target_order.get("gradebook", "–ù–µ —É–∫–∞–∑–∞–Ω")
        subject = target_order.get("subject", "–ù–µ —É–∫–∞–∑–∞–Ω")
        work_type_key = target_order.get("work_type", "N/A").replace("work_type_", "")
        work_type_str = work_type_key if work_type_key != 'other' else target_order.get('work_type_other_name', '–î—Ä—É–≥–æ–µ')
        guidelines = '‚úÖ –î–∞' if target_order.get('has_guidelines') else '‚ùå –ù–µ—Ç'
        task = '‚úÖ –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ' if target_order.get('task_file') or target_order.get('task_text') else '‚ùå –ù–µ—Ç'
        example = '‚úÖ –î–∞' if target_order.get('has_example') else '‚ùå –ù–µ—Ç'
        deadline = target_order.get('deadline', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
        deadline_str = pluralize_days(deadline) if isinstance(deadline, str) and deadline.isdigit() else deadline
        executor_offer = target_order.get('executor_offers', {})
        executor_full_name = executor_offer.get('executor_full_name', '‚Äî')
        revision_comment = target_order.get('revision_comment', '')
        # --- –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å ---
        executor_id = target_order.get('executor_id')
        executor_offer = target_order.get('executor_offers', {})
        executor_full_name = executor_offer.get('executor_full_name')
        if str(executor_id) == str(ADMIN_ID):
            executor_display = '–Ø'
        elif executor_full_name:
            executor_display = executor_full_name
        elif executor_id:
            try:
                from shared import get_executors_list
                executors = get_executors_list()
                executor_display = next((ex.get('name') for ex in executors if str(ex.get('id')) == str(executor_id)), f'ID {executor_id}')
            except Exception:
                executor_display = f'ID {executor_id}'
        else:
            executor_display = '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'
        details_text = f"""{header}–ì—Ä—É–ø–ø–∞: {group}\n–í–£–ó: {university}\n–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {teacher}\n–ù–æ–º–µ—Ä –∑–∞—á–µ—Ç–∫–∏: {gradebook}\n–ü—Ä–µ–¥–º–µ—Ç: {subject}\n–¢–∏–ø —Ä–∞–±–æ—Ç—ã: {work_type_str}\n–ú–µ—Ç–æ–¥–∏—á–∫–∞: {guidelines}\n–ó–∞–¥–∞–Ω–∏–µ: {task}\n–ü—Ä–∏–º–µ—Ä: {example}\n–î–µ–¥–ª–∞–π–Ω: {deadline_str}\n–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {executor_display} - {executor_id}"""
        if revision_comment:
            details_text += f"\n\n–î–æ—Ä–∞–±–æ—Ç–∫–∞: {revision_comment}"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ])
        try:
            await callback.message.edit_text(details_text, reply_markup=keyboard)
        except Exception:
            await callback.message.answer(details_text, reply_markup=keyboard)
        await callback.answer()
        return

    else: # --- –û–±—ã—á–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ ---
        summary_text = await build_summary_text(target_order)
        full_name = f"{target_order.get('first_name', '')} {target_order.get('last_name', '')}".strip()
        header = f"\n<b>–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ ‚Ññ{order_id} –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ ({full_name})</b>\n"
        if target_order.get('creation_date'):
            header += f"<b>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</b> {target_order.get('creation_date')}\n"
        details_text = header + "\n" + summary_text
        show_materials_button = bool(
            target_order.get("guidelines_file") or
            target_order.get("task_file") or
            target_order.get("task_text") or
            target_order.get("example_file")
        )
        keyboard = get_admin_order_keyboard(target_order, show_materials_button=True)
        try:
            await callback.message.edit_text(details_text, reply_markup=keyboard, parse_mode="HTML")
        except Exception:
            await callback.message.answer(details_text, reply_markup=keyboard, parse_mode="HTML")

    await callback.answer()


@admin_router.callback_query(F.data.startswith("admin_offer_details_"))
async def admin_offer_details_handler(callback: CallbackQuery, state: FSMContext):
    # –†–∞–∑–¥–µ–ª—è–µ–º callback.data: admin_offer_details_{order_id}_{executor_id}
    try:
        parts = callback.data.split("_")
        # ['admin', 'offer', 'details', '{order_id}', '{executor_id}']
        order_id = int(parts[3])
        executor_id = int(parts[4])
    except Exception:
        await callback.answer("–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö callback.", show_alert=True)
        return

    orders = get_all_orders()
    target_order = next((order for order in orders if order.get('order_id') == order_id), None)
    if not target_order:
        await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    offers = target_order.get('executor_offers', [])
    offer = next((o for o in offers if o.get('executor_id') == executor_id), None)
    if not offer:
        await callback.answer("–û—Ñ—Ñ–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    fio = offer.get('executor_full_name', '–ë–µ–∑ –§–ò–û')
    price = offer.get('price', '‚Äî')
    deadline = offer.get('deadline', 'N/A')
    executor_comment = offer.get('executor_comment', '–ù–µ—Ç')
    subject = target_order.get('subject', '–ù–µ —É–∫–∞–∑–∞–Ω')
    work_type = target_order.get('work_type', 'N/A').replace('work_type_', '')

    # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ä–æ–∫
    try:
        deadline_str = pluralize_days(deadline) if str(deadline).strip().lower() != '–¥–æ –¥–µ–¥–ª–∞–π–Ω–∞' else target_order.get('deadline', '–ù–µ —É–∫–∞–∑–∞–Ω')
    except Exception:
        deadline_str = deadline

    text = (
        f"‚úÖ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å {fio} (ID: {executor_id}) –≥–æ—Ç–æ–≤ –≤–∑—è—Ç—å—Å—è –∑–∞ –∑–∞–∫–∞–∑ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É \"{subject}\"\n\n"
        f"<b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ —É—Å–ª–æ–≤–∏—è:</b>\n"
        f"üí∞ <b>–¶–µ–Ω–∞:</b> {price} ‚ÇΩ\n"
        f"‚è≥ <b>–°—Ä–æ–∫:</b> {deadline_str}\n"
        f"üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:</b> {executor_comment or '–ù–µ—Ç'}"
    )
    keyboard = get_admin_final_approval_keyboard(order_id, price, executor_id)
    try:
        await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
    except Exception:
        await callback.message.answer(text, parse_mode="HTML", reply_markup=keyboard)
    await callback.answer()


@admin_router.callback_query(F.data.startswith("assign_executor_start_"))
async def assign_executor_start_handler(callback: CallbackQuery, state: FSMContext):
    order_id = int(callback.data.split("_")[-1])
    await state.update_data(order_id=order_id)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:", reply_markup=get_executors_assign_keyboard(order_id))
    await callback.answer()

async def send_order_to_executor(message_or_callback, order_id: int, executor_id: int):
    """–ù–∞—Ö–æ–¥–∏—Ç –∑–∞–∫–∞–∑, –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ orders.json)."""
    orders = get_all_orders()
    target_order = None
    for order in orders:            
        if order.get("order_id") == order_id:
            target_order = order
            break
    if not target_order:
        text = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ ‚Ññ{order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."
        if hasattr(message_or_callback, 'message'):
            await message_or_callback.message.answer(text)
        else:
            await message_or_callback.answer(text)
        return

    target_order['status'] = "–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
    target_order['executor_id'] = executor_id
    with open("orders.json", "w", encoding="utf-8") as f:
        json.dump(orders, f, ensure_ascii=False, indent=4)

    work_type = target_order.get('work_type', 'N/A').replace('work_type_', '')
    subject = target_order.get('subject', '–ù–µ —É–∫–∞–∑–∞–Ω')
    deadline = target_order.get('deadline', '–ù–µ —É–∫–∞–∑–∞–Ω')
    executor_caption = (
        f"üì¨ –í–∞–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É <b>{subject}</b>\n\n"
        f"üìù <b>–¢–∏–ø —Ä–∞–±–æ—Ç—ã:</b> {work_type}\n"
        f"üóì <b>–°—Ä–æ–∫ —Å–¥–∞—á–∏:</b> {deadline}\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏ –∑–∞—è–≤–∫–∏ –∏ –ø—Ä–∏–º–∏—Ç–µ —Ä–µ—à–µ–Ω–∏–µ."
    )
    executor_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìé –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∑–∞–∫–∞–∑–∞", callback_data=f"executor_show_materials:{order_id}")],
        [InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤ –≤–∑—è—Ç—å—Å—è", callback_data=f"executor_accept_{order_id}"),
         InlineKeyboardButton(text="‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è", callback_data=f"executor_refuse_{order_id}")],
    ])
    # –ü–æ–ª—É—á–∞–µ–º –§–ò–û –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
    executor_name = "–ë–µ–∑ –§–ò–û"
    for ex in get_executors_list():
        if str(ex.get('id')) == str(executor_id):
            executor_name = ex.get('name') or '–ë–µ–∑ –§–ò–û'
            break
    try:
        await bot.send_message(executor_id, executor_caption, parse_mode="HTML", reply_markup=executor_keyboard)
        success_text = f"‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ –∑–∞–∫–∞–∑—É: '{work_type}'\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é: {executor_name} —Å ID {executor_id}."
        if hasattr(message_or_callback, 'message'):
            await message_or_callback.message.answer(success_text)
        else:
            await message_or_callback.answer(success_text)
    except Exception as e:
        error_text = f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é (ID: {executor_id}).\n\n<b>–û—à–∏–±–∫–∞:</b> {e}"
        target_order['status'] = "–†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç—Å—è"
        target_order.pop('executor_id', None)
        with open("orders.json", "w", encoding="utf-8") as f:
            json.dump(orders, f, ensure_ascii=False, indent=4)
        if hasattr(message_or_callback, 'message'):
            await message_or_callback.message.answer(error_text, parse_mode="HTML")
        else:
            await message_or_callback.answer(error_text, parse_mode="HTML")

@admin_router.callback_query(F.data.startswith("assign_executor_select_"))
async def assign_executor_select_handler(callback: CallbackQuery, state: FSMContext):
    parts = callback.data.split("_")
    order_id = int(parts[3])
    executor_id = int(parts[4])
    await state.clear()
    await send_order_to_executor(callback, order_id, executor_id)
    try:
        await callback.message.delete()
    except Exception:
        pass

@admin_router.callback_query(F.data == "assign_executor_manual")
async def assign_executor_manual_handler(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AssignExecutor.waiting_for_id)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ Telegram ID –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:")
    await callback.answer()

@admin_router.message(AssignExecutor.waiting_for_id)
async def assign_executor_process_id_handler(message: Message, state: FSMContext):
    if message.from_user.id != int(ADMIN_ID): return
    
    if not message.text.isdigit():
        await message.answer("–û—à–∏–±–∫–∞: ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    executor_id = int(message.text)
    data = await state.get_data()
    order_id = data.get('order_id')
    
    # –ù–∞—Ö–æ–¥–∏–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑
    orders = get_all_orders()
    target_order = None
    for order in orders:
        if order.get("order_id") == order_id:
            order['status'] = "–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
            order['executor_id'] = executor_id
            target_order = order
            break

    if not target_order:
        await message.answer("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
        await state.clear()
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
    with open("orders.json", "w", encoding="utf-8") as f:
        json.dump(orders, f, ensure_ascii=False, indent=4)
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö
    await message.answer(f"‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é —Å ID {executor_id} –¥–ª—è –∑–∞–∫–∞–∑–∞ ‚Ññ{order_id}.")
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
    work_type = target_order.get('work_type', 'N/A').replace('work_type_', '')
    subject = target_order.get('subject', '–ù–µ —É–∫–∞–∑–∞–Ω')
    deadline = target_order.get('deadline', '–ù–µ —É–∫–∞–∑–∞–Ω')
    executor_caption = (
        f"üì¨ –í–∞–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É <b>{subject}</b>\n\n"
        f"üìù <b>–¢–∏–ø —Ä–∞–±–æ—Ç—ã:</b> {work_type}\n"
        f"üóì <b>–°—Ä–æ–∫ —Å–¥–∞—á–∏:</b> {deadline}\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏ –∑–∞—è–≤–∫–∏ –∏ –ø—Ä–∏–º–∏—Ç–µ —Ä–µ—à–µ–Ω–∏–µ."
    )
    executor_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìé –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∑–∞–∫–∞–∑–∞", callback_data=f"executor_show_materials:{order_id}")],
        [InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤ –≤–∑—è—Ç—å—Å—è", callback_data=f"executor_accept_{order_id}"),
         InlineKeyboardButton(text="‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è", callback_data=f"executor_refuse_{order_id}")]
    ])
    try:
        await bot.send_message(executor_id, executor_caption, parse_mode="HTML", reply_markup=executor_keyboard)
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é (ID: {executor_id}). –û—à–∏–±–∫–∞: {e}")
        target_order['status'] = "–†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç—Å—è"
        target_order.pop('executor_id', None)
        with open("orders.json", "w", encoding="utf-8") as f:
            json.dump(orders, f, ensure_ascii=False, indent=4)
    await state.clear()

@router.callback_query(F.data.startswith("client_request_revision:"))
async def client_request_revision(callback: CallbackQuery, state: FSMContext):
    order_id = int(callback.data.split(':')[-1])
    orders = get_all_orders()
    target_order = next((o for o in orders if o.get('order_id') == order_id), None)
    if not target_order:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–∫–∞–∑ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É.", show_alert=True)
        return
    # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–µ"
    target_order['status'] = "–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–µ"
    with open("orders.json", "w", encoding="utf-8") as f:
        json.dump(orders, f, ensure_ascii=False, indent=4)
    await state.set_state(ClientRevision.waiting_for_revision_comment)
    await state.update_data(revision_order_id=order_id)
    try:
        await callback.message.edit_text("‚úçÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ, –∫–∞–∫–∏–µ –¥–æ—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–µ–±—É—é—Ç—Å—è. –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é.")
    except Exception:
        await bot.send_message(callback.from_user.id, "‚úçÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ, –∫–∞–∫–∏–µ –¥–æ—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–µ–±—É—é—Ç—Å—è. –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é.") 
    await callback.answer()

def update_order_status_in_gsheet(order_id, new_status):
    creds = Credentials.from_service_account_file("google-credentials.json", scopes=["https://www.googleapis.com/auth/spreadsheets"])
    gc = gspread.authorize(creds)
    sh = gc.open_by_key(GOOGLE_SHEET_ID)
    worksheet = sh.sheet1
    cell = worksheet.find(str(order_id))
    if cell:
        # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ —Å—Ç–∞—Ç—É—Å –≤–æ –≤—Ç–æ—Ä–æ–º —Å—Ç–æ–ª–±—Ü–µ (B)
        worksheet.update_cell(cell.row, 14, new_status)

@router.callback_query(F.data.startswith("client_accept_work:"))
async def client_accept_work(callback: CallbackQuery, state: FSMContext):
    order_id = int(callback.data.split(':')[-1])
    orders = get_all_orders()
    target_order = next((o for o in orders if o.get('order_id') == order_id), None)
    if not target_order:
        await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    target_order['status'] = "–í—ã–ø–æ–ª–Ω–µ–Ω–∞"
    with open("orders.json", "w", encoding="utf-8") as f:
        json.dump(orders, f, ensure_ascii=False, indent=4)

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
    try:
        await callback.message.edit_text("üéâ –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø—Ä–∏–Ω—è–ª–∏ —Ä–∞–±–æ—Ç—É! –†–∞–¥—ã –±—ã–ª–∏ –ø–æ–º–æ—á—å.")
    except Exception:
        await callback.message.answer("üéâ –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø—Ä–∏–Ω—è–ª–∏ —Ä–∞–±–æ—Ç—É! –†–∞–¥—ã –±—ã–ª–∏ –ø–æ–º–æ—á—å.")

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    try:
        subject = target_order.get('subject', '–ù–µ —É–∫–∞–∑–∞–Ω')
        work_type = target_order.get('work_type', '–ù–µ —É–∫–∞–∑–∞–Ω').replace('work_type_', '')
        executor_offer = target_order.get('executor_offers', {})
        if isinstance(executor_offer, list):
            executor_offer = executor_offer[0] if executor_offer else {}
        work_price = 0
        admin_price = 0
        try:
            work_price = float(executor_offer.get('price', 0) or 0)
        except Exception:
            work_price = 0
        try:
            admin_price = float(target_order.get('final_price', 0) or 0)
        except Exception:
            admin_price = 0
        profit = admin_price - work_price
        admin_text = (
            f"‚úÖ –ö–ª–∏–µ–Ω—Ç –ø—Ä–∏–Ω—è–ª —Ä–∞–±–æ—Ç—É –ø–æ –∑–∞–∫–∞–∑—É!\n"
            f"–ü—Ä–µ–¥–º–µ—Ç: {subject}\n"
            f"–¢–∏–ø —Ä–∞–±–æ—Ç—ã: {work_type}\n\n"
            f"–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {profit} ‚ÇΩ"
        )
        await bot.send_message(
            ADMIN_ID,
            admin_text
        )
    except Exception:
        pass

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é (–µ—Å–ª–∏ –Ω–µ –∞–¥–º–∏–Ω)
    executor_id = target_order.get('executor_id')
    if executor_id and str(executor_id) != str(ADMIN_ID):
        try:
            subject = target_order.get('subject', '–ù–µ —É–∫–∞–∑–∞–Ω')
            work_type = target_order.get('work_type', '–ù–µ —É–∫–∞–∑–∞–Ω').replace('work_type_', '')
            executor_offer = target_order.get('executor_offers', {})
            if isinstance(executor_offer, list):
                executor_offer = executor_offer[0] if executor_offer else {}
            work_price = 0
            try:
                work_price = float(executor_offer.get('price', 0) or 0)
            except Exception:
                work_price = 0
            executor_text = (
                f"‚úÖ –ö–ª–∏–µ–Ω—Ç –ø—Ä–∏–Ω—è–ª —Ä–∞–±–æ—Ç—É –ø–æ –∑–∞–∫–∞–∑—É!\n"
                f"–ü—Ä–µ–¥–º–µ—Ç: {subject}\n"
                f"–¢–∏–ø —Ä–∞–±–æ—Ç—ã: {work_type}\n\n"
                f"–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {work_price} ‚ÇΩ"
            )
            await bot.send_message(
                executor_id,
                executor_text
            )
        except Exception:
            pass

    await callback.answer()
@router.message(ClientRevision.waiting_for_revision_comment)
async def process_revision_comment(message: Message, state: FSMContext):
    data = await state.get_data()
    order_id = data.get('revision_order_id')
    revision_comment = message.text
    orders = get_all_orders()
    target_order = next((o for o in orders if o.get('order_id') == order_id), None)
    if not target_order:
        await message.answer("–û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ –∑–∞–∫–∞–∑
    target_order['revision_comment'] = revision_comment
    target_order['status'] = "–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–µ"
    with open("orders.json", "w", encoding="utf-8") as f:
        json.dump(orders, f, ensure_ascii=False, indent=4)
    # --- –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ---
    subject = target_order.get('subject', '–ù–µ —É–∫–∞–∑–∞–Ω')
    work_type_raw = target_order.get('work_type', '–ù–µ —É–∫–∞–∑–∞–Ω')
    work_type = work_type_raw.replace('work_type_', '') if isinstance(work_type_raw, str) and work_type_raw.startswith('work_type_') else work_type_raw
    from shared import ADMIN_ID
    executor_id = target_order.get('executor_id')
    # --- –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ---
    if executor_id and str(executor_id) != str(ADMIN_ID):
        admin_text = (
            f"‚úçÔ∏è –ö–ª–∏–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –¥–æ—Ä–∞–±–æ—Ç–∫–µ –ø–æ –∑–∞–∫–∞–∑—É ‚Ññ{order_id}:\n"
            f"–ü—Ä–µ–¥–º–µ—Ç: {subject}\n"
            f"–¢–∏–ø —Ä–∞–±–æ—Ç—ã: {work_type}\n\n"
            f"–°–æ–æ–±—â–µ–Ω–∏–µ: {revision_comment}\n"
            f"–°—Ç–∞—Ç—É—Å –ø–µ—Ä–µ—à–µ–ª –≤ –¥–æ—Ä–∞–±–æ—Ç–∫—É, –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
            f"–û–∂–∏–¥–∞–µ–º –¥–æ—Ä–∞–±–æ—Ç–∫—É –æ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"
        )
        admin_keyboard = None
    else:
        admin_text = (
            f"‚úçÔ∏è –ö–ª–∏–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –¥–æ—Ä–∞–±–æ—Ç–∫–µ –ø–æ –∑–∞–∫–∞–∑—É ‚Ññ{order_id}:\n"
            f"–ü—Ä–µ–¥–º–µ—Ç: {subject}\n"
            f"–¢–∏–ø —Ä–∞–±–æ—Ç—ã: {work_type}\n\n"
            f"–°–æ–æ–±—â–µ–Ω–∏–µ: {revision_comment}"
        )
        admin_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìÉ –ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–∫–∞–∑—É", callback_data=f"admin_view_order_{order_id}")]
        ])
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    try:
        await bot.send_message(ADMIN_ID, admin_text, reply_markup=admin_keyboard)
    except Exception:
        pass
    # --- –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è ---
    if executor_id and str(executor_id) != str(ADMIN_ID):
        executor_text = (
            f"‚úçÔ∏è –ö–ª–∏–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –¥–æ—Ä–∞–±–æ—Ç–∫–µ –ø–æ –∑–∞–∫–∞–∑—É ‚Ññ{order_id}:\n"
            f"–ü—Ä–µ–¥–º–µ—Ç: {subject}\n"
            f"–¢–∏–ø —Ä–∞–±–æ—Ç—ã: {work_type}\n\n"
            f"–°–æ–æ–±—â–µ–Ω–∏–µ: {revision_comment}"
        )
        executor_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìÉ –ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–∫–∞–∑—É", callback_data=f"executor_view_order_{order_id}")]
        ])
        try:
            await bot.send_message(
                executor_id,
                executor_text,
                reply_markup=executor_keyboard
            )
        except Exception:
            pass
    await message.answer("‚úÖ –í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ –¥–æ—Ä–∞–±–æ—Ç–∫–∏.")
    await state.clear()

async def send_order_files_to_user(user_id: int, order_data: dict, with_details: bool = True):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ –∑–∞–∫–∞–∑–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    if with_details:
        details_text = await build_summary_text(order_data)
        await bot.send_message(user_id, "<b>–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:</b>\n\n" + details_text, parse_mode="HTML")

    async def send_file(file_data, caption):
        if not file_data: return
        if file_data['type'] == 'photo':
            await bot.send_photo(user_id, file_data['id'], caption=caption)
        else:
            await bot.send_document(user_id, file_data['id'], caption=caption)

    await send_file(order_data.get('guidelines_file'), "üìÑ –ú–µ—Ç–æ–¥–∏—á–∫–∞")
    
    if order_data.get('task_file'):
        await send_file(order_data.get('task_file'), "üìë –ó–∞–¥–∞–Ω–∏–µ")
    elif order_data.get('task_text'):
        await bot.send_message(user_id, f"üìë –¢–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è:\n\n{order_data['task_text']}")
    
    await send_file(order_data.get('example_file'), "üìÑ –ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã")
# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
def get_full_name(user_or_dict):
    if isinstance(user_or_dict, dict):
        first = user_or_dict.get('first_name', '')
        last = user_or_dict.get('last_name', '')
    else:
        first = getattr(user_or_dict, 'first_name', '')
        last = getattr(user_or_dict, 'last_name', '')
    full = f"{first} {last}".strip()
    return full if full else "–ë–µ–∑ –∏–º–µ–Ω–∏"
# --- –õ–æ–≥–∏–∫–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è ---
@executor_router.callback_query(F.data.startswith("executor_accept_"))
async def executor_accept_handler(callback: CallbackQuery, state: FSMContext):
    order_id = int(callback.data.split("_")[-1])
    orders = get_all_orders()
    target_order = None
    for o in orders:
        if o.get("order_id") == order_id:
            # –ù–µ –Ω–∞–∑–Ω–∞—á–∞–µ–º executor_id!
            target_order = o
            break
    if not target_order:
        await callback.answer("–≠—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É–∂–µ –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω–æ.", show_alert=True)
        return
    await state.set_state(ExecutorResponse.waiting_for_price)
    await state.update_data(order_id=order_id)
    await callback.message.edit_text("–û—Ç–ª–∏—á–Ω–æ! –£–∫–∞–∂–∏—Ç–µ –≤–∞—à—É —Ü–µ–Ω—É:", reply_markup=get_price_keyboard(order_id))
    await callback.answer()

@executor_router.callback_query(F.data.startswith("price_"), ExecutorResponse.waiting_for_price)
async def executor_price_handler(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    order_id = data.get('order_id')
    if callback.data == "price_manual":
        await callback.message.edit_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤—Ä—É—á–Ω—É—é (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):", reply_markup=get_price_keyboard(order_id))
        return
    price = callback.data.split("_")[-1]
    await state.update_data(price=price)
    await state.set_state(ExecutorResponse.waiting_for_deadline)
    # –ü–æ–ª—É—á–∞–µ–º –¥–µ–¥–ª–∞–π–Ω –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
    from shared import get_all_orders
    orders = get_all_orders()
    order = next((o for o in orders if o.get('order_id') == order_id), None)
    client_deadline = order.get('deadline', '–ù–µ —É–∫–∞–∑–∞–Ω') if order else '–ù–µ —É–∫–∞–∑–∞–Ω'
    text = f"–¶–µ–Ω–∞ –ø—Ä–∏–Ω—è—Ç–∞. –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ‚è≥\n–î–µ–¥–ª–∞–π–Ω: –¥–æ {client_deadline}"
    await callback.message.edit_text(text, reply_markup=get_deadline_keyboard())
    await callback.answer()

@executor_router.message(ExecutorResponse.waiting_for_price)
async def executor_price_manual_handler(message: Message, state: FSMContext):
    data = await state.get_data()
    order_id = data.get('order_id')
    if not message.text.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ.", reply_markup=get_price_keyboard(order_id))
        return
    await state.update_data(price=message.text)
    await state.set_state(ExecutorResponse.waiting_for_deadline)
    await message.answer("–¶–µ–Ω–∞ –ø—Ä–∏–Ω—è—Ç–∞. –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:", reply_markup=get_deadline_keyboard())

@executor_router.callback_query(F.data.startswith("deadline_"), ExecutorResponse.waiting_for_deadline)
async def executor_deadline_handler(callback: CallbackQuery, state: FSMContext):
    if callback.data == "deadline_manual":
        await callback.message.edit_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Ä—É—á–Ω—É—é(–≤ –¥–Ω—è—Ö):")
        return
    deadline = callback.data.split("_", 1)[-1]
    await state.update_data(deadline=deadline)
    await state.set_state(ExecutorResponse.waiting_for_comment)
    await callback.message.edit_text("–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —à–∞–≥):", reply_markup=get_executor_comment_keyboard())
    await callback.answer()
def get_executor_comment_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_executor_comment")]
    ])

@executor_router.message(ExecutorResponse.waiting_for_deadline)
async def executor_deadline_manual_handler(message: Message, state: FSMContext):
    await state.update_data(deadline=message.text)
    await state.set_state(ExecutorResponse.waiting_for_comment)
    await message.answer("–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —à–∞–≥):", reply_markup=get_executor_comment_keyboard())

# --- –ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ---
@executor_router.message(ExecutorResponse.waiting_for_comment)
async def executor_comment_handler(message: Message, state: FSMContext):
    await state.update_data(executor_comment=message.text)
    fsm_data = await state.get_data()
    order_id = fsm_data.get('order_id')
    price = fsm_data.get('price', '‚Äî')
    deadline = fsm_data.get('deadline', '‚Äî')
    comment = fsm_data.get('executor_comment', '')
    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω '–î–æ –¥–µ–¥–ª–∞–π–Ω–∞', –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º —Å—Ä–æ–∫ —Å–¥–∞—á–∏ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
    if str(deadline).strip().lower() == '–¥–æ –¥–µ–¥–ª–∞–π–Ω–∞':
        from shared import get_all_orders
        orders = get_all_orders()
        order = next((o for o in orders if o.get('order_id') == order_id), None)
        deadline_str = order.get('deadline', '–ù–µ —É–∫–∞–∑–∞–Ω') if order else '–ù–µ —É–∫–∞–∑–∞–Ω'
    else:
        def _pluralize_days(val):
            try:
                n = int(val)
                if 11 <= n % 100 <= 14:
                    return f"{n} –¥–Ω–µ–π"
                elif n % 10 == 1:
                    return f"{n} –¥–µ–Ω—å"
                elif 2 <= n % 10 <= 4:
                    return f"{n} –¥–Ω—è"
                else:
                    return f"{n} –¥–Ω–µ–π"
            except Exception:
                return str(val)
        deadline_str = _pluralize_days(deadline)
    text = f"<b>‚ùóÔ∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–∏ —É—Å–ª–æ–≤–∏—è:</b>\n\n" \
           f"<b>üè∑ –¶–µ–Ω–∞:</b> {price} ‚ÇΩ\n\n" \
           f"<b>üóì –°—Ä–æ–∫:</b> {deadline_str}\n\n" \
           f"<b>üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {comment or '–ù–µ—Ç'}"
    await state.set_state(ExecutorResponse.waiting_for_confirm)
    await message.answer(text, parse_mode="HTML", reply_markup=get_executor_final_confirm_keyboard(order_id))

@executor_router.callback_query(F.data == "skip_executor_comment", ExecutorResponse.waiting_for_comment)
async def executor_skip_comment_handler(callback: CallbackQuery, state: FSMContext):
    await state.update_data(executor_comment="")
    fsm_data = await state.get_data()
    order_id = fsm_data.get('order_id')
    price = fsm_data.get('price', '‚Äî')
    deadline = fsm_data.get('deadline', '‚Äî')
    comment = ''
    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω '–î–æ –¥–µ–¥–ª–∞–π–Ω–∞', –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º —Å—Ä–æ–∫ —Å–¥–∞—á–∏ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
    if str(deadline).strip().lower() == '–¥–æ –¥–µ–¥–ª–∞–π–Ω–∞':
       
        orders = get_all_orders()
        order = next((o for o in orders if o.get('order_id') == order_id), None)
        deadline_str = order.get('deadline', '–ù–µ —É–∫–∞–∑–∞–Ω') if order else '–ù–µ —É–∫–∞–∑–∞–Ω'
    else:
        def _pluralize_days(val):
            try:
                n = int(val)
                if 11 <= n % 100 <= 14:
                    return f"{n} –¥–Ω–µ–π"
                elif n % 10 == 1:
                    return f"{n} –¥–µ–Ω—å"
                elif 2 <= n % 10 <= 4:
                    return f"{n} –¥–Ω—è"
                else:
                    return f"{n} –¥–Ω–µ–π"
            except Exception:
                return str(val)
        deadline_str = _pluralize_days(deadline)
    text = f"<b>‚ùóÔ∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–∏ —É—Å–ª–æ–≤–∏—è:</b>\n\n" \
           f"<b>üè∑ –¶–µ–Ω–∞:</b> {price} ‚ÇΩ\n\n" \
           f"<b>üóì –°—Ä–æ–∫:</b> {deadline_str}\n\n" \
           f"<b>üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> –ù–µ—Ç"
    await state.set_state(ExecutorResponse.waiting_for_confirm)
    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=get_executor_final_confirm_keyboard(order_id))
    await callback.answer()

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å' ---
@executor_router.callback_query(F.data.startswith("executor_send_offer:"), ExecutorResponse.waiting_for_confirm)
async def executor_send_offer_handler(callback: CallbackQuery, state: FSMContext):
    fsm_data = await state.get_data()
    # –ù–∞–∑–Ω–∞—á–∞–µ–º executor_id –∏ executor_offer —Ç–æ–ª—å–∫–æ –∑–¥–µ—Å—å
    order_id = fsm_data['order_id']
    price = fsm_data['price']
    deadline = fsm_data['deadline']
    executor_comment = fsm_data.get('executor_comment', '')
    orders = get_all_orders()
    for order in orders:
        if order.get("order_id") == order_id:
            order['status'] = "–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
            # --- –ù–æ–≤—ã–π –±–ª–æ–∫: –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ñ—Ñ–µ—Ä –≤ —Å–ø–∏—Å–æ–∫ ---
            offers = order.get('executor_offers', [])
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –æ—Ñ—Ñ–µ—Ä –æ—Ç —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
            found = False
            for i, offer in enumerate(offers):
                if offer.get('executor_id') == callback.from_user.id:
                    offers[i] = {
                        'price': price,
                        'deadline': deadline,
                        'executor_id': callback.from_user.id,
                        'executor_username': callback.from_user.username,
                        'executor_full_name': get_full_name(callback.from_user),
                        'executor_comment': executor_comment
                    }
                    found = True
                    break
            if not found:
                offers.append({
                    'price': price,
                    'deadline': deadline,
                    'executor_id': callback.from_user.id,
                    'executor_username': callback.from_user.username,
                    'executor_full_name': get_full_name(callback.from_user),
                    'executor_comment': executor_comment
                })
            order['executor_offers'] = offers
            break
    with open("orders.json", "w", encoding="utf-8") as f:
        json.dump(orders, f, ensure_ascii=False, indent=4)
    await send_offer_to_admin(callback.from_user, fsm_data)
    await callback.message.edit_text("‚úÖ –í–∞—à–∏ —É—Å–ª–æ–≤–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
    await state.clear()
    await callback.answer()



@executor_router.message(ExecutorResponse.waiting_for_comment)
async def executor_comment_handler(message: Message, state: FSMContext):
    await state.update_data(executor_comment=message.text)
    fsm_data = await state.get_data()
    await send_offer_to_admin(message.from_user, fsm_data)
    await message.answer("‚úÖ –í–∞—à–∏ —É—Å–ª–æ–≤–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
    await state.clear()

@executor_router.callback_query(F.data == "skip_executor_comment", ExecutorResponse.waiting_for_comment)
async def executor_skip_comment_handler(callback: CallbackQuery, state: FSMContext):
    await state.update_data(executor_comment="")
    fsm_data = await state.get_data()
    await send_offer_to_admin(callback.from_user, fsm_data)
    await callback.message.edit_text("‚úÖ –í–∞—à–∏ —É—Å–ª–æ–≤–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
    await state.clear()
    await callback.answer()



# --- –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –∞–¥–º–∏–Ω–∞ –¥–ª—è —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ---

@admin_router.callback_query(F.data.startswith("final_change_price_"))
async def admin_change_price_start(callback: CallbackQuery, state: FSMContext):
    order_id = int(callback.data.split("_")[-1])
    await state.set_state(AdminApproval.waiting_for_new_price)
    await state.update_data(order_id=order_id, message_id=callback.message.message_id)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):")
    await callback.answer()

@admin_router.message(AdminApproval.waiting_for_new_price)
async def admin_process_new_price(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ.")
        return

    new_admin_price = int(message.text)
    fsm_data = await state.get_data()
    order_id = fsm_data.get('order_id')
    message_id = fsm_data.get('message_id')

    # –û–±–Ω–æ–≤–ª—è–µ–º JSON
    orders = get_all_orders()
    executor_full_name = ''
    executor_deadline = ''
    executor_price = None
    for order in orders:
        if order.get("order_id") == order_id:
            # --- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –ø–æ–¥–¥–µ—Ä–∂–∫–∞ executor_offers –∫–∞–∫ —Å–ø–∏—Å–∫–∞ –∏ dict ---
            offer = order.get('executor_offers')
            if isinstance(offer, list):
                if offer:
                    offer = offer[0]
                else:
                    await message.answer("–ù–µ—Ç –æ—Ñ—Ñ–µ—Ä–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã.")
                    return
            elif not offer:
                offers = order.get('executor_offers', [])
                if offers:
                    offer = offers[0]
                else:
                    await message.answer("–ù–µ—Ç –æ—Ñ—Ñ–µ—Ä–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã.")
                    return
            executor_price = int(offer.get('price', 0))
            offer['admin_price'] = new_admin_price
            executor_full_name = offer.get('executor_full_name', '–ë–µ–∑ –∏–º–µ–Ω–∏')
            executor_deadline = offer.get('deadline', 'N/A')
            break
    with open("orders.json", "w", encoding="utf-8") as f:
        json.dump(orders, f, ensure_ascii=False, indent=4)
    # –°—Ä–æ–∫: –µ—Å–ª–∏ '–î–æ –¥–µ–¥–ª–∞–π–Ω–∞', –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º —Å—Ä–æ–∫ –∫–ª–∏–µ–Ω—Ç–∞
    if str(executor_deadline).strip().lower() == '–¥–æ –¥–µ–¥–ª–∞–π–Ω–∞':
        for order in orders:
            if order.get("order_id") == order_id:
                executor_deadline_str = order.get('deadline', '–ù–µ —É–∫–∞–∑–∞–Ω')
                break
        else:
            executor_deadline_str = '–ù–µ —É–∫–∞–∑–∞–Ω'
    else:
        executor_deadline_str = pluralize_days(executor_deadline)
    # –ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞
    if new_admin_price == 0:
        total_price = executor_price
    else:
        total_price = new_admin_price
    admin_notification = f"""
‚úÖ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å {executor_full_name} –≥–æ—Ç–æ–≤ –≤–∑—è—Ç—å—Å—è –∑–∞ –∑–∞–∫–∞–∑ ‚Ññ{order_id}

<b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ —É—Å–ª–æ–≤–∏—è (—Ü–µ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∞):</b>\n
üí∞ <b>–¶–µ–Ω–∞ –æ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:</b> {executor_price} ‚ÇΩ\n
üíº <b>–ú–æ—è —Ü–µ–Ω–∞:</b> {new_admin_price} ‚ÇΩ\n
üßÆ <b>–ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞:</b> {total_price} ‚ÇΩ\n
‚è≥ <b>–°—Ä–æ–∫:</b> –¥–æ {executor_deadline_str}
"""
    await bot.edit_message_text(
        admin_notification, 
        chat_id=message.chat.id,
        message_id=message_id,
        parse_mode="HTML",
        reply_markup=get_admin_final_approval_keyboard(order_id, total_price, show_materials_button=False)
    )
    await message.delete() # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π —Ü–µ–Ω–æ–π –æ—Ç –∞–¥–º–∏–Ω–∞
    await state.clear()


@admin_router.callback_query(F.data.startswith("final_approve_"))
async def admin_final_approve(callback: CallbackQuery, state: FSMContext):
    parts = callback.data.split("_")
    order_id = int(parts[2])
    price = int(parts[3])
    executor_id = int(parts[4]) if len(parts) > 4 else None
    orders = get_all_orders()
    target_order = None
    for order in orders:
        if order.get("order_id") == order_id:
            order['status'] = "–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã"
            order['final_price'] = price
            # --- –ù–æ–≤—ã–π –±–ª–æ–∫: –ø–µ—Ä–µ–Ω–æ—Å–∏–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ—Ñ—Ñ–µ—Ä –≤ executor_offer, –æ—Å—Ç–∞–ª—å–Ω—ã–µ —É–¥–∞–ª—è–µ–º ---
            if executor_id is not None and order.get('executor_offers'):
                # –ù–∞–π—Ç–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ—Ñ—Ñ–µ—Ä
                selected_offer = None
                for offer in order['executor_offers']:
                    if offer.get('executor_id') == executor_id:
                        selected_offer = offer
                        break
                if selected_offer:
                    order['executor_offers'] = selected_offer
                    order['executor_id'] = executor_id
                # –£–¥–∞–ª—è–µ–º executor_offers –ø–æ–ª–Ω–æ—Å—Ç—å—é
                if 'executor_offers' in order:
                    del order['executor_offers']
            target_order = order
            break
    if not target_order:
        await callback.answer("–û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    with open("orders.json", "w", encoding="utf-8") as f:
        json.dump(orders, f, ensure_ascii=False, indent=4)
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
    customer_id = target_order.get('user_id')
    if customer_id:
        offer = target_order.get('executor_offers', {})
        if isinstance(offer, list):
            offer = offer[0] if offer else {}
        deadline = offer.get('deadline') or target_order.get('deadline', '')
        if str(deadline).strip().lower() == '–¥–æ –¥–µ–¥–ª–∞–π–Ω–∞':
            deadline_str = target_order.get('deadline', '–ù–µ —É–∫–∞–∑–∞–Ω')
        else:
            deadline_str = pluralize_days(deadline) if isinstance(deadline, str) and deadline.isdigit() else deadline
        work_type = target_order.get('work_type', 'N/A').replace('work_type_', '')
        subject = target_order.get('subject', '–ù–µ —É–∫–∞–∑–∞–Ω')
        customer_text = f"""
‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É \"{subject}\"\n–¢–∏–ø —Ä–∞–±–æ—Ç—ã: {work_type}\n–î–µ–¥–ª–∞–π–Ω: –¥–æ {deadline_str}

<b>–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</b> {price} ‚ÇΩ.\n<b>–°—Ä–æ–∫:</b> –¥–æ {deadline_str}
"""
        payment_button = InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", callback_data=f"pay_{order_id}")
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[payment_button]])
        try:
            await bot.send_message(customer_id, customer_text, parse_mode="HTML", reply_markup=keyboard)
        except Exception:
            await callback.message.answer(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ {customer_id}")
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é
    executor_offer = target_order.get('executor_offers', {})
    if isinstance(executor_offer, list):
        executor_offer = executor_offer[0] if executor_offer else {}
    executor_id = executor_offer.get('executor_id')
    if executor_id:
        try:
            subject = target_order.get('subject', '–ù–µ —É–∫–∞–∑–∞–Ω')
            await bot.send_message(executor_id, f'‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Ç–≤–µ—Ä–¥–∏–ª –≤–∞—à–∏ —É—Å–ª–æ–≤–∏—è –ø–æ –∑–∞–∫–∞–∑—É.\n–ü—Ä–µ–¥–º–µ—Ç: "{subject}"\n–û–∂–∏–¥–∞–µ–º –æ–ø–ª–∞—Ç—É –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞.')
        except Exception:
            await callback.message.answer(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è {executor_id}")
    await callback.message.edit_text(f"‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ –∑–∞–∫–∞–∑—É ‚Ññ{order_id} –Ω–∞ —Å—É–º–º—É {price} ‚ÇΩ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É. –û–∂–∏–¥–∞–µ–º –æ–ø–ª–∞—Ç—É...")
    await callback.answer()


@admin_router.callback_query(F.data.startswith("final_reject_"))
async def admin_final_reject(callback: CallbackQuery, state: FSMContext):
    # –ü–∞—Ä—Å–∏–º callback –¥–∞–Ω–Ω—ã–µ: final_reject_{order_id} –∏–ª–∏ final_reject_{order_id}_{executor_id}
    parts = callback.data.split("_")
    if len(parts) >= 3:
        order_id = int(parts[2])  # final_reject_{order_id}
        executor_id_from_callback = int(parts[3]) if len(parts) > 3 else None  # final_reject_{order_id}_{executor_id}
    else:
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return
    
    orders = get_all_orders()
    target_order = None
    executor_id = None
    
    # –ù–∞—Ö–æ–¥–∏–º –∑–∞–∫–∞–∑ –∏ –ø–æ–ª—É—á–∞–µ–º executor_id, –Ω–æ –ù–ï –∏–∑–º–µ–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    for order in orders:
        if order.get("order_id") == order_id:
            target_order = order
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º executor_id –∏–∑ callback, –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –ø–æ–ª—É—á–∞–µ–º –∏–∑ executor_offers
            if executor_id_from_callback:
                executor_id = executor_id_from_callback
            else:
                executor_offers = order.get('executor_offers')
                if isinstance(executor_offers, dict):
                    executor_id = executor_offers.get('executor_id')
                elif isinstance(executor_offers, list) and executor_offers:
                    executor_id = executor_offers[0].get('executor_id')
            break
    
    if not target_order:
        await callback.answer("–û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if executor_id:
        try:
            await bot.send_message(executor_id, f"‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–∫–ª–æ–Ω–∏–ª –≤–∞—à–∏ —É—Å–ª–æ–≤–∏—è –ø–æ –∑–∞–∫–∞–∑—É ‚Ññ{order_id}.")
        except Exception:
            pass # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    await callback.message.edit_text(f"‚ùå –í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –ø–æ –∑–∞–∫–∞–∑—É ‚Ññ{order_id}. –ó–∞–∫–∞–∑ —Å–Ω–æ–≤–∞ –≤ –ø–æ–∏—Å–∫–µ.")
    
    # –¢–û–õ–¨–ö–û –ü–û–°–õ–ï –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    target_order['status'] = "–†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç—Å—è"
    target_order.pop('executor_id', None)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º executor_offers
    if 'executor_offers' in target_order:
        executor_offers = target_order['executor_offers']
        if executor_id_from_callback and isinstance(executor_offers, list):
            # –£–¥–∞–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –æ—Ñ—Ñ–µ—Ä –ø–æ executor_id
            target_order['executor_offers'] = [
                offer for offer in executor_offers 
                if offer.get('executor_id') != executor_id_from_callback
            ]
            # –ï—Å–ª–∏ –æ—Ñ—Ñ–µ—Ä–æ–≤ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å, —É–¥–∞–ª—è–µ–º –ø–æ–ª–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é
            if not target_order['executor_offers']:
                target_order.pop('executor_offers', None)
        else:
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ –æ—Ñ—Ñ–µ—Ä—ã (—Å—Ç–∞—Ä–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ)
            target_order.pop('executor_offers', None)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    with open("orders.json", "w", encoding="utf-8") as f:
        json.dump(orders, f, ensure_ascii=False, indent=4)
    
    await callback.answer()

@admin_router.callback_query(F.data.startswith("admin_approve_work_"))
async def admin_approve_work_handler(callback: CallbackQuery, state: FSMContext):
    order_id = int(callback.data.split('_')[-1])
    orders = get_all_orders()
    target_order = next((o for o in orders if o.get('order_id') == order_id), None)

    if not target_order or 'submitted_work' not in target_order:
        await callback.answer("–†–∞–±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –±—ã–ª–∞ –æ—Ç–æ–∑–≤–∞–Ω–∞.", show_alert=True)
        return

    # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å
    target_order['status'] = "–£—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
    with open("orders.json", "w", encoding="utf-8") as f:
        json.dump(orders, f, ensure_ascii=False, indent=4)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç—É
    customer_id = target_order.get('user_id')
    submitted_work = target_order.get('submitted_work')
    submitted_at = target_order.get('submitted_at', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')

    if customer_id and submitted_work:
        try:
            subject = target_order.get('subject', '–ù–µ —É–∫–∞–∑–∞–Ω')
            work_type = target_order.get('work_type', '–ù–µ —É–∫–∞–∑–∞–Ω').replace('work_type_', '')
            caption = f"‚úÖ –í–∞—à–∞ —Ä–∞–±–æ—Ç–∞ –ø–æ –∑–∞–∫–∞–∑—É –≥–æ—Ç–æ–≤–∞!\n–ü—Ä–µ–¥–º–µ—Ç: {subject}\n–¢–∏–ø —Ä–∞–±–æ—Ç—ã: {work_type}\n–î–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {submitted_at}"
            keyboard = get_client_work_approval_keyboard(order_id)
            await bot.send_document(
                chat_id=customer_id,
                document=submitted_work['file_id'],
                caption=caption,
                reply_markup=keyboard
            )
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∞–π–ª–æ–º —Ä–∞–±–æ—Ç—ã —É –∞–¥–º–∏–Ω–∞, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
            try:
                await callback.message.delete()
            except Exception:
                pass
        except Exception as e:
            await callback.message.edit_text(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –∫–ª–∏–µ–Ω—Ç—É {customer_id}. –û—à–∏–±–∫–∞: {e}")
            return
    else:
        await callback.message.edit_text("–§–∞–π–ª —Ä–∞–±–æ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª–∏–µ–Ω—Ç—É.")
        return

    # –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
    try:
        await bot.send_message(callback.from_user.id, "‚úÖ –ó–∞–∫–∞–∑ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω! –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–∫–∞–∑—á–∏–∫—É")
    except Exception:
        pass
    await callback.answer()

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º –ø–æ –¥–æ—Ä–∞–±–æ—Ç–∫–µ ---
@admin_router.message(AdminRevision.waiting_for_revision_comment)
async def admin_revision_comment_handler(message: Message, state: FSMContext):
    data = await state.get_data()
    order_id = data.get('order_id')
    revision_comment = message.text
    orders = get_all_orders()
    target_order = next((o for o in orders if o.get('order_id') == order_id), None)
    if not target_order:
        await message.answer("–û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return
    target_order['revision_comment'] = revision_comment
    target_order['status'] = "–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–µ"
    with open("orders.json", "w", encoding="utf-8") as f:
        json.dump(orders, f, ensure_ascii=False, indent=4)
    executor_id = target_order.get('executor_id')
    subject = target_order.get('subject', '–ù–µ —É–∫–∞–∑–∞–Ω')
    work_type = target_order.get('work_type', '–ù–µ —É–∫–∞–∑–∞–Ω').replace('work_type_', '')
    text = (
        f"‚ùóÔ∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ –ø–æ –∑–∞–∫–∞–∑—É\n"
        f"–ü—Ä–µ–¥–º–µ—Ç: {subject}\n"
        f"–¢–∏–ø —Ä–∞–±–æ—Ç—ã: {work_type}\n"
        f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ —Ä–∞–±–æ—Ç–µ: {revision_comment}"
    )
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–∫–∞–∑—É", callback_data=f"executor_view_order_{order_id}")]
    ])
    if executor_id:
        try:
            await bot.send_message(executor_id, text, reply_markup=keyboard)
        except Exception as e:
            await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é: {e}")
    else:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞.")
    await message.answer("‚úÖ–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é\n\nüìÉ–ó–∞–∫–∞–∑ –ø–µ—Ä–µ–≤–µ–¥—ë–Ω –≤ —Å—Ç–∞—Ç—É—Å '–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–µ'.")
    await state.clear()
# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é ---

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É' ---
@admin_router.callback_query(F.data.startswith("admin_reject_work_"))
async def admin_reject_work_handler(callback: CallbackQuery, state: FSMContext):
    order_id = int(callback.data.split("_")[-1])
    orders = get_all_orders()
    target_order = next((o for o in orders if o.get('order_id') == order_id), None)
    if not target_order:
        await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
    target_order['status'] = "–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–µ"
    with open("orders.json", "w", encoding="utf-8") as f:
        json.dump(orders, f, ensure_ascii=False, indent=4)
    await state.set_state(AdminRevision.waiting_for_revision_comment)
    await state.update_data(order_id=order_id)
    await bot.send_message(callback.from_user.id, "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ –¥–æ—Ä–∞–±–æ—Ç–∫–µ –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:")
    await callback.answer()



@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    from shared import ADMIN_ID
    if message.from_user.id == int(ADMIN_ID):
        await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!",
            reply_markup=get_admin_keyboard()
        )
        return
    # –ï—Å–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ –º–µ–Ω—é
    if is_executor(message.from_user.id):
        await message.answer(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω—é –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è!",
            reply_markup=get_executor_menu_keyboard()
        )
        return
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –≤ –ø—Ä–æ—Ñ–∏–ª–µ (–∏–ª–∏ –≤ –±–∞–∑–µ FSM)
    data = await state.get_data()
    phone = data.get("phone_number")
    if not phone:
        await state.set_state("waiting_for_phone")
        await message.answer(
            "üôè –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞.",
            reply_markup=get_phone_request_keyboard()
        )
        return
    # –ï—Å–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω —É–∂–µ –µ—Å—Ç—å ‚Äî —Ç–æ–ª—å–∫–æ —Ç–æ–≥–¥–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –º–µ–Ω—é
    await message.answer(
        "üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –±–æ—Ç –¥–ª—è –ø—Ä–∏–µ–º–∞ –∑–∞—è–≤–æ–∫. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ.",
        reply_markup=get_main_reply_keyboard()
    )
@router.message(StateFilter("waiting_for_phone"), F.contact)
async def process_phone_number(message: Message, state: FSMContext):
    phone = message.contact.phone_number
    await state.update_data(phone_number=phone)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ users.json
    save_user_phone(message.from_user.id, phone)
    await state.clear()
    await message.answer(
        "üéâ –°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–ª—è—Ç—å –∑–∞—è–≤–∫–∏.",
        reply_markup=get_main_reply_keyboard()
    )
@router.message(F.text == "‚ùì –ü–æ–º–æ—â—å")
async def txt_help(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        '‚ÑπÔ∏è –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞" –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É.'
    )

@router.message(F.text == "üë®‚Äçüíª –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
async def txt_contact_admin(message: Message, state: FSMContext):
    await state.clear()
    await state.set_state(AdminContact.waiting_for_message)
    await message.answer(
        "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –æ—Ç–ø—Ä–∞–≤–ª—é –µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
        reply_markup=get_back_to_main_menu_keyboard()
    )

@router.message(AdminContact.waiting_for_message)
async def universal_admin_message_handler(message: Message, state: FSMContext):
    if message.from_user.id == int(ADMIN_ID):
        # –≠—Ç–æ –æ—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∫–ª–∏–µ–Ω—Ç—É –∏–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é
        data = await state.get_data()
        user_id = data.get("reply_user_id")
        reply_msg_id = data.get("reply_msg_id")
        if user_id:
            # –ï—Å–ª–∏ —ç—Ç–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –º–µ–Ω—é –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
            if is_executor(user_id):
                await bot.send_message(user_id, f"üí¨ –û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{message.text}", reply_markup=get_executor_menu_keyboard())
            else:
                await bot.send_message(user_id, f"üí¨ –û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{message.text}")
            try:
                await bot.delete_message(ADMIN_ID, reply_msg_id)
            except:
                pass
            await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏ —É–¥–∞–ª–µ–Ω–æ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        else:
            await message.answer("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –æ—Ç–≤–µ—Ç–∞.")
        await state.clear()
    else:
        # –≠—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç –∞–¥–º–∏–Ω—É
        admin_msg = await bot.send_message(
            ADMIN_ID,
            f"üì© –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {get_full_name(message.from_user)} (ID: {message.from_user.id}):\n\n"
            f'"{message.text}"',
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"admin_reply_user:{message.from_user.id}"),
                    InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="admin_delete_user_msg")
                ]
            ])
        )
        await state.clear()
        await state.update_data(
            last_user_msg_text=message.text,
            last_user_id=message.from_user.id
        )
        await message.answer(
            "‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!",
            reply_markup=get_main_reply_keyboard()
        )

@router.callback_query(F.data == "back_to_main_menu")
async def back_to_main_menu_handler(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("‚ùå–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await callback.answer()


# --- –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–æ–∫ ---

def get_user_orders(user_id: int) -> list:
    """–ß–∏—Ç–∞–µ—Ç orders.json –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ user_id."""
    file_path = "orders.json"
    if not os.path.exists(file_path) or os.path.getsize(file_path) == 0:
        return []
    with open(file_path, "r", encoding="utf-8") as f:
        try:
            all_orders = json.load(f)
        except json.JSONDecodeError:
            return []
    
    if not isinstance(all_orders, list):
        return []

    user_orders = [order for order in all_orders if isinstance(order, dict) and order.get('user_id') == user_id]
    return user_orders

async def show_my_orders(message_or_callback: types.Message | types.CallbackQuery):
    user_id = message_or_callback.from_user.id
    orders = get_user_orders(user_id)
    # --- –î–û–ë–ê–í–õ–ï–ù–û: –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞—è–≤–∫–∏, –≥–¥–µ –æ–Ω –Ω–∞–∑–Ω–∞—á–µ–Ω –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º ---
    if is_executor(user_id):
        all_orders = get_all_orders()
        executor_orders = [o for o in all_orders if o.get('executor_id') == user_id]
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ orders (—á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å)
        for eo in executor_orders:
            if eo not in orders:
                orders.append(eo)
    draft_orders_exist = any(o.get('status') == "–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç—Å—è" for o in orders)

    if not orders:
        text = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫."
        keyboard = None
    else:
        text = "–í–æ—Ç –≤–∞—à–∏ –∑–∞—è–≤–∫–∏:"
        if draft_orders_exist:
            text = "–£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è –∑–∞—è–≤–∫–∞. –í—ã–±–µ—Ä–∏—Ç–µ –µ–µ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.\n\n" + text
        keyboard_buttons = []
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞—è–≤–æ–∫, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        for order in reversed(orders[-10:]): 
            order_id = order['order_id']
            order_status = order.get('status', 'N/A')
            emoji = STATUS_EMOJI_MAP.get(order_status, "üìÑ")
            work_type_raw = order.get('work_type', '–ó–∞—è–≤–∫–∞')
            work_type = work_type_raw.replace('work_type_', '')
            button_text = f"{emoji} –ó–∞—è–≤–∫–∞  ‚Ññ{order_id} {work_type}  | {order_status}"
            keyboard_buttons.append([InlineKeyboardButton(text=button_text, callback_data=f"view_order_{order_id}")])
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

    if isinstance(message_or_callback, types.Message):
        await message_or_callback.answer(text, reply_markup=keyboard)
    else:
        try:
            await message_or_callback.message.edit_text(text, reply_markup=keyboard)
            await message_or_callback.answer()
        except:
            await message_or_callback.message.answer(text, reply_markup=keyboard)
            await message_or_callback.answer()

@router.message(F.text == "üìÇ –ú–æ–∏ –∑–∞—è–≤–∫–∏")
async def my_orders_handler(message: Message, state: FSMContext):
    await state.clear()
    await show_my_orders(message)

@router.callback_query(F.data == "my_orders_list")
async def back_to_my_orders_list_handler(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await show_my_orders(callback)


@router.callback_query(F.data.startswith("view_order_"))
async def view_order_handler(callback: CallbackQuery, state: FSMContext):
    try:
        order_id = int(callback.data.split("_")[2])
    except (IndexError, ValueError):
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞—è–≤–∫–∏.", show_alert=True)
        return
    user_id = callback.from_user.id
    orders = get_user_orders(user_id)
    target_order = next((order for order in orders if order['order_id'] == order_id), None)
    if not target_order:
        await callback.message.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —ç—Ç—É –∑–∞—è–≤–∫—É –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –∫ –Ω–µ–π –¥–æ—Å—Ç—É–ø–∞.")
        await callback.answer()
        return
    # –ï—Å–ª–∏ –∑–∞—è–≤–∫–∞ –≤ —Å—Ç–∞—Ç—É—Å–µ "–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç—Å—è", –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
    if target_order.get('status') == "–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç—Å—è":
        await state.set_data(target_order)
        await state.set_state(OrderState.confirmation)
        summary_text = await build_summary_text(target_order)
        await callback.message.edit_text(
            text=summary_text, 
            reply_markup=get_confirmation_keyboard(), 
            parse_mode="HTML"
        )
        await callback.answer()
        return
    # --- –ù–æ–≤—ã–π –±–ª–æ–∫ –¥–ª—è "–£—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º" ---
    if target_order.get('status') == "–£—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º":
        submitted_work = target_order.get('submitted_work')
        submitted_at = target_order.get('submitted_at', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        if submitted_work:
            subject = target_order.get('subject', '–ù–µ —É–∫–∞–∑–∞–Ω')
            work_type = target_order.get('work_type', '–ù–µ —É–∫–∞–∑–∞–Ω').replace('work_type_', '')
            caption = f"‚úÖ –í–∞—à–∞ —Ä–∞–±–æ—Ç–∞ –ø–æ –∑–∞–∫–∞–∑—É ‚Ññ{order_id} –≥–æ—Ç–æ–≤–∞!\n–ü—Ä–µ–¥–º–µ—Ç: {subject}\n–¢–∏–ø —Ä–∞–±–æ—Ç—ã: {work_type}\n–î–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {submitted_at}"
            keyboard = get_client_work_approval_keyboard(order_id)
            try:
                await callback.message.delete()
            except:
                pass
            await bot.send_document(
                chat_id=callback.from_user.id,
                document=submitted_work['file_id'],
                caption=caption,    
                reply_markup=keyboard
            )
        else:
            await callback.message.edit_text("–û—à–∏–±–∫–∞: —Ñ–∞–π–ª —Å —Ä–∞–±–æ—Ç–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await callback.answer()
        return
    status = target_order.get('status', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')
    status_text = f"{STATUS_EMOJI_MAP.get(status, 'üìÑ')} {status}"
    details_text = f"""
<b>–î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏ ‚Ññ{target_order['order_id']}</b>

<b>–°—Ç–∞—Ç—É—Å:</b> {status_text}

<b>–ì—Ä—É–ø–ø–∞:</b> {target_order.get('group_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
<b>–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç:</b> {target_order.get('university_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
<b>–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å:</b> {target_order.get('teacher_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
<b>–ù–æ–º–µ—Ä –∑–∞—á–µ—Ç–∫–∏:</b> {target_order.get('gradebook', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
<b>–ü—Ä–µ–¥–º–µ—Ç:</b> {target_order.get('subject', '–ù–µ —É–∫–∞–∑–∞–Ω')}
<b>–¢–∏–ø —Ä–∞–±–æ—Ç—ã:</b> {target_order.get('work_type', '–ù–µ —É–∫–∞–∑–∞–Ω')}
<b>–ú–µ—Ç–æ–¥–∏—á–∫–∞:</b> {'‚úÖ –î–∞' if target_order.get('has_guidelines') else '‚ùå –ù–µ—Ç'}
<b>–ó–∞–¥–∞–Ω–∏–µ:</b> {'‚úÖ –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ' if target_order.get('task_file') or target_order.get('task_text') else '‚ùå –ù–µ—Ç'}
<b>–ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã:</b> {'‚úÖ –î–∞' if target_order.get('has_example') else '‚ùå –ù–µ—Ç'}
<b>–î–∞—Ç–∞ —Å–¥–∞—á–∏:</b> {target_order.get('deadline', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}
<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {target_order.get('comments', '–ù–µ—Ç')}
"""
    # –î–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫ –¥–æ—Ä–∞–±–æ—Ç–∫–∏, –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å '–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–µ'
    if status == "–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–µ" and target_order.get('revision_comment'):
        details_text += f"\n<b>–î–æ—Ä–∞–±–æ—Ç–∫–∞:</b> {target_order.get('revision_comment')}"
    # --- –ö–Ω–æ–ø–∫–∏ ---
    keyboard = get_user_order_keyboard(order_id, status)
    # –ï—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω, –æ–Ω –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –∏ —Å—Ç–∞—Ç—É—Å '–í —Ä–∞–±–æ—Ç–µ' ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É '–°–¥–∞—Ç—å —Ä–∞–±–æ—Ç
    if status == "–í —Ä–∞–±–æ—Ç–µ":
        # –ï—Å–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å ‚Äî –∞–¥–º–∏–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é —Å–µ–∫—Ü–∏—é
        if str(target_order.get('executor_id')) == str(ADMIN_ID):
            full_name = get_full_name(target_order)
            header = f"–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ ‚Ññ{order_id} –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ ({full_name})\n"
            if target_order.get('creation_date'):
                header += f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {target_order.get('creation_date')}\n"
            group = target_order.get("group_name", "–ù–µ —É–∫–∞–∑–∞–Ω–∞")
            university = target_order.get("university_name", "–ù–µ —É–∫–∞–∑–∞–Ω")
            teacher = target_order.get("teacher_name", "–ù–µ —É–∫–∞–∑–∞–Ω")
            gradebook = target_order.get("gradebook", "–ù–µ —É–∫–∞–∑–∞–Ω")
            subject = target_order.get("subject", "–ù–µ —É–∫–∞–∑–∞–Ω")
            work_type_key = target_order.get("work_type", "N/A").replace("work_type_", "")
            work_type_str = work_type_key if work_type_key != 'other' else target_order.get('work_type_other_name', '–î—Ä—É–≥–æ–µ')
            guidelines = '‚úÖ –î–∞' if target_order.get('has_guidelines') else '‚ùå –ù–µ—Ç'
            task = '‚úÖ –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ' if target_order.get('task_file') or target_order.get('task_text') else '‚ùå –ù–µ—Ç'
            example = '‚úÖ –î–∞' if target_order.get('has_example') else '‚ùå –ù–µ—Ç'
            deadline = target_order.get('deadline', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
            executor_id = target_order.get('executor_id')
            executor_full_name = '—è'
            details_text = f"{header}\n–ì—Ä—É–ø–ø–∞: {group}\n–í–£–ó: {university}\n–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {teacher}\n–ù–æ–º–µ—Ä –∑–∞—á–µ—Ç–∫–∏: {gradebook}\n–ü—Ä–µ–¥–º–µ—Ç: {subject}\n–¢–∏–ø —Ä–∞–±–æ—Ç—ã: {work_type_str}\n–ú–µ—Ç–æ–¥–∏—á–∫–∞: {guidelines}\n–ó–∞–¥–∞–Ω–∏–µ: {task}\n–ü—Ä–∏–º–µ—Ä: {example}\n–î–µ–¥–ª–∞–π–Ω: {deadline}\n–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {executor_full_name} - {executor_id}"
            # --- –ö–Ω–æ–ø–∫–∏ ---
            buttons = [[InlineKeyboardButton(text="‚úÖ –°–¥–∞—Ç—å —Ä–∞–±–æ—Ç—É", callback_data=f"admin_admin_submit_work_{order_id}")]]
            has_files = target_order.get('guidelines_file') or target_order.get('task_file') or target_order.get('task_text') or target_order.get('example_file')
            if has_files:
                buttons.append([InlineKeyboardButton(text="üìé –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∑–∞–∫–∞–∑–∞", callback_data=f"admin_show_materials:{order_id}")])
            buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∑–∞—è–≤–∫–∞–º", callback_data="admin_back")])
            keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
            try:
                await callback.message.edit_text(details_text, reply_markup=keyboard)
            except Exception:
                await callback.message.answer(details_text, reply_markup=keyboard)
            await callback.answer()
            return
    await callback.message.edit_text(details_text, parse_mode="HTML", reply_markup=keyboard)
    await callback.answer()
# --- –ü—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞ ---

@router.message(F.text == "üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞")
async def start_new_order(message: Message, state: FSMContext):
    await state.clear()
    user_id = message.from_user.id
    profile = get_user_profile(user_id)
    required_fields = ["group_name"]
    if all(profile.get(f) for f in required_fields):
        await state.update_data(
            first_name=profile.get("first_name", message.from_user.first_name),
            last_name=profile.get("last_name", message.from_user.last_name or ""),
            phone_number=profile.get("phone_number", ""),
            group_name=profile["group_name"],
            university_name=profile.get("university_name", "")
        )
        text = (
            f"–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n"
            f"–§–ò–û: {profile.get('first_name', message.from_user.first_name)} {profile.get('last_name', message.from_user.last_name or '')}\n"
            f"–ì—Ä—É–ø–ø–∞: {profile['group_name']}\n"
            f"–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç: {profile.get('university_name', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {profile.get('phone_number', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∏—Ö –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å."
        )
        await state.set_state("profile_confirm")
        await message.answer(text, reply_markup=get_profile_confirm_keyboard())
    else:
        await state.set_state(OrderState.group_name)
        await message.answer(
            "üìù –ù–∞—á–Ω–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏. \n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã.",
            reply_markup=get_skip_keyboard("group_name")
        )

@router.message(OrderState.group_name)
async def process_group_name(message: Message, state: FSMContext):
    await state.update_data(group_name=message.text)
    await state.set_state(OrderState.university_name)
    await message.answer("üè´ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞.", reply_markup=get_back_keyboard())

@router.callback_query(OrderState.group_name, F.data == "skip_group_name")
async def skip_group_name(callback: CallbackQuery, state: FSMContext):
    await state.update_data(group_name="–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    await state.set_state(OrderState.university_name)
    await callback.message.edit_text("üè´ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞.", reply_markup=get_back_keyboard())
    await callback.answer()

def get_teacher_name_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_teacher_name")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
    ])

@router.message(OrderState.university_name)
async def process_university_name(message: Message, state: FSMContext):
    await state.update_data(university_name=message.text)
    await state.set_state(OrderState.teacher_name)
    await message.answer("üë®‚Äçüè´ –í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:", reply_markup=get_teacher_name_keyboard())

@router.message(OrderState.teacher_name)
async def process_teacher_name(message: Message, state: FSMContext):
    await state.update_data(teacher_name=message.text)
    data = await state.get_data()
    user_id = message.from_user.id
    profile = get_user_profile(user_id)
    gradebook = data.get("gradebook") or profile.get("gradebook")
    if gradebook:
        await state.update_data(gradebook=gradebook)
        await state.set_state(OrderState.subject)
        await message.answer("üìö –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞:", reply_markup=get_back_keyboard())
    else:
        await state.set_state(OrderState.gradebook)
        await message.answer("üìí –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞—á–µ—Ç–∫–∏ –∏–ª–∏ –≤–∞—Ä–∏–∞–Ω—Ç (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ):", reply_markup=get_gradebook_keyboard())

@router.callback_query(OrderState.teacher_name, F.data == "skip_teacher_name")
async def skip_teacher_name(callback: CallbackQuery, state: FSMContext):
    await state.update_data(teacher_name="–ù–µ —É–∫–∞–∑–∞–Ω")
    data = await state.get_data()
    user_id = callback.from_user.id
    profile = get_user_profile(user_id)
    gradebook = data.get("gradebook") or profile.get("gradebook")
    if gradebook:
        await state.update_data(gradebook=gradebook)
        await state.set_state(OrderState.subject)
        await callback.message.edit_text("üìö –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞:", reply_markup=get_back_keyboard())
    else:
        await state.set_state(OrderState.gradebook)
        await callback.message.edit_text("üìí –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞—á–µ—Ç–∫–∏ –∏–ª–∏ –≤–∞—Ä–∏–∞–Ω—Ç (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ):", reply_markup=get_gradebook_keyboard())
    await callback.answer()

@router.message(OrderState.gradebook)
async def process_gradebook(message: Message, state: FSMContext):
    # –ë–æ–ª—å—à–µ –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç, —Ä–∞–∑—Ä–µ—à–∞–µ–º –ª—é–±–æ–π —Ç–µ–∫—Å—Ç
    await state.update_data(gradebook=message.text.strip())
    await state.set_state(OrderState.subject)
    await message.answer("üìö –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞")

@router.callback_query(OrderState.gradebook, F.data == "skip_gradebook")
async def skip_gradebook(callback: CallbackQuery, state: FSMContext):
    await state.update_data(gradebook="–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    await state.set_state(OrderState.subject)
    await callback.message.edit_text("üìö –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞")
    await callback.answer()

@router.message(OrderState.subject)
async def process_subject_input(message: Message, state: FSMContext):
    await state.update_data(subject=message.text)
    await state.set_state(OrderState.work_type)
    await message.answer("üìù –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞–±–æ—Ç—ã:", reply_markup=get_work_type_keyboard())

@router.callback_query(OrderState.work_type, F.data.startswith("work_type_"))
async def process_work_type_choice(callback: CallbackQuery, state: FSMContext):
    work_type = callback.data
    
    if work_type == "work_type_other":
        await state.set_state(OrderState.work_type_other)
        await callback.message.edit_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–∏–ø —Ä–∞–±–æ—Ç—ã –≤—Ä—É—á–Ω—É—é.", reply_markup=get_back_keyboard())
    else:
        await state.update_data(work_type=work_type)
        await state.set_state(OrderState.guidelines_choice)
        await callback.message.edit_text("üìÑ –£ –≤–∞—Å –µ—Å—Ç—å –º–µ—Ç–æ–¥–∏—á–∫–∞?", reply_markup=get_yes_no_keyboard("guidelines"))
    await callback.answer()

@router.message(OrderState.work_type_other)
async def process_work_type_other(message: Message, state: FSMContext):
    await state.update_data(work_type=message.text)
    await state.set_state(OrderState.guidelines_choice)
    # –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await message.answer("üìÑ –£ –≤–∞—Å –µ—Å—Ç—å –º–µ—Ç–æ–¥–∏—á–∫–∞?", reply_markup=get_yes_no_keyboard("guidelines"))


@router.callback_query(OrderState.guidelines_choice, F.data.startswith("guidelines_"))
async def process_guidelines_choice(callback: CallbackQuery, state: FSMContext):
    choice = callback.data.split("_")[1]
    if choice == "yes":
        await state.update_data(has_guidelines=True)
        await state.set_state(OrderState.guidelines_upload)
        await callback.message.edit_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –º–µ—Ç–æ–¥–∏—á–∫–æ–π (pdf, docx, png, jpeg).", reply_markup=get_back_keyboard())
    else:
        await state.update_data(has_guidelines=False, guidelines_file=None)
        await state.set_state(OrderState.task_upload)
        await callback.message.edit_text("–ü–æ–Ω—è–ª. –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –∑–∞–¥–∞–Ω–∏–µ–º (pdf, docx, png, jpeg) –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏—Ç–µ –µ–≥–æ —Ç–µ–∫—Å—Ç–æ–º.", reply_markup=get_back_keyboard())
    await callback.answer()

@router.callback_query(StateFilter("profile_confirm"), F.data == "edit_profile")
async def edit_profile_handler(callback: CallbackQuery, state: FSMContext):
    await state.set_state("edit_full_name")
    await callback.message.edit_text("‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –ò–º—è –∏ –§–∞–º–∏–ª–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤):")

@router.callback_query(StateFilter("profile_confirm"), F.data == "profile_next")
async def profile_next_handler(callback: CallbackQuery, state: FSMContext):
    await state.set_state(OrderState.teacher_name)
    await callback.message.edit_text("üë®‚Äçüè´ –í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:", reply_markup=get_teacher_name_keyboard())

@router.message(StateFilter("edit_full_name"))
async def edit_full_name(message: Message, state: FSMContext):
    # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é
    parts = message.text.strip().split(maxsplit=1)
    first_name = parts[0] if len(parts) > 0 else ""
    last_name = parts[1] if len(parts) > 1 else ""
    await state.update_data(first_name=first_name, last_name=last_name)
    await state.set_state("edit_group_name")
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—É:")

@router.message(StateFilter("edit_group_name"))
async def edit_group_name(message: Message, state: FSMContext):
    await state.update_data(group_name=message.text)
    await state.set_state("edit_gradebook")
    await message.answer("üìí –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞—á–µ—Ç–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 24-15251):")

@router.message(StateFilter("edit_gradebook"))
async def edit_gradebook(message: Message, state: FSMContext):
    await state.update_data(gradebook=message.text)
    await state.set_state("edit_university_name")
    await message.answer("üè´ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞:")

@router.message(StateFilter("edit_university_name"))
async def edit_university_name(message: Message, state: FSMContext):
    await state.update_data(university_name=message.text)
    data = await state.get_data()
# –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑ FSM –∏–ª–∏ users.json
    phone_number = data.get('phone_number')
    if not phone_number:
        users_file = "users.json"
        if os.path.exists(users_file):
            with open(users_file, "r", encoding="utf-8") as f:
                try:
                    users = json.load(f)
                    phone_number = users.get(str(message.from_user.id), {}).get("phone_number", "")
                except Exception:
                    phone_number = ""
    data['phone_number'] = phone_number
    save_user_profile(
        message.from_user.id,
        {
            "first_name": data.get("first_name"),
            "last_name": data.get("last_name"),
            "phone_number": data.get("phone_number", ""),
            "group_name": data.get("group_name"),
            "university_name": data.get("university_name"),
        }
    )
    text = (
        f"–í–∞—à–∏ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:\n"
        f"–§–ò–û: {data.get('first_name')} {data.get('last_name')}\n"
        f"–ì—Ä—É–ø–ø–∞: {data.get('group_name')}\n"
        f"–ó–∞—á–µ—Ç–∫–∞: {data.get('gradebook')}\n"
        f"–í–£–ó: {data.get('university_name')}\n\n"
        "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏?"
    )
    await state.set_state("profile_confirm")
    await message.answer(text, reply_markup=get_profile_confirm_keyboard())

@router.message(OrderState.guidelines_upload, F.document | F.photo)
async def process_guidelines_upload(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    if message.document:
        ext = os.path.splitext(message.document.file_name)[-1][1:].lower()
        if ext not in ALLOWED_EXTENSIONS:
            await message.answer("‚ùå –†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã: pdf, docx, png, jpeg, jpg. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
        if message.document.file_size > MAX_FILE_SIZE:
            await message.answer("‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä ‚Äî 15 –ú–ë.")
            return
        guidelines_file = {'id': message.document.file_id, 'type': 'document'}
    else:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ç–æ
        photo = message.photo[-1]
        if photo.file_size > MAX_FILE_SIZE:
            await message.answer("‚ùå –§–æ—Ç–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä ‚Äî 15 –ú–ë.")
            return
        guidelines_file = {'id': photo.file_id, 'type': 'photo'}
    await state.update_data(guidelines_file=guidelines_file)
    await state.set_state(OrderState.task_upload)
    await message.answer("‚úÖ –ú–µ—Ç–æ–¥–∏—á–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞. –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –∑–∞–¥–∞–Ω–∏–µ–º (pdf, docx, png, jpeg) –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏—Ç–µ –µ–≥–æ —Ç–µ–∫—Å—Ç–æ–º.", reply_markup=get_back_keyboard())


@router.message(OrderState.task_upload, F.text | F.document | F.photo)
async def process_task_upload(message: Message, state: FSMContext):
    if message.text:
        await state.update_data(task_text=message.text, task_file=None)
    else:
        if message.document:
            ext = os.path.splitext(message.document.file_name)[-1][1:].lower()
            if ext not in ALLOWED_EXTENSIONS:
                await message.answer("‚ùå –†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã: pdf, docx, png, jpeg, jpg. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                return
            if message.document.file_size > MAX_FILE_SIZE:
                await message.answer("‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä ‚Äî 15 –ú–ë.")
                return
            task_file = {'id': message.document.file_id, 'type': 'document'}
        else:
            photo = message.photo[-1]
            if photo.file_size > MAX_FILE_SIZE:
                await message.answer("‚ùå –§–æ—Ç–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä ‚Äî 15 –ú–ë.")
                return
            task_file = {'id': photo.file_id, 'type': 'photo'}
        await state.update_data(task_file=task_file, task_text=None)
    await state.set_state(OrderState.example_choice)
    await message.answer("üìë –ó–∞–¥–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ. –£ –≤–∞—Å –µ—Å—Ç—å –ø—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã?", reply_markup=get_yes_no_keyboard("example"))


@router.callback_query(OrderState.example_choice, F.data.startswith("example_"))
async def process_example_choice(callback: CallbackQuery, state: FSMContext):
    choice = callback.data.split("_")[-1]
    if choice == "yes":
        await state.update_data(has_example=True)
        await state.set_state(OrderState.example_upload)
        await callback.message.edit_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –ø—Ä–∏–º–µ—Ä–æ–º (pdf, docx, pgn, jpeg).", reply_markup=get_back_keyboard())
    else: 
        await state.update_data(has_example=False, example_file=None)
        await state.set_state(OrderState.deadline)
        await callback.message.edit_text("üóìÔ∏è –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É —Å–¥–∞—á–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì.", reply_markup=get_back_keyboard())
    await callback.answer()


@router.message(OrderState.example_upload, F.document | F.photo)
async def process_example_upload(message: Message, state: FSMContext):
    if message.document:
        ext = os.path.splitext(message.document.file_name)[-1][1:].lower()
        if ext not in ALLOWED_EXTENSIONS:
            await message.answer("‚ùå –†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã: pdf, docx, png, jpeg, jpg. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
        if message.document.file_size > MAX_FILE_SIZE:
            await message.answer("‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä ‚Äî 15 –ú–ë.")
            return
        example_file = {'id': message.document.file_id, 'type': 'document'}
    else:
        photo = message.photo[-1]
        if photo.file_size > MAX_FILE_SIZE:
            await message.answer("‚ùå –§–æ—Ç–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä ‚Äî 15 –ú–ë.")
            return
        example_file = {'id': photo.file_id, 'type': 'photo'}
    await state.update_data(example_file=example_file)
    await state.set_state(OrderState.deadline)
    await message.answer("üóìÔ∏è –ü—Ä–∏–º–µ—Ä –ø—Ä–∏–Ω—è—Ç. –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É —Å–¥–∞—á–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì.", reply_markup=get_back_keyboard())

@router.message(OrderState.deadline)
async def process_deadline(message: Message, state: FSMContext):
    try:
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞
        datetime.strptime(message.text, "%d.%m.%Y")
        await state.update_data(deadline=message.text)
        await state.set_state(OrderState.comments)
        await message.answer(
            "üí¨ –û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ —Ä–∞–±–æ—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é, –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é –∏ —Ç.–¥.) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'", 
            reply_markup=get_skip_comment_keyboard()
        )
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì.", reply_markup=get_back_keyboard())

@router.callback_query(F.data == "skip_comment", OrderState.comments)
async def skip_comment_handler(callback: CallbackQuery, state: FSMContext):
    await state.update_data(comments="–ù–µ—Ç")
    data = await state.get_data()
    # –ù–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫! –ü—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    summary_text = await build_summary_text(data)
    await state.set_state(OrderState.confirmation)
    await callback.message.edit_text(summary_text, reply_markup=get_confirmation_keyboard(), parse_mode="HTML")
    await callback.answer()

@router.message(OrderState.comments)
async def process_comments(message: Message, state: FSMContext):
    await state.update_data(comments=message.text)
    data = await state.get_data()
    # –ù–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫! –ü—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    summary_text = await build_summary_text(data)
    await state.set_state(OrderState.confirmation)
    await message.answer(text=summary_text, reply_markup=get_confirmation_keyboard(), parse_mode="HTML")


async def build_summary_text(data: dict) -> str:
    """–°—Ç—Ä–æ–∏—Ç —Ç–µ–∫—Å—Ç —Å –∏—Ç–æ–≥–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞—è–≤–∫–µ."""
    group = data.get("group_name", "–ù–µ —É–∫–∞–∑–∞–Ω–∞")
    university = data.get("university_name", "–ù–µ —É–∫–∞–∑–∞–Ω")
    teacher = data.get("teacher_name", "–ù–µ —É–∫–∞–∑–∞–Ω")
    gradebook = data.get("gradebook", "–ù–µ —É–∫–∞–∑–∞–Ω")
    subject = data.get("subject", "–ù–µ —É–∫–∞–∑–∞–Ω")
    work_type_key = data.get("work_type", "N/A").replace("work_type_", "")
    work_type_str = work_type_key if work_type_key != 'other' else data.get('work_type_other_name', '–î—Ä—É–≥–æ–µ')
    guidelines = '‚úÖ –î–∞' if data.get('has_guidelines') else '‚ùå –ù–µ—Ç'
    task = '‚úÖ –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ' if data.get('task_file') or data.get('task_text') else '‚ùå –ù–µ—Ç'
    example = '‚úÖ –î–∞' if data.get('has_example') else '‚ùå –ù–µ—Ç'
    deadline = data.get('deadline', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
    comments = data.get('comments', '–ù–µ—Ç')
    status = data.get('status', '')
    summary_text = f"""
<b>–ì—Ä—É–ø–ø–∞:</b> {group}
<b>–í–£–ó:</b> {university}
<b>–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å:</b> {teacher}
<b>–ù–æ–º–µ—Ä –∑–∞—á–µ—Ç–∫–∏:</b> {gradebook}
<b>–ü—Ä–µ–¥–º–µ—Ç:</b> {subject}
<b>–¢–∏–ø —Ä–∞–±–æ—Ç—ã:</b> {work_type_str}
<b>–ú–µ—Ç–æ–¥–∏—á–∫–∞:</b> {guidelines}
<b>–ó–∞–¥–∞–Ω–∏–µ:</b> {task}
<b>–ü—Ä–∏–º–µ—Ä:</b> {example}
<b>–î–µ–¥–ª–∞–π–Ω:</b> {deadline}
"""
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å" —Ç–æ–ª—å–∫–æ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ "–í —Ä–∞–±–æ—Ç–µ"
    if status == "–í —Ä–∞–±–æ—Ç–µ":
        executor_id = data.get('executor_id')
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –≤–∑—è—Ç—å first_name –∏ last_name –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        executor_first_name = data.get('first_name')
        executor_last_name = data.get('last_name')
        executor_name = None
        if executor_first_name or executor_last_name:
            executor_name = f"{executor_first_name or ''} {executor_last_name or ''}".strip()
        elif data.get('executor_full_name'):
            executor_name = data['executor_full_name']
        elif executor_id:
            try:
                executors = get_executors_list()
                for ex in executors:
                    if str(ex.get('id')) == str(executor_id):
                        executor_name = ex.get('name')
                        break
            except Exception:
                pass
        if executor_name:
            summary_text += f"<b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:</b> {executor_name} (ID {executor_id})\n"
        elif executor_id:
            summary_text += f"<b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:</b> ID {executor_id}\n"
        else:
            summary_text += f"<b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:</b> ‚Äî\n"
    if comments:
        return f"{summary_text}\n<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:</b> {comments}"
    return summary_text

async def build_short_summary_text(data: dict) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç-—Å–≤–æ–¥–∫—É –ø–æ –∑–∞—è–≤–∫–µ –¥–ª—è –∞–¥–º–∏–Ω–∞/–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π."""
    work_type = data.get("work_type", "–¢–∏–ø –Ω–µ —É–∫–∞–∑–∞–Ω").replace("type_", "").capitalize()
    if work_type == "Other":
        work_type = data.get("work_type_other_name", "–î—Ä—É–≥–æ–µ")

    subject = data.get("subject", "–ù–µ —É–∫–∞–∑–∞–Ω")
    deadline = data.get("deadline", "–ù–µ —É–∫–∞–∑–∞–Ω")
    text = (f"<b>–¢–∏–ø —Ä–∞–±–æ—Ç—ã:</b> {work_type}\n"
            f"<b>–ü—Ä–µ–¥–º–µ—Ç:</b> {subject}\n"
            f"<b>–°—Ä–æ–∫:</b> –¥–æ {deadline}")
    return text

# --- –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ ---

# --- –î–û–ë–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ order_id –∏–∑ Google Sheets ---
def get_max_order_id_from_gsheet():
    creds = Credentials.from_service_account_file("google-credentials.json", scopes=["https://www.googleapis.com/auth/spreadsheets"])
    gc = gspread.authorize(creds)
    sh = gc.open_by_key(GOOGLE_SHEET_ID)
    worksheet = sh.sheet1
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ (order_id)
    order_ids = worksheet.col_values(1)
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    order_ids = [x for x in order_ids if x.strip() and x.strip().lower() != '–Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞']
    order_ids = [x for x in order_ids if x.isdigit()]
    if not order_ids:
        return 0
    return max(int(x) for x in order_ids)

async def save_or_update_order(order_data: dict) -> int:
    file_path = "orders.json"
    orders = []
    if os.path.exists(file_path) and os.path.getsize(file_path) > 0:
        with open(file_path, "r", encoding="utf-8") as f:
            try:
                orders = json.load(f)
            except json.JSONDecodeError:
                orders = []
    order_id_to_process = order_data.get("order_id")
    user_id_to_process = order_data.get("user_id")
    status_to_process = order_data.get("status")
    # –ï—Å–ª–∏ –∑–∞—è–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç—Å—è ("–†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç—Å—è"), —É–¥–∞–ª—è–µ–º –≤—Å–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∏ —Å —ç—Ç–∏–º order_id –∏ user_id
    if status_to_process == "–†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç—Å—è" and order_id_to_process and user_id_to_process:
        orders = [o for o in orders if not (
            o.get("order_id") == order_id_to_process and o.get("user_id") == user_id_to_process and o.get("status") == "–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç—Å—è"
        )]
    if order_id_to_process: # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é
        found = False
        for i, order in enumerate(orders):
            if order.get("order_id") == order_id_to_process:
                orders[i] = order_data
                found = True
                break
        if not found: # –ï—Å–ª–∏ –ø–æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–∏—á–∏–Ω–µ –Ω–µ –Ω–∞—à–ª–∏, –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –Ω–æ–≤—É—é
            max_json_id = orders[-1]['order_id'] if orders else 0
            max_gsheet_id = get_max_order_id_from_gsheet()
            order_id_to_process = max(max_json_id, max_gsheet_id) + 1
            order_data["order_id"] = order_id_to_process
            orders.append(order_data)
    else: # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
        max_json_id = orders[-1]['order_id'] if orders else 0
        max_gsheet_id = get_max_order_id_from_gsheet()
        order_id_to_process = max(max_json_id, max_gsheet_id) + 1
        order_data["order_id"] = order_id_to_process
        orders.append(order_data)
    with open(file_path, "w", encoding="utf-8") as f:
        json.dump(orders, f, ensure_ascii=False, indent=4)
    # Save to SQLite if it's a new order or update
    try:
        with sqlite3.connect('student.db', timeout=10.0) as conn:
            c = conn.cursor()
            c.execute('''INSERT OR REPLACE INTO students (user_id, first_name, last_name, phone_number, group_name)
                         VALUES (?, ?, ?, ?, ?)''',
                      (order_data['user_id'], order_data.get('first_name', ''), order_data.get('last_name', ''),
                       order_data.get('phone_number', ''), order_data.get('group_name', '')))
            conn.commit()
    except sqlite3.Error as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö SQLite: {e}")
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ JSON
    return order_id_to_process

@router.callback_query(OrderState.confirmation, F.data == "confirm_order")
async def process_confirm_order(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    data['status'] = "–†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç—Å—è"
    data['user_id'] = callback.from_user.id
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑ FSM –∏–ª–∏ users.json
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑ FSM –∏–ª–∏ users.json
    phone_number = data.get('phone_number')
    if not phone_number:
        users_file = "users.json"
        if os.path.exists(users_file):
            with open(users_file, "r", encoding="utf-8") as f:
                try:
                    users = json.load(f)
                    phone_number = users.get(str(callback.from_user.id), {}).get("phone_number", "")
                except Exception:
                    phone_number = ""
    data['phone_number'] = phone_number
    save_user_profile(
        callback.from_user.id,
        {
            "first_name": data.get("first_name", callback.from_user.first_name),
            "last_name": data.get("last_name", callback.from_user.last_name or ""),
            "phone_number": data.get("phone_number", ""),
            "group_name": data.get("group_name", ""),
            "university_name": data.get("university_name", ""),
        }
    )
    
    data['username'] = callback.from_user.username or "N/A"
    data['first_name'] = callback.from_user.first_name
    data['last_name'] = callback.from_user.last_name or ""
    data['creation_date'] = datetime.now().strftime("%d.%m.%Y %H:%M")
    order_id = await save_or_update_order(data)
    # –§–æ—Ä–º–∏—Ä—É–µ–º –µ–¥–∏–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    summary = await build_summary_text(data)
    full_name = f"{data.get('first_name', '')} {data.get('last_name', '')}".strip()
    admin_text = f"üî• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ {order_id} –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ ({full_name})\n\n{summary}"
    admin_keyboard = get_admin_order_keyboard(data, show_materials_button=True)
    await bot.send_message(ADMIN_ID, admin_text, parse_mode="HTML", reply_markup=admin_keyboard)
    # –†–∞—Å—Å—ã–ª–∫–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º (–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –±—ã–ª–æ)
    if EXECUTOR_IDS:
        short_summary = await build_short_summary_text(data)
        notification_text = f"üì¢ –ü–æ—è–≤–∏–ª—Å—è –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ {order_id}\n\n" + short_summary
        for executor_id in EXECUTOR_IDS:
            try:
                await bot.send_message(executor_id, notification_text, parse_mode="HTML")
            except Exception as e:
                print(f"Failed to send notification to executor {executor_id}: {e}")
    await callback.message.edit_text("‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–∫–ª–∏–∫–∞!", reply_markup=None)
    await state.clear()
    await callback.answer()

@router.callback_query(OrderState.confirmation, F.data == "cancel_order")
async def process_cancel_order(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    order_id = data.get("order_id")
    user_id = callback.from_user.id
    file_path = "orders.json"
    orders = []
    if os.path.exists(file_path) and os.path.getsize(file_path) > 0:
        with open(file_path, "r", encoding="utf-8") as f:
            try:
                orders = json.load(f)
            except json.JSONDecodeError:
                orders = []
    # –£–¥–∞–ª—è–µ–º –∑–∞—è–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —ç—Ç–∏–º order_id
    new_orders = [o for o in orders if not (str(o.get("order_id")) == str(order_id) and o.get("user_id") == user_id)]
    with open(file_path, "w", encoding="utf-8") as f:
        json.dump(new_orders, f, ensure_ascii=False, indent=4)
    await state.clear()
    await callback.message.edit_text("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∏ —É–¥–∞–ª–µ–Ω–∞.")
    await callback.answer()

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è confirm_order –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
@router.callback_query(F.data == "confirm_order")
async def process_confirm_order_fallback(callback: CallbackQuery, state: FSMContext):
    current_state = await state.get_state()
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏, —Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–ª–∂–µ–Ω –±—ã–ª —Å—Ä–∞–±–æ—Ç–∞—Ç—å
    # –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ OrderState.confirmation
    if current_state != OrderState.confirmation:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ FSM
        data = await state.get_data()
        if data and data.get('subject'):  # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            await state.set_state(OrderState.confirmation)
            summary_text = await build_summary_text(data)
            await callback.message.edit_text(
                text=summary_text, 
                reply_markup=get_confirmation_keyboard(), 
                parse_mode="HTML"
            )
            await callback.answer("–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞—è–≤–∫—É.")
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É
            await state.clear()
            await callback.message.edit_text(
                "‚ùå –î–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É.",
                reply_markup=None
            )
            await callback.answer()
    else:
        # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ, –Ω–æ –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª - –æ—à–∏–±–∫–∞
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", show_alert=True)

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è cancel_order –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
@router.callback_query(F.data == "cancel_order")
async def process_cancel_order_fallback(callback: CallbackQuery, state: FSMContext):
    current_state = await state.get_state()
    
    if current_state != OrderState.confirmation:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –ø—Ä–æ—Å—Ç–æ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        await callback.message.edit_text("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        await callback.answer()
    else:
        # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ, –Ω–æ –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª - –æ—à–∏–±–∫–∞
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", show_alert=True)

@router.callback_query(OrderState.confirmation, F.data == "contact_admin_in_order")
async def process_contact_admin_in_order(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AdminContact.waiting_for_message)
    await callback.message.edit_text("‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –æ—Ç–ø—Ä–∞–≤–ª—é –µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    await callback.answer()


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" ---
@router.callback_query(F.data == "back", StateFilter(OrderState))
async def process_back_button(callback: CallbackQuery, state: FSMContext):
    current_state_str = await state.get_state()

    async def go_to_group_name(s: FSMContext):
        await s.set_state(OrderState.group_name)
        await callback.message.edit_text("üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã.")
    
    async def go_to_university_name(s: FSMContext):
        await s.set_state(OrderState.university_name)
        await callback.message.edit_text("üè´ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞.", reply_markup=get_back_keyboard())

    async def go_to_work_type(s: FSMContext):
        await s.set_state(OrderState.work_type)
        await callback.message.edit_text("üìò –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞–±–æ—Ç—ã:", reply_markup=get_work_type_keyboard())

    async def go_to_guidelines_choice(s: FSMContext):
        await s.set_state(OrderState.guidelines_choice)
        await callback.message.edit_text("üìÑ –£ –≤–∞—Å –µ—Å—Ç—å –º–µ—Ç–æ–¥–∏—á–∫–∞?", reply_markup=get_yes_no_keyboard("guidelines"))
    
    async def go_to_task_upload(s: FSMContext):
        await s.set_state(OrderState.task_upload)
        await callback.message.edit_text("–ü–æ–Ω—è–ª. –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –∑–∞–¥–∞–Ω–∏–µ–º (pdf, docx, png, jpeg) –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏—Ç–µ –µ–≥–æ —Ç–µ–∫—Å—Ç–æ–º.", reply_markup=get_back_keyboard())

    async def go_to_example_choice(s: FSMContext):
        await s.set_state(OrderState.example_choice)
        await callback.message.edit_text("üìë –ó–∞–¥–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ. –£ –≤–∞—Å –µ—Å—Ç—å –ø—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã?", reply_markup=get_yes_no_keyboard("example"))

    async def go_to_deadline(s: FSMContext):
        await s.set_state(OrderState.deadline)
        await callback.message.edit_text("üóìÔ∏è –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É —Å–¥–∞—á–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì.", reply_markup=get_back_keyboard())

    async def go_to_comments(s: FSMContext):
        await s.set_state(OrderState.comments)
        await callback.message.edit_text("üí¨ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ —Ä–∞–±–æ—Ç–µ.", reply_markup=get_back_keyboard())

    back_transitions = {
        OrderState.university_name: go_to_group_name,
        OrderState.work_type: go_to_university_name,
        OrderState.work_type_other: go_to_work_type,
        OrderState.guidelines_choice: go_to_work_type,
        OrderState.guidelines_upload: go_to_guidelines_choice,
        OrderState.task_upload: go_to_guidelines_choice,
        OrderState.example_choice: go_to_task_upload,
        OrderState.example_upload: go_to_example_choice,
        OrderState.deadline: go_to_example_choice,
        OrderState.comments: go_to_deadline,
        OrderState.confirmation: go_to_comments,
    }
    
    if current_state_str in back_transitions:
        await back_transitions[current_state_str](state)
    else: # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π —à–∞–≥ (group_name), —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –Ω–µ–∫—É–¥–∞
        await state.clear()
        await callback.message.edit_text("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")

    await callback.answer()


async def send_offer_to_admin(user, fsm_data):
    order_id = fsm_data['order_id']
    price = fsm_data['price']
    executor_comment = fsm_data.get('executor_comment', '')
    orders = get_all_orders()
    subject = '–ù–µ —É–∫–∞–∑–∞–Ω'
    for order in orders:
        if order.get("order_id") == order_id:
            subject = order.get('subject', '–ù–µ —É–∫–∞–∑–∞–Ω')
            break
    admin_notification = f"""
    ‚úÖ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å {get_full_name(user)} (ID: {user.id}) –≥–æ—Ç–æ–≤ –≤–∑—è—Ç—å—Å—è –∑–∞ –∑–∞–∫–∞–∑ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É \"{subject}\"\n<b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ —É—Å–ª–æ–≤–∏—è:</b>\nüí∞ <b>–¶–µ–Ω–∞:</b> {price} ‚ÇΩ\n‚è≥ <b>–°—Ä–æ–∫:</b> {fsm_data['deadline']}\nüí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:</b> {executor_comment or '–ù–µ—Ç'}
    """
    await bot.send_message(
        ADMIN_ID, 
        admin_notification, 
        parse_mode="HTML",
        reply_markup=get_admin_final_approval_keyboard(order_id, price)
    )


@admin_router.callback_query(F.data.startswith("admin_show_materials:"))
async def admin_show_materials_handler(callback: CallbackQuery, state: FSMContext):
    order_id = callback.data.split(":", 1)[1]
    orders = get_all_orders()
    order = next((o for o in orders if str(o['order_id']) == str(order_id)), None)
    if not order:
        await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
    material_buttons = []
    if order.get('guidelines_file'):
        material_buttons.append([InlineKeyboardButton(text="–ú–µ—Ç–æ–¥–∏—á–∫–∞", callback_data=f"admin_material_guidelines:{order_id}")])
    if order.get('task_file') or order.get('task_text'):
        material_buttons.append([InlineKeyboardButton(text="–ó–∞–¥–∞–Ω–∏–µ", callback_data=f"admin_material_task:{order_id}")])
    if order.get('example_file'):
        material_buttons.append([InlineKeyboardButton(text="–ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã", callback_data=f"admin_material_example:{order_id}")])
    material_buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"admin_view_order_{order_id}")])
    keyboard = InlineKeyboardMarkup(inline_keyboard=material_buttons)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", reply_markup=keyboard)
    await callback.answer()

@admin_router.callback_query(F.data.startswith("admin_hide_materials:"))
async def admin_hide_materials_handler(callback: CallbackQuery, state: FSMContext):
    order_id = callback.data.split(":", 1)[1]
    orders = get_all_orders()
    order = next((o for o in orders if str(o['order_id']) == str(order_id)), None)
    if not order:
        await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
    status = order.get('status')
    # –ù–æ–≤—ã–π –±–ª–æ–∫: –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å '–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è' –∏ –µ—Å—Ç—å executor_offer ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —à–∞–±–ª–æ–Ω –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
    if status == '–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è' and 'executor_offers' in order:
        offer = order['executor_offers']
        executor_full_name = offer.get('executor_full_name', '–ë–µ–∑ –∏–º–µ–Ω–∏')
        price = offer.get('price')
        deadline = offer.get('deadline', 'N/A')
        executor_comment = offer.get('executor_comment', '–ù–µ—Ç')
        subject = order.get('subject', '–ù–µ —É–∫–∞–∑–∞–Ω')
        if str(deadline).strip().lower() == '–¥–æ –¥–µ–¥–ª–∞–π–Ω–∞':
            deadline_str = order.get('deadline', '–ù–µ —É–∫–∞–∑–∞–Ω')
        else:
    
            deadline_str = pluralize_days(deadline)
        admin_notification = f"""‚úÖ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å {executor_full_name} –≥–æ—Ç–æ–≤ –≤–∑—è—Ç—å—Å—è –∑–∞ –∑–∞–∫–∞–∑ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É \"{subject}\"\n    \n<b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ —É—Å–ª–æ–≤–∏—è:</b>\nüí∞ <b>–¶–µ–Ω–∞:</b> {price} ‚ÇΩ\n‚è≥ <b>–°—Ä–æ–∫:</b> {deadline_str}\nüí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:</b> {executor_comment or '–ù–µ—Ç'}"""
        keyboard = get_admin_final_approval_keyboard(int(order_id), price)
        await callback.message.edit_text(admin_notification, parse_mode="HTML", reply_markup=keyboard)
        await callback.answer()
        return
    # –°—Ç–∞—Ä–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
    details_text = await build_summary_text(order)
    details_text = f"<b>–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ {order_id} –æ—Ç {get_full_name(order)}</b>\n\n" + details_text
    keyboard = get_admin_order_keyboard(order, show_materials_button=True)
    await callback.message.edit_text(details_text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()

@admin_router.callback_query(F.data.startswith("admin_material_guidelines:"))
async def admin_material_guidelines_handler(callback: CallbackQuery, state: FSMContext):
    order_id = callback.data.split(":", 1)[1]
    orders = get_all_orders()
    order = next((o for o in orders if str(o['order_id']) == str(order_id)), None)
    if not order or not order.get('guidelines_file'):
        await callback.answer("–ú–µ—Ç–æ–¥–∏—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return
    file = order['guidelines_file']
    if file['type'] == 'photo':
        await bot.send_photo(callback.from_user.id, file['id'], caption="–ú–µ—Ç–æ–¥–∏—á–∫–∞")
    else:
        await bot.send_document(callback.from_user.id, file['id'], caption="–ú–µ—Ç–æ–¥–∏—á–∫–∞")
    await callback.answer()

@admin_router.callback_query(F.data.startswith("admin_material_task:"))
async def admin_material_task_handler(callback: CallbackQuery, state: FSMContext):
    order_id = callback.data.split(":", 1)[1]
    orders = get_all_orders()
    order = next((o for o in orders if str(o['order_id']) == str(order_id)), None)
    if not order:
        await callback.answer("–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
        return
    if order.get('task_file'):
        file = order['task_file']
        if file['type'] == 'photo':
            await bot.send_photo(callback.from_user.id, file['id'], caption="–ó–∞–¥–∞–Ω–∏–µ")
        else:
            await bot.send_document(callback.from_user.id, file['id'], caption="–ó–∞–¥–∞–Ω–∏–µ")
    elif order.get('task_text'):
        await bot.send_message(callback.from_user.id, f"–¢–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è:\n\n{order['task_text']}")
    await callback.answer()

@admin_router.callback_query(F.data.startswith("admin_material_example:"))
async def admin_material_example_handler(callback: CallbackQuery, state: FSMContext):
    order_id = callback.data.split(":", 1)[1]
    orders = get_all_orders()
    order = next((o for o in orders if str(o['order_id']) == str(order_id)), None)
    if not order or not order.get('example_file'):
        await callback.answer("–ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
    file = order['example_file']
    if file['type'] == 'photo':
        await bot.send_photo(callback.from_user.id, file['id'], caption="–ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã")
    else:
        await bot.send_document(callback.from_user.id, file['id'], caption="–ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã")
    await callback.answer()

@admin_router.callback_query(F.data.startswith("admin_delete_order:"))
async def admin_delete_order_handler(callback: CallbackQuery, state: FSMContext):
    order_id = callback.data.split(":", 1)[1]
    orders = get_all_orders()
    new_orders = [o for o in orders if str(o['order_id']) != str(order_id)]
    with open("orders.json", "w", encoding="utf-8") as f:
        json.dump(new_orders, f, ensure_ascii=False, indent=4)
    await callback.message.edit_text(f"‚ùå –ó–∞—è–≤–∫–∞ {order_id} —É–¥–∞–ª–µ–Ω–∞.")
    await callback.answer()

@admin_router.callback_query(F.data == "admin_orders_list")
async def admin_back_to_orders_list_handler(callback: CallbackQuery, state: FSMContext):
    await show_admin_orders_list(callback.message)
    await callback.answer()
# –ü—Ä–æ—Å–º–æ—Ç—Ä –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∑–∞–∫–∞–∑–∞ –¥–ª—è –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
@executor_router.callback_query(F.data.startswith("executor_show_materials:"))
async def executor_show_materials_handler(callback: CallbackQuery, state: FSMContext):
    order_id = callback.data.split(":", 1)[1]
    orders = get_all_orders()
    order = next((o for o in orders if str(o['order_id']) == str(order_id)), None)
    if not order:
        await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
    material_buttons = []
    if order.get('guidelines_file'):
        material_buttons.append([InlineKeyboardButton(text="–ú–µ—Ç–æ–¥–∏—á–∫–∞", callback_data=f"executor_material_guidelines:{order_id}")])
    if order.get('task_file') or order.get('task_text'):
        material_buttons.append([InlineKeyboardButton(text="–ó–∞–¥–∞–Ω–∏–µ", callback_data=f"executor_material_task:{order_id}")])
    if order.get('example_file'):
        material_buttons.append([InlineKeyboardButton(text="–ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã", callback_data=f"executor_material_example:{order_id}")])
    # –ö–Ω–æ–ø–∫–∞ '–ù–∞–∑–∞–¥' ‚Äî —Ä–∞–∑–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ '–í —Ä–∞–±–æ—Ç–µ'
    if order.get('status') == '–í —Ä–∞–±–æ—Ç–µ' or order.get('status') == '–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–µ':
        material_buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"executor_view_order_{order_id}")])
    else:
        material_buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"executor_hide_materials:{order_id}")])
    keyboard = InlineKeyboardMarkup(inline_keyboard=material_buttons)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", reply_markup=keyboard)
    await callback.answer()

@executor_router.callback_query(F.data.startswith("executor_back_to_invite:"), ExecutorResponse.waiting_for_price)
async def executor_back_to_invite_handler(callback: CallbackQuery, state: FSMContext):
    order_id = int(callback.data.split(":")[-1])
    await state.clear()
    from executor_menu import executor_view_order
    from types import SimpleNamespace
    fake_callback = SimpleNamespace(
        from_user=callback.from_user,
        message=callback.message,
        data=f"executor_view_order_{order_id}"
    )
    await executor_view_order(fake_callback, state)
    await callback.answer()

@executor_router.callback_query(F.data.startswith("executor_hide_materials:"))
async def executor_hide_materials_handler(callback: CallbackQuery, state: FSMContext):
    order_id = callback.data.split(":", 1)[1]
    orders = get_all_orders()
    order = next((o for o in orders if str(o['order_id']) == str(order_id)), None)
    if not order:
        await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    work_type = order.get('work_type', 'N/A').replace('work_type_', '')
    subject = order.get('subject', '–ù–µ —É–∫–∞–∑–∞–Ω')
    deadline = order.get('deadline', '–ù–µ —É–∫–∞–∑–∞–Ω')
    executor_caption = (
        f"üì¨ –í–∞–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É <b>{subject}</b>\n\n"
        f"üìù <b>–¢–∏–ø —Ä–∞–±–æ—Ç—ã:</b> {work_type}\n"
        f"üóì <b>–°—Ä–æ–∫ —Å–¥–∞—á–∏:</b> {deadline}\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏ –∑–∞—è–≤–∫–∏ –∏ –ø—Ä–∏–º–∏—Ç–µ —Ä–µ—à–µ–Ω–∏–µ."
    )
    executor_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìé –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∑–∞–∫–∞–∑–∞", callback_data=f"executor_show_materials:{order_id}")],
        [
            InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤ –≤–∑—è—Ç—å—Å—è", callback_data=f"executor_accept_{order_id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è", callback_data=f"executor_refuse_{order_id}")
        ],
    ])
    await callback.message.edit_text(executor_caption, parse_mode="HTML", reply_markup=executor_keyboard)
    await callback.answer()

@executor_router.callback_query(F.data.startswith("executor_material_guidelines:"))
async def executor_material_guidelines_handler(callback: CallbackQuery, state: FSMContext):
    order_id = callback.data.split(":", 1)[1]
    orders = get_all_orders()
    order = next((o for o in orders if str(o['order_id']) == str(order_id)), None)
    if not order or not order.get('guidelines_file'):
        await callback.answer("–ú–µ—Ç–æ–¥–∏—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return
    file = order['guidelines_file']
    if file['type'] == 'photo':
        await bot.send_photo(callback.from_user.id, file['id'], caption="–ú–µ—Ç–æ–¥–∏—á–∫–∞")
    else:
        await bot.send_document(callback.from_user.id, file['id'], caption="–ú–µ—Ç–æ–¥–∏—á–∫–∞")
    await callback.answer()

@executor_router.callback_query(F.data.startswith("executor_material_task:"))
async def executor_material_task_handler(callback: CallbackQuery, state: FSMContext):
    order_id = callback.data.split(":", 1)[1]
    orders = get_all_orders()
    order = next((o for o in orders if str(o['order_id']) == str(order_id)), None)
    if not order:
        await callback.answer("–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
        return
    if order.get('task_file'):
        file = order['task_file']
        if file['type'] == 'photo':
            await bot.send_photo(callback.from_user.id, file['id'], caption="–ó–∞–¥–∞–Ω–∏–µ")
        else:
            await bot.send_document(callback.from_user.id, file['id'], caption="–ó–∞–¥–∞–Ω–∏–µ")
    elif order.get('task_text'):
        await bot.send_message(callback.from_user.id, f"–¢–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è:\n\n{order['task_text']}")
    await callback.answer()

@executor_router.callback_query(F.data.startswith("executor_material_example:"))
async def executor_material_example_handler(callback: CallbackQuery, state: FSMContext):
    order_id = callback.data.split(":", 1)[1]
    orders = get_all_orders()
    order = next((o for o in orders if str(o['order_id']) == str(order_id)), None)
    if not order or not order.get('example_file'):
        await callback.answer("–ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
    file = order['example_file']
    if file['type'] == 'photo':
        await bot.send_photo(callback.from_user.id, file['id'], caption="–ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã")
    else:
        await bot.send_document(callback.from_user.id, file['id'], caption="–ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã")
    await callback.answer()



# --- –ê–¥–º–∏–Ω –æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ---
@admin_router.callback_query(F.data.startswith("admin_reply_user:"))
async def admin_reply_user_handler(callback: CallbackQuery, state: FSMContext):
    user_id = int(callback.data.split(":")[1])
    await state.clear()
    await state.update_data(reply_user_id=user_id, reply_msg_id=callback.message.message_id)
    await state.set_state(AdminContact.waiting_for_message)
    await callback.message.edit_text("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:")
    await callback.answer()

@admin_router.callback_query(F.data == "admin_delete_user_msg")
async def admin_delete_user_msg_handler(callback: CallbackQuery, state: FSMContext):
    try:
        await bot.delete_message(ADMIN_ID, callback.message.message_id)
    except:
        pass
    await callback.answer("–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ.")

@admin_router.callback_query(F.data.startswith("admin_save_to_gsheet:"))
async def admin_save_to_gsheet_handler(callback: CallbackQuery, state: FSMContext):
    order_id = callback.data.split(":", 1)[1]
    orders = get_all_orders()
    order = next((o for o in orders if str(o['order_id']) == str(order_id)), None)
    if not order:
        await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return
    if order.get("status") != "–í—ã–ø–æ–ª–Ω–µ–Ω–∞":
        await callback.answer("–°–æ—Ö—Ä–∞–Ω—è—Ç—å –≤ —Ç–∞–±–ª–∏—Ü—É –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏!", show_alert=True)
        return
    phone_number = order.get("phone_number", "")
    if not phone_number:
        users_file = "users.json"
        if os.path.exists(users_file):
            with open(users_file, "r", encoding="utf-8") as f:
                try:
                    users = json.load(f)
                    phone_number = users.get(str(order.get("user_id")), {}).get("phone_number", "")
                except Exception:
                    phone_number = ""
    # --- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –ø–æ–¥–¥–µ—Ä–∂–∫–∞ executor_offers –∫–∞–∫ —Å–ø–∏—Å–∫–∞ –∏ dict ---
    executor_offer = order.get("executor_offers", {})
    if isinstance(executor_offer, list):
        executor_offer = executor_offer[0] if executor_offer else {}
    
    # –ü–æ–ª—É—á–∞–µ–º deadline - —Å–Ω–∞—á–∞–ª–∞ –∏–∑ executor_offer, –ø–æ—Ç–æ–º –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è –∑–∞—è–≤–∫–∏
    exec_deadline = executor_offer.get("deadline", "")
    if not exec_deadline:
        exec_deadline = order.get("deadline", "")
    
    def pluralize_days(val):
        try:
            n = int(val)
            if 11 <= n % 100 <= 14:
                return f"{n} –¥–Ω–µ–π"
            elif n % 10 == 1:
                return f"{n} –¥–µ–Ω—å"
            elif 2 <= n % 10 <= 4:
                return f"{n} –¥–Ω—è"
            else:
                return f"{n} –¥–Ω–µ–π"
        except Exception:
            return str(val)
    exec_deadline_str = pluralize_days(exec_deadline)
    executor_price = executor_offer.get("price", 0)
    admin_price = executor_offer.get("admin_price")
    if admin_price is None:
        admin_price = order.get("final_price", 0)
    try:
        executor_price_val = float(executor_price)
    except Exception:
        executor_price_val = 0
    try:
        admin_price_val = float(admin_price)
    except Exception:
        admin_price_val = 0
    profit = admin_price_val - executor_price_val
    row = [
        order.get("order_id", ""),
        f"{order.get('first_name', '')} {order.get('last_name', '')}".strip(),
        phone_number,
        order.get("group_name", ""),
        order.get("gradebook", ""),
        "—è" if str(order.get("executor_id")) == str(ADMIN_ID) else executor_offer.get("executor_full_name", ""),
        order.get("subject", ""),
        order.get("creation_date", ""),
        exec_deadline_str,  # –°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        "" if order.get("status") != "–í—ã–ø–æ–ª–Ω–µ–Ω–∞" else order.get("submitted_at", ""),  # –î–∞—Ç–∞ —Å–¥–∞—á–∏
        executor_price,
        admin_price,
        profit,
        order.get("status", "")
    ]
    try:
        creds = Credentials.from_service_account_file("google-credentials.json", scopes=["https://www.googleapis.com/auth/spreadsheets"])
        gc = gspread.authorize(creds)
        sh = gc.open_by_key(GOOGLE_SHEET_ID)
        worksheet = sh.sheet1
        # --- –ù–æ–≤—ã–π –±–ª–æ–∫: –∏—â–µ–º —Å—Ç—Ä–æ–∫—É —Å —ç—Ç–∏–º order_id ---
        cell = worksheet.find(str(order.get("order_id", "")))
        if cell:
            worksheet.update(f"A{cell.row}:N{cell.row}", [row])
            await callback.answer("–ó–∞—è–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ Google —Ç–∞–±–ª–∏—Ü–µ!", show_alert=True)
        else:
            worksheet.append_row(row, value_input_option="USER_ENTERED")
            await callback.answer("–ó–∞—è–≤–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ Google —Ç–∞–±–ª–∏—Ü—É!", show_alert=True)
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}", show_alert=True)

@admin_router.callback_query(F.data.startswith("admin_broadcast_select_"))
async def admin_broadcast_select_handler(callback: CallbackQuery, state: FSMContext):
    order_id = int(callback.data.split("_")[-1])
    orders = get_all_orders()
    order = next((o for o in orders if o.get('order_id') == order_id), None)
    if not order:
        await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return
    executors = get_executors_list()
    if not executors:
        await callback.answer("–ù–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.", show_alert=True)
        return
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ñ—Ñ–µ—Ä –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    work_type = order.get('work_type', 'N/A').replace('work_type_', '')
    subject = order.get('subject', '–ù–µ —É–∫–∞–∑–∞–Ω')
    deadline = order.get('deadline', '–ù–µ —É–∫–∞–∑–∞–Ω')
    executor_caption = (
        f"üì¨ –í–∞–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É <b>{subject}</b>\n\n"
        f"üìù <b>–¢–∏–ø —Ä–∞–±–æ—Ç—ã:</b> {work_type}\n"
        f"üóì <b>–°—Ä–æ–∫ —Å–¥–∞—á–∏:</b> {deadline}\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏ –∑–∞—è–≤–∫–∏ –∏ –ø—Ä–∏–º–∏—Ç–µ —Ä–µ—à–µ–Ω–∏–µ."
    )
    executor_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìé –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∑–∞–∫–∞–∑–∞", callback_data=f"executor_show_materials:{order_id}")],
        [
            InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤ –≤–∑—è—Ç—å—Å—è", callback_data=f"executor_accept_{order_id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è", callback_data=f"executor_refuse_{order_id}")
        ],
    ])
    count = 0
    for ex in executors:
        executor_id = ex.get('id')
        if not executor_id:
            continue
        try:
            await bot.send_message(executor_id, executor_caption, parse_mode="HTML", reply_markup=executor_keyboard)
            count += 1
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é {executor_id}: {e}")
    # --- –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ ---
    order['status'] = "–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
    with open("orders.json", "w", encoding="utf-8") as f:
        json.dump(orders, f, ensure_ascii=False, indent=4)
    await callback.answer(f"–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ {count} –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º.", show_alert=True)
    await callback.message.edit_text(f"–†–∞—Å—Å—ã–ª–∫–∞ –ø–æ –∑–∞—è–≤–∫–µ ‚Ññ{order_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ {count} –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º. –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –æ–±–Ω–æ–≤–ª—ë–Ω.")

async def main():
    init_db()
    # –ó–∞–ø—É—Å–∫ aiogram-–±–æ—Ç–∞
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())









