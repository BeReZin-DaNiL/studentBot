import io
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, InputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from datetime import datetime, timedelta
import qrcode
from shared import get_all_orders, ADMIN_ID, bot, STATUS_EMOJI_MAP, get_full_name, pluralize_days, get_executors_list
from aiogram.types import BufferedInputFile
import json
from shared import save_order_to_gsheets
import requests
import os
from aiogram import Router
import time
from aiogram.filters import StateFilter
# --- FSM –¥–ª—è –æ–ø–ª–∞—Ç—ã ---
class PaymentState(StatesGroup):
    waiting_for_payment = State()
    waiting_for_screenshot = State()

# --- FSM –¥–ª—è –æ—Ç–∫–∞–∑–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è ---
class ExecutorCancelOrder(StatesGroup):
    waiting_for_confirm = State()
    waiting_for_reason = State()
    waiting_for_custom_reason = State()
    waiting_for_comment = State()

# –ü—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–∞–∑–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
EXECUTOR_CANCEL_REASONS = [
    "–ù–µ —É—Å–ø–µ—é –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞",
    "–ü–µ—Ä–µ–¥—É–º–∞–ª",
    "–°–ª–æ–∂–Ω–∞—è —Ç–µ–º–∞",
    "–î—Ä—É–≥–æ–µ (–≤–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é)"
]
payment_router = Router()
# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def get_payment_keyboard(order_id):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"payment_paid:{order_id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"payment_cancel:{order_id}")]
    ])

def get_admin_payment_check_keyboard(order_id):
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"admin_payment_accept:{order_id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"admin_payment_reject:{order_id}")
        ]
    ])

def get_executor_work_keyboard(order_id):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üöÄ –ù–∞—á–∏–Ω–∞—é —Ä–∞–±–æ—Ç—É", callback_data=f"executor_start_work:{order_id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è", callback_data=f"executor_refuse_work:{order_id}")]
    ])

def get_executor_cancel_confirm_keyboard(order_id):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞", callback_data=f"executor_cancel_confirm:{order_id}"),
         InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="executor_cancel_abort")]
    ])

def get_executor_cancel_reason_keyboard(order_id):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=reason, callback_data=f"executor_cancel_reason:{order_id}:{i}")]
        for i, reason in enumerate(EXECUTOR_CANCEL_REASONS)
    ])

def get_executor_skip_comment_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="executor_skip_comment")]
    ])

def generate_qr_code(payment_url: str) -> BufferedInputFile:
    img = qrcode.make(payment_url)
    buf = io.BytesIO()
    img.save(buf, format='PNG')
    buf.seek(0)
    return BufferedInputFile(buf.getvalue(), filename="qr_code.png")


# --- –•–µ–Ω–¥–ª–µ—Ä —Å—Ç–∞—Ä—Ç–∞ –æ–ø–ª–∞—Ç—ã ---
@payment_router.callback_query(F.data.startswith("pay_"))
async def start_payment(callback: CallbackQuery, state: FSMContext):
    order_id = int(callback.data.split("_")[1])
    orders = get_all_orders()
    order = next((o for o in orders if o['order_id'] == order_id), None)
    if not order:
        await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
    price = order.get('final_price') or order.get('executor_offer', {}).get('price', '‚Äî')
    subject = order.get('subject', '–ù–µ —É–∫–∞–∑–∞–Ω')
    work_type = order.get('work_type', '–ù–µ —É–∫–∞–∑–∞–Ω').replace('work_type_', '')
    
        # Fallback: —Å—Ç–∞—Ä—ã–π QR –ø–æ –°–ë–ü
    payment_url = f"https://qr.nspk.ru/BS2A001IRUK64DDN8TDB9IVJQLF5RG98?type=01&bank=100000000004&crc=64CA"
    qr = generate_qr_code(payment_url)
    await callback.message.answer(
            f"üí≥ –°–µ—Å—Å–∏—è –æ–ø–ª–∞—Ç—ã –¥–ª–∏—Ç—Å—è 15 –º–∏–Ω—É—Ç!\n\n–û–ø–ª–∞—Ç–∏—Ç–µ –∑–∞–∫–∞–∑ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É: <b>{subject}</b>\n–°—É–º–º–∞: <b>{price} ‚ÇΩ</b>\n\n–°–µ–π—á–∞—Å –æ–ø–ª–∞—Ç–∞ –ø–æ –°–ë–ü. –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:",
            parse_mode="HTML"
        )
    await callback.message.answer_photo(qr, caption="–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.", reply_markup=get_payment_keyboard(order_id))
    await state.set_state(PaymentState.waiting_for_payment)
    await state.update_data(payment_order_id=order_id, payment_start=datetime.now().isoformat())
    await callback.answer()

# --- –•–µ–Ω–¥–ª–µ—Ä –Ω–∞–∂–∞—Ç–∏—è '–Ø –æ–ø–ª–∞—Ç–∏–ª' ---
@payment_router.callback_query(F.data.startswith("payment_paid:"), PaymentState.waiting_for_payment)
async def payment_paid(callback: CallbackQuery, state: FSMContext):
    await state.set_state(PaymentState.waiting_for_screenshot)
    await callback.message.answer("üìÉ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–± –æ–ø–ª–∞—Ç–µ.")
    await callback.answer()

# --- –ü—Ä–∏—ë–º —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω—É ---
@payment_router.message(PaymentState.waiting_for_screenshot, F.photo | F.document)
async def payment_screenshot(message: Message, state: FSMContext):
    data = await state.get_data()
    order_id = data.get('payment_order_id')
    orders = get_all_orders()
    order = next((o for o in orders if o['order_id'] == order_id), None)
    if not order:
        await message.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return
    price = order.get('final_price') or order.get('executor_offer', {}).get('price', '‚Äî')
    subject = order.get('subject', '–ù–µ —É–∫–∞–∑–∞–Ω')
    work_type = order.get('work_type', '–ù–µ —É–∫–∞–∑–∞–Ω').replace('work_type_', '')
    full_name = get_full_name(order)
    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –∞–¥–º–∏–Ω—É
    caption = f"üí∏ –ù–æ–≤—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã –ø–æ –∑–∞–∫–∞–∑—É \"{work_type}\"\n" \
              f"üë§ –ö–ª–∏–µ–Ω—Ç: <b>{full_name}</b>\n" \
              f"üìö –ü—Ä–µ–¥–º–µ—Ç: <b>{subject}</b>\n" \
              f"–°—É–º–º–∞: <b>{price} ‚ÇΩ</b>\n\n" \
              "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É."
    if message.photo:
        file_id = message.photo[-1].file_id
        await bot.send_photo(ADMIN_ID, file_id, caption=caption, parse_mode="HTML", reply_markup=get_admin_payment_check_keyboard(order_id))
    elif message.document:
        await bot.send_document(ADMIN_ID, message.document.file_id, caption=caption, parse_mode="HTML", reply_markup=get_admin_payment_check_keyboard(order_id))
    await message.answer("üìÉ –°–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
    await state.clear()

# --- –ê–¥–º–∏–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –æ–ø–ª–∞—Ç—É ---
@payment_router.callback_query(F.data.startswith("admin_payment_accept:"))
async def admin_payment_accept(callback: CallbackQuery, state: FSMContext):
    order_id = int(callback.data.split(":")[1])
    orders = get_all_orders()
    order = next((o for o in orders if o['order_id'] == order_id), None)
    if not order:
        await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
    order['status'] = "–í —Ä–∞–±–æ—Ç–µ"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º orders.json
    with open("orders.json", "w", encoding="utf-8") as f:  
        json.dump(orders, f, ensure_ascii=False, indent=4)
    await save_order_to_gsheets(order)
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    user_id = order.get('user_id')
    emoji = STATUS_EMOJI_MAP.get('–í —Ä–∞–±–æ—Ç–µ', '‚è≥')
    if user_id:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –§–ò–û –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
        executor_full_name = None
        executor_id = order.get('executor_id')
        offers = order.get('executor_offers', [])
        # –ò—â–µ–º offer —Å –Ω—É–∂–Ω—ã–º executor_id
        offer = None
        if executor_id and offers:
            for o in offers:
                if str(o.get('executor_id')) == str(executor_id):
                    offer = o
                    break
        if not offer and offers:
            offer = offers[0]
        if offer:
            executor_full_name = offer.get('executor_full_name')
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ ‚Äî –∏—â–µ–º –ø–æ executor_id –≤ executors.json
        if not executor_full_name and executor_id:
            try:
                executors = get_executors_list()
                for ex in executors:
                    if str(ex.get('id')) == str(executor_id):
                        executor_full_name = ex.get('name')
                        break
            except Exception:
                executor_full_name = None
        if not executor_full_name:
            executor_full_name = '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'
        deadline_executor = offer.get('deadline') if offer else order.get('deadline', '')
        deadline_executor_str = pluralize_days(deadline_executor) if isinstance(deadline_executor, str) and deadline_executor.isdigit() else deadline_executor
        await bot.send_message(
            user_id,
            f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –í–∞—à –∑–∞–∫–∞–∑ —Ç–µ–ø–µ—Ä—å {emoji} –í —Ä–∞–±–æ—Ç–µ.",  
            parse_mode="HTML"
        )
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
    executor_id = order.get('executor_id')
    offers = order.get('executor_offers', [])
    offer = None
    if executor_id and offers:
        for o in offers:
            if str(o.get('executor_id')) == str(executor_id):
                offer = o
                break
    if not offer and offers:
        offer = offers[0]
    deadline_executor = offer.get('deadline') if offer else order.get('deadline', '')
    deadline_client = order.get('deadline', '–ù–µ —É–∫–∞–∑–∞–Ω')
    subject = order.get('subject', '–ù–µ —É–∫–∞–∑–∞–Ω')
    work_type = order.get('work_type', '–ù–µ —É–∫–∞–∑–∞–Ω').replace('work_type_', '')
    executor_full_name = offer.get('executor_full_name') if offer else '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'
    # –ï—Å–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å ‚Äî –∞–¥–º–∏–Ω, –±–µ—Ä–µ–º –§–ò–û –∏–∑ executors.json –∏–ª–∏ –ø–∏—à–µ–º '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'
    if executor_id and str(executor_id) == str(ADMIN_ID):
        executors = get_executors_list()
        admin_name = None
        for ex in executors:
            if str(ex.get('id')) == str(ADMIN_ID):
                admin_name = ex.get('name')
                break
        executor_full_name = admin_name or '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'
    deadline_executor_str = pluralize_days(deadline_executor) if isinstance(deadline_executor, str) and deadline_executor.isdigit() else deadline_executor
    if executor_id:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìî –ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–∫–∞–∑—É", callback_data=f"executor_view_order_{order_id}")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è", callback_data=f"executor_refuse_work:{order_id}")]
        ])
        await bot.send_message(
            executor_id,
            f"üí∏ –ö–ª–∏–µ–Ω—Ç –æ–ø–ª–∞—Ç–∏–ª –∑–∞–∫–∞–∑!\n–°—Ç–∞—Ç—É—Å: –í —Ä–∞–±–æ—Ç–µ.\n\n"
            f"–¥–µ–¥–ª–∞–π–Ω –∫–ª–∏–µ–Ω—Ç–∞: {deadline_client}\n"
            f"‚è≥ –í—Ä–µ–º—è –Ω–∞ —Ä–∞–±–æ—Ç—É: {deadline_executor_str}\n"
            f"üìö –ü—Ä–µ–¥–º–µ—Ç: {subject}\n"
            f"–¢–∏–ø —Ä–∞–±–æ—Ç—ã: {work_type}",
            parse_mode='HTML',
            reply_markup=keyboard
        )
    try:
        await callback.message.delete()
    except Exception:
        pass
    # –ï—Å–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å ‚Äî –∞–¥–º–∏–Ω, –ø–∏—à–µ–º '–Ø' –≤ –ø–æ–ª–µ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å
    if executor_id and str(executor_id) == str(ADMIN_ID):
        executor_full_name = '–Ø'
    # --- –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –¥–ª—è admin_text ---
    executor_full_name_admin = None
    executor_id_admin = order.get('executor_id')
    offers_admin = order.get('executor_offers', [])
    offer_admin = None
    if executor_id_admin and offers_admin:
        for o in offers_admin:
            if str(o.get('executor_id')) == str(executor_id_admin):
                offer_admin = o
                break
    if not offer_admin and offers_admin:
        offer_admin = offers_admin[0]
    if offer_admin:
        executor_full_name_admin = offer_admin.get('executor_full_name')
    if not executor_full_name_admin and executor_id_admin:
        try:
            executors = get_executors_list()
            for ex in executors:
                if str(ex.get('id')) == str(executor_id_admin):
                    executor_full_name_admin = ex.get('name')
                    break
        except Exception:
            executor_full_name_admin = None
    if not executor_full_name_admin:
        executor_full_name_admin = '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'
    admin_text = (
        f"‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ —Ä–∞–±–æ—Ç—É ‚è≥\n"
        f"<b>–ü—Ä–µ–¥–º–µ—Ç:</b> {subject}\n"
        f"<b>–¢–∏–ø —Ä–∞–±–æ—Ç—ã:</b> {work_type}\n"
    )
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É '–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–∫–∞–∑—É' –µ—Å–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å ‚Äî –∞–¥–º–∏–Ω
    admin_keyboard = None
    if executor_id and str(executor_id) == str(ADMIN_ID):
        admin_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–∫–∞–∑—É", callback_data=f"admin_view_order_{order_id}")]
        ])
    await bot.send_message(callback.from_user.id, admin_text, parse_mode="HTML", reply_markup=admin_keyboard)
    await callback.answer()

@payment_router.callback_query(F.data.startswith("admin_payment_reject:"))
async def admin_payment_reject(callback: CallbackQuery, state: FSMContext):
    order_id = int(callback.data.split(":")[1])
    orders = get_all_orders()
    order = next((o for o in orders if o['order_id'] == order_id), None)
    if not order:
        await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
    user_id = order.get('user_id')
    # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ '–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã'
    order['status'] = "–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã"
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º orders.json
    with open("orders.json", "w", encoding="utf-8") as f:
        json.dump(orders, f, ensure_ascii=False, indent=4)
    if user_id:
        await bot.send_message(user_id, "‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    try:
        await callback.message.delete()
    except Exception:
        pass
    await callback.message.edit_text("‚ùå –û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await callback.answer()

@payment_router.callback_query(F.data.startswith("payment_cancel:"))
async def payment_cancel(callback: CallbackQuery, state: FSMContext):
    order_id = int(callback.data.split(":")[-1])
    # 1. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
    orders = get_all_orders()
    updated = False
    for order in orders:
        if str(order.get("order_id")) == str(order_id):
            order["status"] = "–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
            updated = True
            break
    if updated:
        with open("orders.json", "w", encoding="utf-8") as f:
            json.dump(orders, f, ensure_ascii=False, indent=4)
    await state.clear()
    # 2. –£–¥–∞–ª—è–µ–º/—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        if callback.message.text:
            await callback.message.edit_text("‚ùå–û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        else:
            await callback.message.delete()
            await callback.message.answer("‚ùå–û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    except Exception:
        await callback.message.answer("‚ùå–û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    # 3. –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    user_id = callback.from_user.id
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    phone_number = None
    try:
        with open("users.json", "r", encoding="utf-8") as f:
            users = json.load(f)
            phone_number = users.get(str(user_id), {}).get("phone_number")
    except Exception:
        phone_number = None
    phone_info = phone_number if phone_number else '–Ω–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω'
    await bot.send_message(ADMIN_ID, f"‚ùå –ö–ª–∏–µ–Ω—Ç –æ—Ç–º–µ–Ω–∏–ª –æ–ø–ª–∞—Ç—É, —Å–≤—è–∂–∏—Ç–µ—Å—å –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π\n–¢–µ–ª–µ—Ñ–æ–Ω: {phone_info}")
    await callback.answer()

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ù–∞—á–∏–Ω–∞—é —Ä–∞–±–æ—Ç—É' ---
@payment_router.callback_query(F.data.startswith("executor_start_work:"))
async def executor_start_work(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—à–µ–ª –≤ —Ä–∞–±–æ—Ç—É ‚è≥")
    await callback.answer()

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–û—Ç–∫–∞–∑–∞—Ç—å—Å—è' ---
@payment_router.callback_query(F.data.startswith("executor_refuse_work:"))
async def executor_refuse_work(callback: CallbackQuery, state: FSMContext):
    order_id = int(callback.data.split(":")[-1])
    await state.set_state(ExecutorCancelOrder.waiting_for_confirm)
    await state.update_data(cancel_order_id=order_id)
    await callback.message.edit_text(
        "‚ùóÔ∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –∑–∞–∫–∞–∑–∞?",
        reply_markup=get_executor_cancel_confirm_keyboard(order_id)
    )
    await callback.answer()

@payment_router.callback_query(F.data.startswith("executor_cancel_confirm:"), ExecutorCancelOrder.waiting_for_confirm)
async def executor_cancel_confirm(callback: CallbackQuery, state: FSMContext):
    order_id = int(callback.data.split(":")[-1])
    await state.set_state(ExecutorCancelOrder.waiting_for_reason)
    await callback.message.edit_text(
        "üìÉ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞:",
        reply_markup=get_executor_cancel_reason_keyboard(order_id)
    )
    await callback.answer()

@payment_router.callback_query(F.data == "executor_cancel_abort", ExecutorCancelOrder.waiting_for_confirm)
async def executor_cancel_abort(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.delete()
    await callback.answer()

@payment_router.callback_query(F.data.startswith("executor_cancel_reason:"), ExecutorCancelOrder.waiting_for_reason)
async def executor_cancel_reason(callback: CallbackQuery, state: FSMContext):
    _, order_id, idx = callback.data.split(":")
    idx = int(idx)
    if EXECUTOR_CANCEL_REASONS[idx].startswith("–î—Ä—É–≥–æ–µ"):
        await state.set_state(ExecutorCancelOrder.waiting_for_custom_reason)
        await callback.message.edit_text("‚úçÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞:", reply_markup=get_executor_skip_comment_keyboard())
        await callback.answer()
        return
    await finish_executor_cancel_order(callback, state, order_id, EXECUTOR_CANCEL_REASONS[idx], "")

@payment_router.message(ExecutorCancelOrder.waiting_for_custom_reason)
async def executor_cancel_custom_reason(message: Message, state: FSMContext):
    data = await state.get_data()
    order_id = data.get("cancel_order_id")
    await finish_executor_cancel_order(message, state, order_id, "–î—Ä—É–≥–æ–µ", message.text)

@payment_router.callback_query(F.data == "executor_skip_comment", ExecutorCancelOrder.waiting_for_custom_reason)
async def executor_skip_comment(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    order_id = data.get("cancel_order_id")
    await finish_executor_cancel_order(callback, state, order_id, "–î—Ä—É–≥–æ–µ", "")

async def finish_executor_cancel_order(message_or_callback, state, order_id, reason, comment):
    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑
    orders = get_all_orders()
    updated = False
    for order in orders:
        if str(order['order_id']) == str(order_id):
            order['status'] = "–†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç—Å—è"
            order['executor_cancel_reason'] = reason
            order['executor_cancel_comment'] = comment
            order.pop('executor_offer', None)
            order.pop('executor_id', None)  # –£–¥–∞–ª—è–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
            updated = True
            break
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º orders.json
    with open("orders.json", "w", encoding="utf-8") as f:
        json.dump(orders, f, ensure_ascii=False, indent=4)
    await state.clear()
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
    if isinstance(message_or_callback, Message):
        await message_or_callback.answer("‚ùé –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
    else:
        await message_or_callback.message.edit_text("‚ùé –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
        await message_or_callback.answer()
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    # –ü–æ–ª—É—á–∞–µ–º –§–ò–û –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏ –ø—Ä–µ–¥–º–µ—Ç
    executor_full_name = '‚Äî'
    subject = '‚Äî'
    for order in orders:
        if str(order['order_id']) == str(order_id):
            subject = order.get('subject', '‚Äî')
            executor_id = order.get('executor_id')
            offers = order.get('executor_offers', [])
            offer = None
            if executor_id and offers:
                for o in offers:
                    if str(o.get('executor_id')) == str(executor_id):
                        offer = o
                        break
            if not offer and offers:
                offer = offers[0]
            if offer:
                executor_full_name = offer.get('executor_full_name') or '‚Äî'
            if not executor_full_name and executor_id:
                from shared import get_executors_list
                executors = get_executors_list()
                for ex in executors:
                    if str(ex.get('id')) == str(executor_id):
                        executor_full_name = ex.get('name') or '‚Äî'
                        break
            break
    admin_text = f"""
‚ùå <b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å - {executor_full_name}</b> –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –∑–∞–∫–∞–∑–∞ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É <b>{subject}</b>.
<b>–ü—Ä–∏—á–∏–Ω–∞:</b> {reason}
<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {comment or '–ù–µ—Ç'}
    """
    await bot.send_message(ADMIN_ID, admin_text, parse_mode="HTML")

@payment_router.callback_query(F.data.startswith("admin_confirm_payment:"))
async def admin_confirm_payment(callback: CallbackQuery, state: FSMContext):
    order_id = int(callback.data.split(":")[-1])
    all_orders = get_all_orders()
    target_order = next((o for o in all_orders if o.get("order_id") == order_id), None)
    if not target_order:
        await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
    # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å
    target_order['status'] = "–í —Ä–∞–±–æ—Ç–µ"
    with open("orders.json", "w", encoding="utf-8") as f:
        json.dump(all_orders, f, ensure_ascii=False, indent=4)
    await save_order_to_gsheets(target_order)
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    customer_id = target_order.get("user_id")
    executor_id = target_order.get("executor_id")
    offer = target_order.get("executor_offer", {})
    executor_deadline = offer.get("deadline", "–Ω–µ —É–∫–∞–∑–∞–Ω")
    # –ï—Å–ª–∏ –¥–µ–¥–ª–∞–π–Ω = '–î–æ –¥–µ–¥–ª–∞–π–Ω–∞', –±–µ—Ä–µ–º —Å—Ä–æ–∫ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
    if str(executor_deadline).strip().lower() == '–î–æ –¥–µ–¥–ª–∞–π–Ω–∞':
        deadline_str = target_order.get('deadline', '–Ω–µ —É–∫–∞–∑–∞–Ω')
    else:
        deadline_str = pluralize_days(executor_deadline) if isinstance(executor_deadline, str) and executor_deadline.isdigit() else executor_deadline
    executor_full_name = offer.get('executor_full_name', '–Ø')
    subject = target_order.get('subject', '–ù–µ —É–∫–∞–∑–∞–Ω')
    work_type = target_order.get('work_type', '').replace('work_type_', '')
    # –ï—Å–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å ‚Äî –∞–¥–º–∏–Ω, –ø–∏—à–µ–º '–Ø' –≤ –ø–æ–ª–µ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
    if executor_id and str(executor_id) == str(ADMIN_ID):
        executor_full_name = '–Ø'
        admin_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–∫–∞–∑—É", callback_data=f"admin_view_order_{order_id}")]
        ])
    else:
        admin_keyboard = None
    # –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    admin_text = (
        f"‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ —Ä–∞–±–æ—Ç—É ‚è≥\n"
        f"<b>–ü—Ä–µ–¥–º–µ—Ç:</b> {subject}\n"
        f"<b>–¢–∏–ø —Ä–∞–±–æ—Ç—ã:</b> {work_type}\n"

    )
    await callback.message.edit_text(admin_text, parse_mode="HTML", reply_markup=admin_keyboard)
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
    if customer_id:
        try:
            client_text = (
                f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ –≤–∞—à–µ–π –∑–∞—è–≤–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n\n"
                f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —É–∂–µ –ø—Ä–∏—Å—Ç—É–ø–∏–ª –∫ —Ä–∞–±–æ—Ç–µ. "
                f"–û–∂–∏–¥–∞–µ–º—ã–π —Å—Ä–æ–∫ —Å–¥–∞—á–∏: <b>{deadline_str}</b>."
            )
            await bot.send_message(customer_id, client_text, parse_mode="HTML")
        except Exception as e:
            await bot.send_message(ADMIN_ID, f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ {customer_id} –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã. –û—à–∏–±–∫–∞: {e}")
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é
    if executor_id:
        deadline_executor = target_order.get('executor_offer', {}).get('deadline') or target_order.get('deadline', '')
        deadline_executor_str = pluralize_days(deadline_executor) if isinstance(deadline_executor, str) and deadline_executor.isdigit() else deadline_executor
        executor_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–∫–∞–∑—É", callback_data=f"executor_view_order_{order_id}")]
        ])
        await bot.send_message(
            executor_id,
            f"‚úÖ –ó–∞–∫–∞–∑ –ø–µ—Ä–µ—à–µ–ª –≤ —Å—Ç–∞—Ç—É—Å '–í —Ä–∞–±–æ—Ç–µ'\n–í–∞—à –¥–µ–¥–ª–∞–π–Ω - {deadline_executor_str}",
            reply_markup=executor_keyboard
        )
    await callback.answer()

@payment_router.callback_query(F.data.startswith("admin_reject_payment:"))
async def admin_reject_payment(callback: CallbackQuery, state: FSMContext):
    order_id = int(callback.data.split(":")[-1])

    orders = get_all_orders()
    target_order = next((o for o in orders if o.get("order_id") == order_id), None)
    
    if not target_order:
        await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
        
    target_order["status"] = "–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã"
    
    with open("orders.json", "w", encoding="utf-8") as f:
        json.dump(orders, f, ensure_ascii=False, indent=4)
        
    customer_id = target_order.get("user_id")
    if customer_id:
        try:
            rejection_text = "‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–∫–ª–æ–Ω–∏–ª –≤–∞—à—É –æ–ø–ª–∞—Ç—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∏–º –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            await bot.send_message(customer_id, rejection_text)
        except Exception as e:
            await bot.send_message(ADMIN_ID, f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ {customer_id} –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã. –û—à–∏–±–∫–∞: {e}")
            
    await callback.message.edit_text("–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –æ–ø–ª–∞—Ç—É.")
    await callback.answer() 