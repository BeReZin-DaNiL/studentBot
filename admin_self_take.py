from aiogram import Router, F
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from shared import ADMIN_ID, get_price_keyboard, get_deadline_keyboard, admin_view_order_handler, get_admin_deadline_keyboard, get_admin_comment_skip_keyboard, pluralize_days, get_all_orders, bot
import json
from datetime import datetime, timedelta

admin_self_take_router = Router()

# FSM –¥–ª—è –∞–¥–º–∏–Ω–∞, –∫–æ–≥–¥–∞ –æ–Ω —Å–∞–º –±–µ—Ä–µ—Ç –∑–∞–∫–∞–∑
class AdminSelfTake(StatesGroup):
    waiting_for_price = State()
    waiting_for_deadline = State()
    waiting_for_comment = State()
    waiting_for_confirm = State()

# --- –ü–µ—Ä–≤—ã–π —Ö–µ–Ω–¥–ª–µ—Ä: —Å—Ç–∞—Ä—Ç –ø—Ä–æ—Ü–µ—Å—Å–∞ ---
@admin_self_take_router.callback_query(F.data.startswith("admin_self_take_"))
async def admin_self_take_start(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id != int(ADMIN_ID):
        return
    order_id = int(callback.data.split("_")[-1])
    await state.update_data(order_id=order_id)
    await state.set_state(AdminSelfTake.waiting_for_price)
    await callback.message.edit_text("üí∞ –í—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞, –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤—Ä—É—á–Ω—É—é(—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):", reply_markup=get_price_keyboard(order_id=order_id, for_admin=True))
    await callback.answer()

# --- –û—Å—Ç–∞–ª—å–Ω—ã–µ –∑–∞–≥–ª—É—à–∫–∏ ---
@admin_self_take_router.callback_query(F.data.startswith("price_"), AdminSelfTake.waiting_for_price)
async def admin_self_take_price_choice(callback: CallbackQuery, state: FSMContext):
    price = callback.data.split("_")[-1]
    await state.update_data(price=price)
    await state.set_state(AdminSelfTake.waiting_for_deadline)
    await callback.message.edit_text("‚è≥ –í—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:", reply_markup=get_admin_deadline_keyboard())
    await callback.answer()

@admin_self_take_router.callback_query(F.data == "price_manual", AdminSelfTake.waiting_for_price)
async def admin_self_take_price_manual(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤—Ä—É—á–Ω—É—é (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):")
    await callback.answer()

@admin_self_take_router.message(AdminSelfTake.waiting_for_price)
async def admin_self_take_price_manual_input(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ.")
        return
    await state.update_data(price=message.text)
    await state.set_state(AdminSelfTake.waiting_for_deadline)
    await message.answer("‚è≥ –í—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è(—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):", reply_markup=get_admin_deadline_keyboard())

@admin_self_take_router.callback_query(F.data.startswith("admin_deadline_"), AdminSelfTake.waiting_for_deadline)
async def admin_self_take_deadline_choice(callback: CallbackQuery, state: FSMContext):
    deadline = callback.data.split("_", 2)[-1]
    await state.update_data(deadline=deadline)
    await state.set_state(AdminSelfTake.waiting_for_comment)
    await callback.message.edit_text("üí¨ –î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —à–∞–≥):", reply_markup=get_admin_comment_skip_keyboard())
    await callback.answer()



@admin_self_take_router.message(AdminSelfTake.waiting_for_deadline)
async def admin_self_take_deadline_manual_input(message: Message, state: FSMContext):
    await state.update_data(deadline=message.text)
    await state.set_state(AdminSelfTake.waiting_for_comment)
    await message.answer("üí¨ –î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —à–∞–≥):", reply_markup=get_admin_comment_skip_keyboard())

@admin_self_take_router.message(AdminSelfTake.waiting_for_comment)
async def admin_self_take_comment_input(message: Message, state: FSMContext):
    await state.update_data(comment=message.text)
    data = await state.get_data()
    order_id = data.get('order_id')
    # --- –ü–æ–ª—É—á–∞–µ–º subject –∏ work_type –∏–∑ state –∏–ª–∏ –∏–∑ orders.json ---
    subject = data.get('subject')
    work_type_raw = data.get('work_type')
    if not subject or not work_type_raw:
        try:
            with open('orders.json', 'r', encoding='utf-8') as f:
                orders = json.load(f)
            order = next((o for o in orders if o.get('order_id') == order_id), None)
            if order:
                if not subject:
                    subject = order.get('subject', '‚Äî')
                if not work_type_raw:
                    work_type_raw = order.get('work_type', '‚Äî')
        except Exception:
            subject = subject or '‚Äî'
            work_type_raw = work_type_raw or '‚Äî'
    work_type = work_type_raw.replace('work_type_', '') if isinstance(work_type_raw, str) and work_type_raw.startswith('work_type_') else work_type_raw
    if work_type == 'other':
        work_type = data.get('work_type_other_name', '–î—Ä—É–≥–æ–µ')
    price = data.get('price', '‚Äî')
    deadline = data.get('deadline', '‚Äî')
    deadline_str = pluralize_days(deadline) if str(deadline).isdigit() else str(deadline)
    comment = data.get('comment') or '–Ω–µ—Ç—É'
    text = (
        "<b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</b>\n\n"
        f"üìö <b>–ü—Ä–µ–¥–º–µ—Ç:</b> {subject}\n\n"
        f"üìù <b>–¢–∏–ø —Ä–∞–±–æ—Ç—ã:</b> {work_type}\n\n"
        f"üí∞ <b>–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞:</b> {price} ‚ÇΩ\n\n"
        f"‚è≥ <b>–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</b> {deadline_str}\n\n"
        f"üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {comment}"
    )
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –æ–ø–ª–∞—Ç—É", callback_data="admin_self_send_to_pay")]
    ])
    await state.set_state(AdminSelfTake.waiting_for_confirm)
    await message.answer(text, reply_markup=keyboard, parse_mode="HTML")

@admin_self_take_router.callback_query(F.data == "admin_skip_comment", AdminSelfTake.waiting_for_comment)
async def admin_self_take_skip_comment(callback: CallbackQuery, state: FSMContext):
    await state.update_data(comment="–Ω–µ—Ç—É")
    data = await state.get_data()
    order_id = data.get('order_id')
    subject = data.get('subject')
    work_type_raw = data.get('work_type')
    if not subject or not work_type_raw:
        try:
            with open('orders.json', 'r', encoding='utf-8') as f:
                orders = json.load(f)
            order = next((o for o in orders if o.get('order_id') == order_id), None)
            if order:
                if not subject:
                    subject = order.get('subject', '‚Äî')
                if not work_type_raw:
                    work_type_raw = order.get('work_type', '‚Äî')
        except Exception:
            subject = subject or '‚Äî'
            work_type_raw = work_type_raw or '‚Äî'
    work_type = work_type_raw.replace('work_type_', '') if isinstance(work_type_raw, str) and work_type_raw.startswith('work_type_') else work_type_raw
    if work_type == 'other':
        work_type = data.get('work_type_other_name', '–î—Ä—É–≥–æ–µ')
    price = data.get('price', '‚Äî')
    deadline = data.get('deadline', '‚Äî')
    deadline_str = pluralize_days(deadline) if str(deadline).isdigit() else str(deadline)
    comment = data.get('comment') or '–Ω–µ—Ç—É'
    text = (
        "<b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</b>\n\n"
        f"üìö <b>–ü—Ä–µ–¥–º–µ—Ç:</b> {subject}\n"
        f"üìù <b>–¢–∏–ø —Ä–∞–±–æ—Ç—ã:</b> {work_type}\n"
        f"üí∞ <b>–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞:</b> {price} ‚ÇΩ\n"
        f"‚è≥ <b>–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</b> {deadline_str}\n\n"
        f"üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {comment}"
    )
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –æ–ø–ª–∞—Ç—É", callback_data="admin_self_send_to_pay")]
    ])
    await state.set_state(AdminSelfTake.waiting_for_confirm)
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()

@admin_self_take_router.callback_query(F.data == "admin_self_send_to_pay", AdminSelfTake.waiting_for_confirm)
async def admin_self_send_to_pay_handler(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    order_id = data.get('order_id')
    price = data.get('price')
    deadline = data.get('deadline')
    comment = data.get('comment', '')
    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑: –Ω–∞–∑–Ω–∞—á–∞–µ–º –∞–¥–º–∏–Ω–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º, —Å—Ç–∞—Ç—É—Å '–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã', —Ñ–∏–Ω–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∏ –¥–µ–¥–ª–∞–π–Ω
    orders = get_all_orders()
    order = next((o for o in orders if o.get('order_id') == order_id), None)
    if not order:
        await callback.message.edit_text("–û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        await callback.answer()
        return
    order['executor_id'] = int(ADMIN_ID)
    order['status'] = '–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã'
    order['final_price'] = price
    order['deadline'] = deadline  # –°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –¥–Ω—è—Ö/—Ç–µ–∫—Å—Ç–æ–º

    # --- –†–∞—Å—á–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞—Ç—ã —Å–¥–∞—á–∏ ---
    due_date = order.get('deadline_date') # –ò—Å—Ö–æ–¥–Ω—ã–π –¥–µ–¥–ª–∞–π–Ω –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
    if str(deadline).isdigit():
        try:
            # –ï—Å–ª–∏ —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è - —á–∏—Å–ª–æ, —Å—á–∏—Ç–∞–µ–º –æ—Ç —Å–µ–≥–æ–¥–Ω—è
            due_date = (datetime.now() + timedelta(days=int(deadline))).strftime('%d.%m.%Y')
        except ValueError:
            pass # –û—Å—Ç–∞–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π due_date –µ—Å–ª–∏ deadline –Ω–µ —á–∏—Å–ª–æ
    elif deadline == "–î–æ –¥–µ–¥–ª–∞–π–Ω–∞" and due_date:
        pass # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –¥–µ–¥–ª–∞–π–Ω –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
    else: # –ï—Å–ª–∏ —Å—Ä–æ–∫ - —Å—Ç—Ä–æ–∫–∞ (–Ω–∞–ø—Ä. "1 –¥–µ–Ω—å"), –ø—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å
        try:
            days = int(deadline.split()[0])
            due_date = (datetime.now() + timedelta(days=days)).strftime('%d.%m.%Y')
        except (ValueError, IndexError):
            pass # –û—Å—Ç–∞–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π

    order['due_date'] = due_date # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É —Å–¥–∞—á–∏
    order['executor_full_name'] = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
    order['admin_self_comment'] = comment
    with open('orders.json', 'w', encoding='utf-8') as f:
        json.dump(orders, f, ensure_ascii=False, indent=4)
    # –°–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
    customer_id = order.get('user_id')
    subject = order.get('subject', '–ù–µ —É–∫–∞–∑–∞–Ω')
    work_type = order.get('work_type', '–ù–µ —É–∫–∞–∑–∞–Ω').replace('work_type_', '')
    deadline_str = pluralize_days(deadline) if str(deadline).isdigit() else str(deadline)
    text = (
        f"üôã‚Äç‚ôÇÔ∏è –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω!\n\n"
        f"üìö –ü—Ä–µ–¥–º–µ—Ç: <b>{subject}</b>\n"
        f"üìù –¢–∏–ø —Ä–∞–±–æ—Ç—ã: <b>{work_type}</b>\n"
        f"üí∞ –°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: <b>{price} ‚ÇΩ</b>\n"
        f"‚è≥ –°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: <b>{deadline_str}</b>\n\n"
        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ –∑–∞–∫–∞–∑ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã."
    )
    # –ö–Ω–æ–ø–∫–∞ '–Ø –æ–ø–ª–∞—Ç–∏–ª' (callback_data=pay_{order_id})
    pay_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", callback_data=f"pay_{order_id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è", callback_data=f"payment_cancel:{order_id}")]
    ])
    if customer_id:
        await bot.send_message(customer_id, text, parse_mode="HTML", reply_markup=pay_keyboard)
    await callback.message.edit_text("‚úÖ –ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É –Ω–∞ –æ–ø–ª–∞—Ç—É!", reply_markup=None)
    await state.clear()
    await callback.answer()

@admin_self_take_router.callback_query(F.data.startswith("admin_self_back_to_order_"), AdminSelfTake.waiting_for_price)
async def admin_self_back_to_order_handler(callback: CallbackQuery, state: FSMContext):
    order_id = int(callback.data.split("_")[-1])
    await state.clear()
    await admin_view_order_handler(callback, state)
    await callback.answer()

@admin_self_take_router.callback_query(F.data == "admin_self_back_to_price", AdminSelfTake.waiting_for_deadline)
async def admin_self_back_to_price_handler(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    order_id = data.get('order_id')
    await state.set_state(AdminSelfTake.waiting_for_price)
    await callback.message.edit_text("üí∞ –í—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞, –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤—Ä—É—á–Ω—É—é(—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):", reply_markup=get_price_keyboard(order_id=order_id, for_admin=True))
    await callback.answer()

@admin_self_take_router.callback_query(F.data.startswith("admin_self_view_revision_"))
async def admin_self_view_revision_handler(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id != int(ADMIN_ID):
        return
    order_id = int(callback.data.split("_")[-1])
    orders = get_all_orders()
    order = next((o for o in orders if o.get('order_id') == order_id), None)
    if not order:
        await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ —à–∞–±–ª–æ–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    creation_date = order.get('creation_date', '‚Äî')
    group = order.get('group_name', '‚Äî')
    university = order.get('university_name', '‚Äî')
    teacher = order.get('teacher_name', '‚Äî')
    gradebook = order.get('gradebook', '‚Äî')
    subject = order.get('subject', '‚Äî')
    work_type_key = order.get('work_type', 'N/A').replace('work_type_', '')
    work_type_str = work_type_key if work_type_key != 'other' else order.get('work_type_other_name', '–î—Ä—É–≥–æ–µ')
    guidelines = '‚úÖ –î–∞' if order.get('has_guidelines') else '‚ùå –ù–µ—Ç'
    task = '‚úÖ –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ' if order.get('task_file') or order.get('task_text') else '‚ùå –ù–µ—Ç'
    example = '‚úÖ –î–∞' if order.get('has_example') else '‚ùå –ù–µ—Ç'
    deadline = order.get('deadline', '‚Äî')
    revision_comment = order.get('revision_comment', '‚Äî')
    admin_name = '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'
    details_text = (
        f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {creation_date}\n\n"
        f"–ì—Ä—É–ø–ø–∞: {group}\n"
        f"–í–£–ó: {university}\n"
        f"–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {teacher}\n"
        f"–ù–æ–º–µ—Ä –∑–∞—á–µ—Ç–∫–∏: {gradebook}\n"
        f"–ü—Ä–µ–¥–º–µ—Ç: {subject}\n"
        f"–¢–∏–ø —Ä–∞–±–æ—Ç—ã: {work_type_str}\n"
        f"–ú–µ—Ç–æ–¥–∏—á–∫–∞: {guidelines}\n"
        f"–ó–∞–¥–∞–Ω–∏–µ: {task}\n"
        f"–ü—Ä–∏–º–µ—Ä: {example}\n"
        f"–î–µ–¥–ª–∞–π–Ω: {deadline}\n\n"
        f"–î–æ—Ä–∞–±–æ—Ç–∫–∞: {revision_comment}\n"
        f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {admin_name}"
    )
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –°–¥–∞—Ç—å —Ä–∞–±–æ—Ç—É", callback_data=f"admin_admin_submit_work_{order_id}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∑–∞—è–≤–∫–∞–º", callback_data="admin_orders_list")]
    ])
    try:
        await callback.message.edit_text(details_text, reply_markup=keyboard)
    except Exception:
        await callback.message.answer(details_text, reply_markup=keyboard)
    await callback.answer()